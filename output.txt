[info] welcome to sbt 1.9.7 (Debian Java 21.0.7-ea)
[info] loading settings for project zio-schema-build-build from sbt-updates.sbt ...
[info] loading project definition from /home/yossef/zio-schema/project/project
[info] loading settings for project zio-schema-build from plugins.sbt ...
[info] loading project definition from /home/yossef/zio-schema/project
[info] loading settings for project root from build.sbt ...
[info] resolving key references (44937 settings) ...
[info] set current project to zio-schema (in build file:/home/yossef/zio-schema/)
[warn] there are 63 keys that are not used by any other settings/tasks:
[warn]  
[warn] * ThisBuild / name
[warn]   +- /home/yossef/zio-schema/build.sbt:13
[warn] * testsJS / buildInfoKeys
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:212
[warn] * testsJS / buildInfoPackage
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:213
[warn] * testsJVM / buildInfoKeys
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:212
[warn] * testsJVM / buildInfoPackage
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:213
[warn] * testsNative / buildInfoKeys
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:212
[warn] * testsNative / buildInfoPackage
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:213
[warn] * zioSchemaAvro / buildInfoKeys
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:212
[warn] * zioSchemaAvro / buildInfoPackage
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:213
[warn] * zioSchemaBson / buildInfoKeys
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:212
[warn] * zioSchemaBson / buildInfoPackage
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:213
[warn] * zioSchemaDerivationJS / buildInfoKeys
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:212
[warn] * zioSchemaDerivationJS / buildInfoPackage
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:213
[warn] * zioSchemaDerivationJVM / buildInfoKeys
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:212
[warn] * zioSchemaDerivationJVM / buildInfoPackage
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:213
[warn] * zioSchemaDerivationNative / buildInfoKeys
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:212
[warn] * zioSchemaDerivationNative / buildInfoPackage
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:213
[warn] * zioSchemaJS / buildInfoKeys
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:212
[warn] * zioSchemaJS / buildInfoPackage
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:213
[warn] * zioSchemaJVM / buildInfoKeys
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:212
[warn] * zioSchemaJVM / buildInfoPackage
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:213
[warn] * zioSchemaJsonJS / buildInfoKeys
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:212
[warn] * zioSchemaJsonJS / buildInfoPackage
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:213
[warn] * zioSchemaJsonJVM / buildInfoKeys
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:212
[warn] * zioSchemaJsonJVM / buildInfoPackage
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:213
[warn] * zioSchemaJsonNative / buildInfoKeys
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:212
[warn] * zioSchemaJsonNative / buildInfoPackage
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:213
[warn] * zioSchemaMacrosJS / buildInfoKeys
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:212
[warn] * zioSchemaMacrosJS / buildInfoPackage
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:213
[warn] * zioSchemaMacrosJVM / buildInfoKeys
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:212
[warn] * zioSchemaMacrosJVM / buildInfoPackage
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:213
[warn] * zioSchemaMacrosNative / buildInfoKeys
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:212
[warn] * zioSchemaMacrosNative / buildInfoPackage
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:213
[warn] * zioSchemaMsgPack / buildInfoKeys
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:212
[warn] * zioSchemaMsgPack / buildInfoPackage
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:213
[warn] * zioSchemaNative / buildInfoKeys
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:212
[warn] * zioSchemaNative / buildInfoPackage
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:213
[warn] * zioSchemaOpticsJS / buildInfoKeys
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:212
[warn] * zioSchemaOpticsJS / buildInfoPackage
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:213
[warn] * zioSchemaOpticsJVM / buildInfoKeys
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:212
[warn] * zioSchemaOpticsJVM / buildInfoPackage
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:213
[warn] * zioSchemaOpticsNative / buildInfoKeys
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:212
[warn] * zioSchemaOpticsNative / buildInfoPackage
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:213
[warn] * zioSchemaProtobufJS / buildInfoKeys
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:212
[warn] * zioSchemaProtobufJS / buildInfoPackage
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:213
[warn] * zioSchemaProtobufJVM / buildInfoKeys
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:212
[warn] * zioSchemaProtobufJVM / buildInfoPackage
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:213
[warn] * zioSchemaProtobufNative / buildInfoKeys
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:212
[warn] * zioSchemaProtobufNative / buildInfoPackage
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:213
[warn] * zioSchemaThrift / buildInfoKeys
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:212
[warn] * zioSchemaThrift / buildInfoPackage
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:213
[warn] * zioSchemaXmlJS / buildInfoKeys
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:212
[warn] * zioSchemaXmlJS / buildInfoPackage
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:213
[warn] * zioSchemaXmlJVM / buildInfoKeys
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:212
[warn] * zioSchemaXmlJVM / buildInfoPackage
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:213
[warn] * zioSchemaXmlNative / buildInfoKeys
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:212
[warn] * zioSchemaXmlNative / buildInfoPackage
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:213
[warn] * zioSchemaZioTestJS / buildInfoKeys
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:212
[warn] * zioSchemaZioTestJS / buildInfoPackage
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:213
[warn] * zioSchemaZioTestJVM / buildInfoKeys
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:212
[warn] * zioSchemaZioTestJVM / buildInfoPackage
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:213
[warn] * zioSchemaZioTestNative / buildInfoKeys
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:212
[warn] * zioSchemaZioTestNative / buildInfoPackage
[warn]   +- /home/yossef/zio-schema/project/BuildHelper.scala:213
[warn]  
[warn] note: a setting might still be used by a command; to exclude a key from this `lintUnused` check
[warn] either append it to `Global / excludeLintKeys` or call .withRank(KeyRanks.Invisible) on the key
[info] Build skipped: No changes detected in build configuration and class path contents since last build.
[info] Starting process '/home/yossef/zio-schema/zio-schema-macros/native/target/scala-2.13/zio-schema-macros-test' on port '46711'.
[info] Build skipped: No changes detected in build configuration and class path contents since last build.
[info] Starting process '/home/yossef/zio-schema/zio-schema/native/target/scala-2.13/zio-schema-test' on port '35731'.
[warn] multiple main classes detected: run 'show discoveredMainClasses' to see the list
[info] Starting process '/home/yossef/zio-schema/zio-schema/native/target/scala-2.13/zio-schema-test' on port '38189'.
[info] Starting process '/home/yossef/zio-schema/zio-schema/native/target/scala-2.13/zio-schema-test' on port '36325'.
[info] Starting process '/home/yossef/zio-schema/zio-schema/native/target/scala-2.13/zio-schema-test' on port '46173'.
[info] Starting process '/home/yossef/zio-schema/zio-schema/native/target/scala-2.13/zio-schema-test' on port '34157'.
[info] Starting process '/home/yossef/zio-schema/zio-schema/native/target/scala-2.13/zio-schema-test' on port '37995'.
[32m+[0m ValidationSpec
[32m+[0m Compiling Regex
[32m+[0m PhoneNumberValidationSpec
[32m+[0m TimeSpec
  [32m+[0m Optional
  [32m+[0m Contramap
  [32m+[0m Either
  [32m+[0m Greater than
  [32m+[0m compile literal  [32m+[0m Regex phone number validation for Andorra

  [32m+[0m compile oneOf singleton
  [32m+[0m compile between
  [32m+[0m compile oneOf several elements
  [32m+[0m Regex phone number validation for United Arab Emirates
  [32m+[0m Regex phone number validation for Afghanistan
  [32m+[0m Regex phone number validation for Ascension Island
  [32m+[0m Valid formats
  [32m+[0m Equal to
  [32m+[0m MinLength
  [32m+[0m Less than
  [32m+[0m Regex email Validation
  [32m+[0m MaxLength
  [32m+[0m compile *
  [32m+[0m compile ?
  [32m+[0m compile repeat n  [32m+[0m Regex phone number validation for Anguilla
  [32m+[0m Regex phone number validation for Antigua and Barbuda

  [32m+[0m compile repeat n+
  [32m+[0m Regex phone number validation for Albania
  [32m+[0m Regex phone number validation for Armenia
  [32m+[0m compile +
  [32m+[0m compile repeat n to m
  [32m+[0m Regex phone number validation for Angola
  [32m+[0m compile alternative
  [32m+[0m Regex phone number validation for Antarctica
  [32m+[0m Regex phone number validation for Argentina
  [32m+[0m compile sequence
  [32m+[0m compile digit
  [32m+[0m Regex phone number validation for Netherlands Antilles
  [32m+[0m compile letter
  [32m+[0m Invalid formats
  [32m+[0m Regex phone number validation for Austria
  [32m+[0m Regex phone number validation for American Samoa
  [32m+[0m Regex phone number validation for Aland Islands
  [32m+[0m Regex phone number validation for Azerbaijan
  [32m+[0m Regex phone number validation for Aruba
  [32m+[0m Regex phone number validation for Australia
  [32m+[0m Regex phone number validation for Bosnia and Herzegovina
  [32m+[0m Regex phone number validation for Barbados
  [32m+[0m Regex phone number validation for Bangladesh
  [32m+[0m Regex phone number validation for Belgium
  [32m+[0m Regex phone number validation for Burkina Faso
  [32m+[0m Regex phone number validation for Burundi
  [32m+[0m Regex phone number validation for Bulgaria
  [32m+[0m Regex phone number validation for Bahrain
  [32m+[0m Regex phone number validation for Benin
  [32m+[0m Regex phone number validation for Saint-Barthelemy
  [32m+[0m Regex phone number validation for Brunei Darussalam
  [32m+[0m Regex phone number validation for Bermuda
  [32m+[0m Regex phone number validation for Bolivia
  [32m+[0m Regex phone number validation for Brazil
  [32m+[0m Regex phone number validation for Caribbean Netherlands
  [32m+[0m Regex phone number validation for Bahamas
  [32m+[0m Regex phone number validation for Bhutan
  [32m+[0m Regex phone number validation for Belarus
  [32m+[0m Regex phone number validation for Bouvet Island
  [32m+[0m Regex phone number validation for Belize
  [32m+[0m Regex phone number validation for Botswana
  [32m+[0m Regex phone number validation for Cocos (Keeling) Islands
  [32m+[0m Regex phone number validation for Canada
  [32m+[0m Regex phone number validation for Central African Republic
  [32m+[0m Regex phone number validation for Congo, (Kinshasa)
  [32m+[0m Regex phone number validation for Congo (Brazzaville)
  [32m+[0m Regex phone number validation for Switzerland
  [32m+[0m Regex phone number validation for Cook Islands
  [32m+[0m Regex phone number validation for Côte d'Ivoire
  [32m+[0m Regex phone number validation for Chile
  [32m+[0m Regex phone number validation for Cameroon
  [32m+[0m Regex phone number validation for China
  [32m+[0m Regex phone number validation for Cape Verde
  [32m+[0m Regex phone number validation for Costa Rica
[warn] multiple main classes detected: run 'show discoveredMainClasses' to see the list
  [32m+[0m Regex phone number validation for Colombia
  [32m+[0m Regex phone number validation for Cuba
  [32m+[0m Regex phone number validation for Curacao
  [32m+[0m Regex phone number validation for Christmas Island
  [32m+[0m Regex phone number validation for Cyprus
  [32m+[0m Regex phone number validation for Czech Republic
  [32m+[0m Regex phone number validation for Djibouti
  [32m+[0m Regex phone number validation for Germany
  [32m+[0m Regex phone number validation for Denmark
  [32m+[0m Regex phone number validation for Ecuador
  [32m+[0m Regex phone number validation for Dominica
  [32m+[0m Regex phone number validation for Dominican Republic
  [32m+[0m Regex phone number validation for Algeria
  [32m+[0m Regex phone number validation for Estonia
  [32m+[0m Regex phone number validation for Egypt
  [32m+[0m Regex phone number validation for Western Sahara
  [32m+[0m Regex phone number validation for Spain
  [32m+[0m Regex phone number validation for Finland
  [32m+[0m Regex phone number validation for Eritrea
  [32m+[0m Regex phone number validation for Fiji
  [32m+[0m Regex phone number validation for Ethiopia
  [32m+[0m Regex phone number validation for Falkland Islands (Malvinas)
  [32m+[0m Regex phone number validation for Micronesia, Federated States of
  [32m+[0m Regex phone number validation for Faroe Islands
  [32m+[0m Regex phone number validation for United Kingdom
  [32m+[0m Regex phone number validation for Gabon
[info] Build skipped: No changes detected in build configuration and class path contents since last build.
[info] Starting process '/home/yossef/zio-schema/zio-schema-derivation/native/target/scala-2.13/zio-schema-derivation-test' on port '33855'.
  [32m+[0m Regex phone number validation for Georgia
  [32m+[0m Regex phone number validation for Grenada
  [32m+[0m Regex phone number validation for French Guiana
  [32m+[0m Regex phone number validation for France
  [32m+[0m Regex phone number validation for Ghana
  [32m+[0m Regex phone number validation for Gibraltar
  [32m+[0m Regex phone number validation for Guernsey
  [32m+[0m Regex phone number validation for Greenland
  [32m+[0m Regex phone number validation for Guinea
  [32m+[0m Regex phone number validation for Gambia
  [32m+[0m Regex phone number validation for South Sandwich Islands
  [32m+[0m Regex phone number validation for Guadeloupe
  [32m+[0m Regex phone number validation for Greece
  [32m+[0m Regex phone number validation for Equatorial Guinea
  [32m+[0m Regex phone number validation for Guatemala
  [32m+[0m Regex phone number validation for Guyana
  [32m+[0m Regex phone number validation for Guam
  [32m+[0m Regex phone number validation for Guinea-Bissau
  [32m+[0m Regex phone number validation for Hong Kong
  [32m+[0m Regex phone number validation for Honduras
  [32m+[0m Regex phone number validation for Croatia
  [32m+[0m Regex phone number validation for Heard and Mcdonald Islands
  [32m+[0m Regex phone number validation for Haiti
  [32m+[0m Regex phone number validation for Indonesia
  [32m+[0m Regex phone number validation for Hungary
  [32m+[0m Regex phone number validation for Israel
  [32m+[0m Regex phone number validation for Ireland
  [32m+[0m Regex phone number validation for Isle of Man
  [32m+[0m Regex phone number validation for British Indian Ocean Territory
  [32m+[0m Regex phone number validation for Iraq
  [32m+[0m Regex phone number validation for India
  [32m+[0m Regex phone number validation for Iceland
  [32m+[0m Regex phone number validation for Iran
  [32m+[0m Regex phone number validation for Jersey
  [32m+[0m Regex phone number validation for Italy
  [32m+[0m Regex phone number validation for Japan
  [32m+[0m Regex phone number validation for Kyrgyzstan
  [32m+[0m Regex phone number validation for Jordan
  [32m+[0m Regex phone number validation for Jamaica
  [32m+[0m Regex phone number validation for Cambodia
  [32m+[0m Regex phone number validation for Kenya
  [32m+[0m Regex phone number validation for Kiribati
  [32m+[0m Regex phone number validation for Comoros
  [32m+[0m Regex phone number validation for Saint Kitts and Nevis
  [32m+[0m Regex phone number validation for Kuwait
  [32m+[0m Regex phone number validation for North Korea
  [32m+[0m Regex phone number validation for Kazakhstan
  [32m+[0m Regex phone number validation for South Korea
  [32m+[0m Regex phone number validation for Cayman Islands
  [32m+[0m Regex phone number validation for Lao PDR
  [32m+[0m Regex phone number validation for Sri Lanka
  [32m+[0m Regex phone number validation for Saint Lucia
  [32m+[0m Regex phone number validation for Liechtenstein
  [32m+[0m Regex phone number validation for Lebanon
  [32m+[0m Regex phone number validation for Lesotho
  [32m+[0m Regex phone number validation for Liberia
  [32m+[0m Regex phone number validation for Luxembourg
  [32m+[0m Regex phone number validation for Lithuania
[info] Build skipped: No changes detected in build configuration and class path contents since last build.
  [32m+[0m Regex phone number validation for Libya
  [32m+[0m Regex phone number validation for Latvia
  [32m+[0m Regex phone number validation for Morocco
  [32m+[0m Regex phone number validation for Monaco
  [32m+[0m Regex phone number validation for Moldova
[info] Starting process '/home/yossef/zio-schema/zio-schema-zio-test/native/target/scala-2.13/zio-schema-zio-test-test' on port '35851'.
[info] Fast optimizing /home/yossef/zio-schema/zio-schema-xml/js/target/scala-2.13/zio-schema-xml-test-fastopt
  [32m+[0m Regex phone number validation for Saint-Martin (French)
  [32m+[0m Regex phone number validation for Montenegro
  [32m+[0m Regex phone number validation for Madagascar
  [32m+[0m Regex phone number validation for Mali
  [32m+[0m Regex phone number validation for Macedonia
  [32m+[0m Regex phone number validation for Mongolia
  [32m+[0m Regex phone number validation for Marshall Islands
  [32m+[0m Regex phone number validation for Myanmar
  [32m+[0m Regex phone number validation for Macao
  [32m+[0m Regex phone number validation for Mauritania
  [32m+[0m Regex phone number validation for Northern Mariana Islands
  [32m+[0m Regex phone number validation for Martinique
[info] Starting process '/home/yossef/zio-schema/zio-schema-derivation/native/target/scala-2.13/zio-schema-derivation-test' on port '33135'.
  [32m+[0m Regex phone number validation for Maldives
  [32m+[0m Regex phone number validation for Malta
  [32m+[0m Regex phone number validation for Montserrat
  [32m+[0m Regex phone number validation for Mauritius
  [32m+[0m Regex phone number validation for Malawi
  [32m+[0m Regex phone number validation for Mozambique
  [32m+[0m Regex phone number validation for Malaysia
  [32m+[0m Regex phone number validation for Mexico
  [32m+[0m Regex phone number validation for Niger
  [32m+[0m Regex phone number validation for Namibia
  [32m+[0m Regex phone number validation for New Caledonia
  [32m+[0m Regex phone number validation for Norfolk Island
  [32m+[0m Regex phone number validation for Nigeria
  [32m+[0m Regex phone number validation for Nicaragua
  [32m+[0m Regex phone number validation for Norway
  [32m+[0m Regex phone number validation for Nepal
[32m+[0m Derive  [32m+[0m Regex phone number validation for Netherlands

  [32m+[0m Regex phone number validation for New Zealand
  [32m+[0m case object
  [32m+[0m Regex phone number validation for Nauru
  [32m+[0m Regex phone number validation for Niue
  [32m+[0m Regex phone number validation for Oman
  [32m+[0m Regex phone number validation for Peru
  [32m+[0m Regex phone number validation for Panama
  [32m+[0m Regex phone number validation for Papua New Guinea
  [32m+[0m Regex phone number validation for French Polynesia
  [32m+[0m Regex phone number validation for Philippines
  [32m+[0m Regex phone number validation for Pakistan
  [32m+[0m Regex phone number validation for Pitcairn Islands
  [32m+[0m Regex phone number validation for Saint Pierre and Miquelon
  [32m+[0m Regex phone number validation for Puerto Rico
  [32m+[0m Regex phone number validation for Poland
  [32m+[0m Regex phone number validation for Portugal
  [32m+[0m Regex phone number validation for Palestinian Territory
  [32m+[0m Regex phone number validation for Palau
  [32m+[0m Regex phone number validation for Qatar
  [32m+[0m Regex phone number validation for Paraguay
[32m+[0m Schema Validation Spec
  [32m+[0m Regex phone number validation for Russian Federation
  [32m+[0m Regex phone number validation for Serbia
  [32m+[0m Regex phone number validation for Réunion
  [32m+[0m Regex phone number validation for Romania
  [32m+[0m Regex phone number validation for Rwanda
    [32m+[0m should accept a correct email
    [32m+[0m can derive new instance for case object
    [32m+[0m can use existing instance for case object
  [32m+[0m Regex phone number validation for Saudi Arabia
  [32m+[0m Regex phone number validation for Solomon Islands
  [32m+[0m Regex phone number validation for Sudan
  [32m+[0m Regex phone number validation for Sweden
  [32m+[0m Regex phone number validation for Seychelles
  [32m+[0m Regex phone number validation for Slovenia
  [32m+[0m Regex phone number validation for Singapore
  [32m+[0m Invalid CaseClass1 creation
  [32m+[0m Valid CaseClass2 creation
  [32m+[0m Regex phone number validation for Saint Helena
  [32m+[0m Valid CaseClass1 creation
  [32m+[0m Regex phone number validation for Slovakia
  [32m+[0m Scala 2.13 specific tests
  [32m+[0m case class
    [32m+[0m can derive new instance for case class containing sequences
    [32m+[0m can derive new instance for case class referring another one using an existing instance
    [32m+[0m can derive new instance for case class containing a map and an either
    [32m+[0m can derive new instance for simple case class
    [32m+[0m can use existing instance for simple case class
    [32m+[0m works with with arity > 22
  [32m+[0m Regex phone number validation for Sierra Leone
    [32m+[0m can derive new instance for case class containing a set
    [32m+[0m can derive new instance for case class containing a 3-tuple field
  [32m+[0m Example Data, no ValidationErrors
  [32m+[0m Regex phone number validation for San Marino
    [32m+[0m new top level implicit value is not passed as summoned
  [32m+[0m Regex phone number validation for Senegal
  [32m+[0m Regex phone number validation for Svalbard and Jan Mayen Islands
  [32m+[0m caching
    [32m+[0m reuses derived instances
  [32m+[0m enum
    [32m+[0m can derive instance for recursive enum
    [32m+[0m can derive instance for enum
  [32m+[0m support for unknown types
    [32m+[0m can pick up existing instance for unknown type
    [32m+[0m calls deriveUnknown for unknown type
  [32m+[0m default implementation
    [32m+[0m default tupleN implementation creates proper record schema
  [32m+[0m support factory
    [32m+[0m factory
  [32m+[0m default field values
    [32m+[0m use case class default values of generic class
    [32m+[0m use case class default values
    [32m+[0m prefer field annotations over case class default values
  [32m+[0m Regex phone number validation for Sao Tome and Principe
  [32m+[0m Regex phone number validation for Suriname
  [32m+[0m Regex phone number validation for Somalia
  [32m+[0m Example Data, Left ValidationError
  [32m+[0m Invalid CaseClass2 creation
  [32m+[0m Example Data, Right ValidationError
  [32m+[0m Regex phone number validation for South Sudan
  [32m+[0m Regex phone number validation for Syria
  [32m+[0m Example Data, Option value without ValidationError
  [32m+[0m Regex phone number validation for Saint Marten  [32m+[0m Example Data, single element List with ValidationError

  [32m+[0m Regex phone number validation for El Salvador
  [32m+[0m Regex phone number validation for Swaziland
  [32m+[0m Example Data, Option value with ValidationError
  [32m+[0m Example Data, Tuple with ValidationError on first element
  [32m+[0m Example Data, Tuple with ValidationError on second element
  [32m+[0m Regex phone number validation for Tristan da Cunha
  [32m+[0m Regex phone number validation for Turks and Caicos Islands
  [32m+[0m Example Data, Wrapper class wrapping class with ValidationError
  [32m+[0m Regex phone number validation for French Southern Territories
  [32m+[0m Regex phone number validation for Thailand
  [32m+[0m Regex phone number validation for Chad
  [32m+[0m Regex phone number validation for Togo
  [32m+[0m Regex phone number validation for Tajikistan
  [32m+[0m Example Data, multi element List with ValidationError
  [32m+[0m Example Data, second Enum with ValidationError
  [32m+[0m Regex phone number validation for Tokelau
  [32m+[0m Example Data, first Enum with ValidationError
  [32m+[0m Regex phone number validation for Timor-Leste
  [32m+[0m Validator successfully extracts from validation annotation
  [32m+[0m Regex phone number validation for Turkmenistan
[info] Starting process '/home/yossef/zio-schema/zio-schema-derivation/native/target/scala-2.13/zio-schema-derivation-test' on port '43273'.
  [32m+[0m Regex phone number validation for Tonga
  [32m+[0m Regex phone number validation for Turkey
  [32m+[0m Regex phone number validation for Tunisia
  [32m+[0m Regex phone number validation for Trinidad and Tobago
  [32m+[0m Regex phone number validation for Tuvalu
  [32m+[0m Regex phone number validation for Taiwan
  [32m+[0m Regex phone number validation for Tanzania
  [32m+[0m Regex phone number validation for Uganda
  [32m+[0m Regex phone number validation for Uruguay
  [32m+[0m Regex phone number validation for Ukraine
  [32m+[0m Regex phone number validation for Uzbekistan
  [32m+[0m Regex phone number validation for United States of America
[32m+[0m DeriveSchemaSpec
  [32m+[0m Regex phone number validation for Holy See (Vatican City State)
  [32m+[0m Scala 2.13 specific tests
  [32m+[0m Derivation
  [32m+[0m Regex phone number validation for Saint Vincent and Grenadines
  [32m+[0m Regex phone number validation for US Minor Outlying Islands
  [32m+[0m Regex phone number validation for British Virgin Islands
[32m+[0m Record Spec
  [32m+[0m Deconstruct should get the values of a case class' fields
  [32m+[0m Regex phone number validation for Virgin Islands, US
    [32m+[0m CaseClass1
  [32m+[0m Regex phone number validation for Viet Nam
    [32m+[0m CaseClass3
    [32m+[0m CaseClass2
    [32m+[0m correctly derives case class
  [32m+[0m Regex phone number validation for Vanuatu
  [32m+[0m Regex phone number validation for Venezuela
    [32m+[0m correctly derives recursive data structure
    [32m+[0m CaseClass4
    [32m+[0m correctly derives case class with arity > 22  [32m+[0m Regex phone number validation for Wallis and Futuna Islands

    [32m+[0m correctly derives case class 0
    [32m+[0m CaseClass6
    [32m+[0m CaseClass5
  [32m+[0m Regex phone number validation for Samoa
    [32m+[0m CaseClass0
  [32m+[0m Regex phone number validation for Kosovo
  [32m+[0m Regex phone number validation for Yemen
  [32m+[0m Regex phone number validation for South Africa
    [32m+[0m CaseClass7
    [32m+[0m CaseClass8
  [32m+[0m Regex phone number validation for Mayotte
    [32m+[0m CaseClass9
    [32m+[0m CaseClass10
    [32m+[0m correctly derives tuple arities from 2 to 22
  [32m+[0m Regex phone number validation for Zimbabwe
  [32m+[0m Regex phone number validation for Zambia
    [32m+[0m correctly derive mutually recursive data structure
    [32m+[0m correctly derives recursively for case class
    [32m+[0m correctly captures annotations on case class
    [32m+[0m correctly derives for case object
    [32m+[0m correctly derives Enum
    [32m+[0m correctly captures annotations on case class with arity greater than 22
    [32m+[0m correctly capture annotations on Enum and cases
    [32m+[0m correctly derives recursive Enum with type parameters
    [32m+[0m correctly derives mutually recursive case classes
    [32m+[0m should reject an invalid email
  [32m+[0m Regex digit or letter Validation
  [32m+[0m Regex identifier Validation
  [32m+[0m Regex IPv4 Validation
    [32m+[0m should accept a valid IPv4 address
    [32m+[0m should reject an invalid IPv4 address
  [32m+[0m Time Validation HH
  [32m+[0m Time Validation H
  [33m-[0m [33mTime Validation mm[0m - ignored: 1
  [33m-[0m [33mTime Validation m[0m - ignored: 1
  [32m+[0m Time Validation HHmm
  [32m+[0m Time Validation HH:mm
  [32m+[0m Time Validation HH:mm:ss
  [33m-[0m [33mTime Validation HH:mm:ss a[0m - ignored: 1
  [32m+[0m Time Validation H:m:s
  [33m-[0m [33mTime Validation H:m:s a[0m - ignored: 1
  [32m+[0m Time Validation hh:mm:ss
  [33m-[0m [33mTime Validation hh:mm:ss a[0m - ignored: 1
  [32m+[0m Time Validation h:m:s
    [32m+[0m correctly derives recursive Enum with multiple type parameters
  [33m-[0m [33mTime Validation h:m:s a[0m - ignored: 1
  [32m+[0m Time Validation HH:mm:ss S
  [32m+[0m Time Validation HH:mm:ss.SSS
  [33m-[0m [33mTime Validation HH:mm:ss SSSSSSSSS a[0m - ignored: 1
  [32m+[0m Regex uuid Validations
    [32m+[0m invalid UUID
    [32m+[0m valid UUID
  [32m+[0m Generic record should validate object with missing keys
  [32m+[0m Regex IPv6 Validation
    [32m+[0m should reject an invalid IPv6 address
    [32m+[0m should accept a valid IPv6 address
  [32m+[0m Regex duration Validation
    [32m+[0m correctly derives schema with unused type parameters
    [32m+[0m correctly derives generic recursive Enum
    [32m+[0m correctly derives generic recursive Enum with multiple type parameters
    [32m+[0m correctly derives recursive Enum
    [32m+[0m correctly derives optional fields when optional annotation is present
    [32m+[0m correctly derives Enum with > 22 cases
    [32m+[0m CaseClass12
    [32m+[0m correctly derives simpleEnum without annotation
    [32m+[0m CaseClass13
    [32m+[0m CaseClass14
    [32m+[0m correctly derives schema for case classes that use schema
    [32m+[0m CaseClass11
    [32m+[0m correctly derives renaming field when fieldName annotation is present
    [32m+[0m correctly derives simpleEnum with annotation
    [32m+[0m CaseClass15
    [32m+[0m correctly derives schema for abstract sealed class with case class subclasses
    [32m+[0m CaseClass16
    [32m+[0m CaseClass17
    [32m+[0m correctly derives schema for abstract sealed class with intermediate subclasses, having case class leaf classes
    [32m+[0m CaseClass21
    [32m+[0m CaseClass19
    [32m+[0m CaseClass18
    [32m+[0m CaseClass22
    [32m+[0m CaseClass20
[info] Starting process '/home/yossef/zio-schema/zio-schema-zio-test/native/target/scala-2.13/zio-schema-zio-test-test' on port '36189'.
[32m+[0m Compiling Regex
[32m+[0m TimeSpec
  [32m+[0m compile between
  [32m+[0m compile oneOf several elements
  [32m+[0m compile literal
  [32m+[0m compile oneOf singleton
  [32m+[0m compile +
  [32m+[0m compile *
  [32m+[0m compile ?
[error] Referring to non-existent method java.lang.reflect.Field.get(java.lang.Object)java.lang.Object
  [32m+[0m compile repeat n
[error]   dispatched from java.lang.reflect.Field.get(java.lang.Object)java.lang.Object
[error]   called from private zio.schema.codec.XmlCodec$.encodeRecord(zio.schema.Schema$Record,java.lang.Object,java.lang.String,zio.schema.codec.XmlCodec$Configuration)scala.xml.Elem
[error]   called from zio.schema.codec.XmlCodec$.zio$schema$codec$XmlCodec$$encodeXml(zio.schema.Schema,java.lang.Object,java.lang.String,zio.schema.codec.XmlCodec$Configuration)scala.xml.Elem
[error]   called from zio.schema.codec.XmlCodec$$anon$1.streamEncoder()zio.stream.ZPipeline
[error]   dispatched from zio.schema.codec.BinaryCodec.streamEncoder()zio.stream.ZPipeline
[error]   called from zio.schema.codec.XmlCodecSpec$.spec()zio.test.Spec
[error]   dispatched from zio.test.ZIOSpecAbstract.spec()zio.test.Spec
[error]   called from zio.test.sbt.ZTestTask.execute(sbt.testing.EventHandler,[sbt.testing.Logger,scala.Function1)void
[error]   dispatched from sbt.testing.Task.execute(sbt.testing.EventHandler,[sbt.testing.Logger,scala.Function1)void
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.scheduleTask(sbt.testing.Task,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private static org.scalajs.testing.bridge.HTMLRunner$.runAllTasks$1(scala.collection.Seq,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.runTests(sbt.testing.Framework,scala.collection.immutable.Seq,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.onLoad(org.scalajs.testing.common.IsolatedTestSet)void
[error]   called from org.scalajs.testing.bridge.HTMLRunner$.start(org.scalajs.testing.common.IsolatedTestSet)void
[error]   called from org.scalajs.testing.bridge.Bridge$.start()void
[error]   called from static org.scalajs.testing.bridge.Bridge.start()void
[error]   called from core module module initializers
[error] involving instantiated classes:
[error]   zio.schema.codec.XmlCodec$
[error]   zio.schema.codec.XmlCodec$$anon$1
[error]   zio.schema.codec.XmlCodecSpec$
[error]   zio.test.sbt.ZTestTask
[error]   org.scalajs.testing.bridge.HTMLRunner$
[error]   org.scalajs.testing.bridge.Bridge$
[error] Referring to non-existent method java.lang.reflect.Field.setAccessible(boolean)void
[error]   dispatched from java.lang.reflect.Field.setAccessible(boolean)void
[error]   called from private zio.schema.codec.XmlCodec$.encodeRecord(zio.schema.Schema$Record,java.lang.Object,java.lang.String,zio.schema.codec.XmlCodec$Configuration)scala.xml.Elem
[error]   called from zio.schema.codec.XmlCodec$.zio$schema$codec$XmlCodec$$encodeXml(zio.schema.Schema,java.lang.Object,java.lang.String,zio.schema.codec.XmlCodec$Configuration)scala.xml.Elem
[error]   called from zio.schema.codec.XmlCodec$$anon$1.streamEncoder()zio.stream.ZPipeline
[error]   dispatched from zio.schema.codec.BinaryCodec.streamEncoder()zio.stream.ZPipeline
[error]   called from zio.schema.codec.XmlCodecSpec$.spec()zio.test.Spec
[error]   dispatched from zio.test.ZIOSpecAbstract.spec()zio.test.Spec
[error]   called from zio.test.sbt.ZTestTask.execute(sbt.testing.EventHandler,[sbt.testing.Logger,scala.Function1)void
[error]   dispatched from sbt.testing.Task.execute(sbt.testing.EventHandler,[sbt.testing.Logger,scala.Function1)void
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.scheduleTask(sbt.testing.Task,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private static org.scalajs.testing.bridge.HTMLRunner$.runAllTasks$1(scala.collection.Seq,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.runTests(sbt.testing.Framework,scala.collection.immutable.Seq,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.onLoad(org.scalajs.testing.common.IsolatedTestSet)void
[error]   called from org.scalajs.testing.bridge.HTMLRunner$.start(org.scalajs.testing.common.IsolatedTestSet)void
[error]   called from org.scalajs.testing.bridge.Bridge$.start()void
[error]   called from static org.scalajs.testing.bridge.Bridge.start()void
[error]   called from core module module initializers
[error] involving instantiated classes:
[error]   zio.schema.codec.XmlCodec$
[error]   zio.schema.codec.XmlCodec$$anon$1
[error]   zio.schema.codec.XmlCodecSpec$
[error]   zio.test.sbt.ZTestTask
[error]   org.scalajs.testing.bridge.HTMLRunner$
[error]   org.scalajs.testing.bridge.Bridge$
[error] Referring to non-existent class java.lang.reflect.Field
[error]   called from private zio.schema.codec.XmlCodec$.encodeRecord(zio.schema.Schema$Record,java.lang.Object,java.lang.String,zio.schema.codec.XmlCodec$Configuration)scala.xml.Elem
[error]   called from zio.schema.codec.XmlCodec$.zio$schema$codec$XmlCodec$$encodeXml(zio.schema.Schema,java.lang.Object,java.lang.String,zio.schema.codec.XmlCodec$Configuration)scala.xml.Elem
[error]   called from zio.schema.codec.XmlCodec$$anon$1.streamEncoder()zio.stream.ZPipeline
[error]   dispatched from zio.schema.codec.BinaryCodec.streamEncoder()zio.stream.ZPipeline
[error]   called from zio.schema.codec.XmlCodecSpec$.spec()zio.test.Spec
[error]   dispatched from zio.test.ZIOSpecAbstract.spec()zio.test.Spec
[error]   called from zio.test.sbt.ZTestTask.execute(sbt.testing.EventHandler,[sbt.testing.Logger,scala.Function1)void
[error]   dispatched from sbt.testing.Task.execute(sbt.testing.EventHandler,[sbt.testing.Logger,scala.Function1)void
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.scheduleTask(sbt.testing.Task,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private static org.scalajs.testing.bridge.HTMLRunner$.runAllTasks$1(scala.collection.Seq,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.runTests(sbt.testing.Framework,scala.collection.immutable.Seq,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.onLoad(org.scalajs.testing.common.IsolatedTestSet)void
[error]   called from org.scalajs.testing.bridge.HTMLRunner$.start(org.scalajs.testing.common.IsolatedTestSet)void
[error]   called from org.scalajs.testing.bridge.Bridge$.start()void
[error]   called from static org.scalajs.testing.bridge.Bridge.start()void
[error]   called from core module module initializers
[error] involving instantiated classes:
[error]   zio.schema.codec.XmlCodec$
[error]   zio.schema.codec.XmlCodec$$anon$1
[error]   zio.schema.codec.XmlCodecSpec$
[error]   zio.test.sbt.ZTestTask
[error]   org.scalajs.testing.bridge.HTMLRunner$
[error]   org.scalajs.testing.bridge.Bridge$
[error] Referring to non-existent method java.lang.Class.getDeclaredField(java.lang.String)java.lang.reflect.Field
[error]   dispatched from java.lang.Class.getDeclaredField(java.lang.String)java.lang.reflect.Field
[error]   called from private zio.schema.codec.XmlCodec$.encodeRecord(zio.schema.Schema$Record,java.lang.Object,java.lang.String,zio.schema.codec.XmlCodec$Configuration)scala.xml.Elem
[error]   called from zio.schema.codec.XmlCodec$.zio$schema$codec$XmlCodec$$encodeXml(zio.schema.Schema,java.lang.Object,java.lang.String,zio.schema.codec.XmlCodec$Configuration)scala.xml.Elem
[error]   called from zio.schema.codec.XmlCodec$$anon$1.streamEncoder()zio.stream.ZPipeline
[error]   dispatched from zio.schema.codec.BinaryCodec.streamEncoder()zio.stream.ZPipeline
[error]   called from zio.schema.codec.XmlCodecSpec$.spec()zio.test.Spec
[error]   dispatched from zio.test.ZIOSpecAbstract.spec()zio.test.Spec
[error]   called from zio.test.sbt.ZTestTask.execute(sbt.testing.EventHandler,[sbt.testing.Logger,scala.Function1)void
[error]   dispatched from sbt.testing.Task.execute(sbt.testing.EventHandler,[sbt.testing.Logger,scala.Function1)void
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.scheduleTask(sbt.testing.Task,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private static org.scalajs.testing.bridge.HTMLRunner$.runAllTasks$1(scala.collection.Seq,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.runTests(sbt.testing.Framework,scala.collection.immutable.Seq,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.onLoad(org.scalajs.testing.common.IsolatedTestSet)void
[error]   called from org.scalajs.testing.bridge.HTMLRunner$.start(org.scalajs.testing.common.IsolatedTestSet)void
[error]   called from org.scalajs.testing.bridge.Bridge$.start()void
[error]   called from static org.scalajs.testing.bridge.Bridge.start()void
[error]   called from core module module initializers
[error] involving instantiated classes:
[error]   zio.schema.codec.XmlCodec$
[error]   zio.schema.codec.XmlCodec$$anon$1
[error]   zio.schema.codec.XmlCodecSpec$
[error]   zio.test.sbt.ZTestTask
[error]   org.scalajs.testing.bridge.HTMLRunner$
[error]   org.scalajs.testing.bridge.Bridge$
[error] Referring to non-existent class org.xml.sax.EntityResolver
[error]   called from scala.xml.parsing.FactoryAdapter.loadDocument(org.xml.sax.InputSource,org.xml.sax.XMLReader)scala.xml.Document
[error]   called from scala.xml.factory.XMLLoader.loadDocument(org.xml.sax.InputSource)scala.xml.Document
[error]   called from scala.xml.factory.XMLLoader.loadStringDocument(java.lang.String)scala.xml.Document
[error]   called from scala.xml.factory.XMLLoader.loadString(java.lang.String)scala.xml.Node
[error]   called from scala.xml.XML$.loadString(java.lang.String)scala.xml.Node
[error]   called from zio.schema.codec.XmlCodecSpec$.spec()zio.test.Spec
[error]   dispatched from zio.test.ZIOSpecAbstract.spec()zio.test.Spec
[error]   called from zio.test.sbt.ZTestTask.execute(sbt.testing.EventHandler,[sbt.testing.Logger,scala.Function1)void
[error]   dispatched from sbt.testing.Task.execute(sbt.testing.EventHandler,[sbt.testing.Logger,scala.Function1)void
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.scheduleTask(sbt.testing.Task,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private static org.scalajs.testing.bridge.HTMLRunner$.runAllTasks$1(scala.collection.Seq,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.runTests(sbt.testing.Framework,scala.collection.immutable.Seq,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.onLoad(org.scalajs.testing.common.IsolatedTestSet)void
[error]   called from org.scalajs.testing.bridge.HTMLRunner$.start(org.scalajs.testing.common.IsolatedTestSet)void
[error]   called from org.scalajs.testing.bridge.Bridge$.start()void
[error]   called from static org.scalajs.testing.bridge.Bridge.start()void
[error]   called from core module module initializers
[error] involving instantiated classes:
[error]   scala.xml.parsing.NoBindingFactoryAdapter
[error]   scala.xml.XML$
[error]   zio.schema.codec.XmlCodecSpec$
[error]   zio.test.sbt.ZTestTask
[error]   org.scalajs.testing.bridge.HTMLRunner$
  [32m+[0m compile repeat n to m
[error]   org.scalajs.testing.bridge.Bridge$
[error] Referring to non-existent class org.xml.sax.ErrorHandler
[error]   called from scala.xml.parsing.FactoryAdapter.loadDocument(org.xml.sax.InputSource,org.xml.sax.XMLReader)scala.xml.Document
[error]   called from scala.xml.factory.XMLLoader.loadDocument(org.xml.sax.InputSource)scala.xml.Document
[error]   called from scala.xml.factory.XMLLoader.loadStringDocument(java.lang.String)scala.xml.Document
[error]   called from scala.xml.factory.XMLLoader.loadString(java.lang.String)scala.xml.Node
[error]   called from scala.xml.XML$.loadString(java.lang.String)scala.xml.Node
[error]   called from zio.schema.codec.XmlCodecSpec$.spec()zio.test.Spec
[error]   dispatched from zio.test.ZIOSpecAbstract.spec()zio.test.Spec
[error]   called from zio.test.sbt.ZTestTask.execute(sbt.testing.EventHandler,[sbt.testing.Logger,scala.Function1)void
[error]   dispatched from sbt.testing.Task.execute(sbt.testing.EventHandler,[sbt.testing.Logger,scala.Function1)void
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.scheduleTask(sbt.testing.Task,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private static org.scalajs.testing.bridge.HTMLRunner$.runAllTasks$1(scala.collection.Seq,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.runTests(sbt.testing.Framework,scala.collection.immutable.Seq,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.onLoad(org.scalajs.testing.common.IsolatedTestSet)void
[error]   called from org.scalajs.testing.bridge.HTMLRunner$.start(org.scalajs.testing.common.IsolatedTestSet)void
[error]   called from org.scalajs.testing.bridge.Bridge$.start()void
[error]   called from static org.scalajs.testing.bridge.Bridge.start()void
[error]   called from core module module initializers
[error] involving instantiated classes:
[error]   scala.xml.parsing.NoBindingFactoryAdapter
[error]   scala.xml.XML$
[error]   zio.schema.codec.XmlCodecSpec$
[error]   zio.test.sbt.ZTestTask
[error]   org.scalajs.testing.bridge.HTMLRunner$
[error]   org.scalajs.testing.bridge.Bridge$
[error] Referring to non-existent class org.xml.sax.SAXNotSupportedException
[error]   called from scala.xml.parsing.FactoryAdapter.loadDocument(org.xml.sax.InputSource,org.xml.sax.XMLReader)scala.xml.Document
[error]   called from scala.xml.factory.XMLLoader.loadDocument(org.xml.sax.InputSource)scala.xml.Document
[error]   called from scala.xml.factory.XMLLoader.loadStringDocument(java.lang.String)scala.xml.Document
[error]   called from scala.xml.factory.XMLLoader.loadString(java.lang.String)scala.xml.Node
[error]   called from scala.xml.XML$.loadString(java.lang.String)scala.xml.Node
[error]   called from zio.schema.codec.XmlCodecSpec$.spec()zio.test.Spec
[error]   dispatched from zio.test.ZIOSpecAbstract.spec()zio.test.Spec
[error]   called from zio.test.sbt.ZTestTask.execute(sbt.testing.EventHandler,[sbt.testing.Logger,scala.Function1)void
[error]   dispatched from sbt.testing.Task.execute(sbt.testing.EventHandler,[sbt.testing.Logger,scala.Function1)void
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.scheduleTask(sbt.testing.Task,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private static org.scalajs.testing.bridge.HTMLRunner$.runAllTasks$1(scala.collection.Seq,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.runTests(sbt.testing.Framework,scala.collection.immutable.Seq,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.onLoad(org.scalajs.testing.common.IsolatedTestSet)void
[error]   called from org.scalajs.testing.bridge.HTMLRunner$.start(org.scalajs.testing.common.IsolatedTestSet)void
[error]   called from org.scalajs.testing.bridge.Bridge$.start()void
[error]   called from static org.scalajs.testing.bridge.Bridge.start()void
[error]   called from core module module initializers
[error] involving instantiated classes:
[error]   scala.xml.parsing.NoBindingFactoryAdapter
[error]   scala.xml.XML$
[error]   zio.schema.codec.XmlCodecSpec$
[error]   zio.test.sbt.ZTestTask
[error]   org.scalajs.testing.bridge.HTMLRunner$
[error]   org.scalajs.testing.bridge.Bridge$
[error] Referring to non-existent class org.xml.sax.SAXNotRecognizedException
[error]   called from scala.xml.parsing.FactoryAdapter.loadDocument(org.xml.sax.InputSource,org.xml.sax.XMLReader)scala.xml.Document
[error]   called from scala.xml.factory.XMLLoader.loadDocument(org.xml.sax.InputSource)scala.xml.Document
[error]   called from scala.xml.factory.XMLLoader.loadStringDocument(java.lang.String)scala.xml.Document
[error]   called from scala.xml.factory.XMLLoader.loadString(java.lang.String)scala.xml.Node
[error]   called from scala.xml.XML$.loadString(java.lang.String)scala.xml.Node
[error]   called from zio.schema.codec.XmlCodecSpec$.spec()zio.test.Spec
[error]   dispatched from zio.test.ZIOSpecAbstract.spec()zio.test.Spec
[error]   called from zio.test.sbt.ZTestTask.execute(sbt.testing.EventHandler,[sbt.testing.Logger,scala.Function1)void
[error]   dispatched from sbt.testing.Task.execute(sbt.testing.EventHandler,[sbt.testing.Logger,scala.Function1)void
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.scheduleTask(sbt.testing.Task,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private static org.scalajs.testing.bridge.HTMLRunner$.runAllTasks$1(scala.collection.Seq,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.runTests(sbt.testing.Framework,scala.collection.immutable.Seq,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.onLoad(org.scalajs.testing.common.IsolatedTestSet)void
[error]   called from org.scalajs.testing.bridge.HTMLRunner$.start(org.scalajs.testing.common.IsolatedTestSet)void
[error]   called from org.scalajs.testing.bridge.Bridge$.start()void
[error]   called from static org.scalajs.testing.bridge.Bridge.start()void
[error]   called from core module module initializers
[error] involving instantiated classes:
[error]   scala.xml.parsing.NoBindingFactoryAdapter
[error]   scala.xml.XML$
[error]   zio.schema.codec.XmlCodecSpec$
[error]   zio.test.sbt.ZTestTask
[error]   org.scalajs.testing.bridge.HTMLRunner$
[error]   org.scalajs.testing.bridge.Bridge$
[error] Referring to non-existent class org.xml.sax.ext.DefaultHandler2
[error]   called from constructor scala.xml.parsing.FactoryAdapter.<init>()void
[error]   called from constructor scala.xml.parsing.NoBindingFactoryAdapter.<init>()void
[error]   called from scala.xml.factory.XMLLoader.adapter()scala.xml.parsing.FactoryAdapter
[error]   called from scala.xml.factory.XMLLoader.loadDocument(org.xml.sax.InputSource)scala.xml.Document
[error]   called from scala.xml.factory.XMLLoader.loadStringDocument(java.lang.String)scala.xml.Document
[error]   called from scala.xml.factory.XMLLoader.loadString(java.lang.String)scala.xml.Node
[error]   called from scala.xml.XML$.loadString(java.lang.String)scala.xml.Node
[error]   called from zio.schema.codec.XmlCodecSpec$.spec()zio.test.Spec
[error]   dispatched from zio.test.ZIOSpecAbstract.spec()zio.test.Spec
[error]   called from zio.test.sbt.ZTestTask.execute(sbt.testing.EventHandler,[sbt.testing.Logger,scala.Function1)void
[error]   dispatched from sbt.testing.Task.execute(sbt.testing.EventHandler,[sbt.testing.Logger,scala.Function1)void
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.scheduleTask(sbt.testing.Task,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private static org.scalajs.testing.bridge.HTMLRunner$.runAllTasks$1(scala.collection.Seq,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.runTests(sbt.testing.Framework,scala.collection.immutable.Seq,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.onLoad(org.scalajs.testing.common.IsolatedTestSet)void
[error]   called from org.scalajs.testing.bridge.HTMLRunner$.start(org.scalajs.testing.common.IsolatedTestSet)void
[error]   called from org.scalajs.testing.bridge.Bridge$.start()void
[error]   called from static org.scalajs.testing.bridge.Bridge.start()void
[error]   called from core module module initializers
[error] involving instantiated classes:
[error]   scala.xml.XML$
[error]   zio.schema.codec.XmlCodecSpec$
[error]   zio.test.sbt.ZTestTask
[error]   org.scalajs.testing.bridge.HTMLRunner$
[error]   org.scalajs.testing.bridge.Bridge$
[error] Referring to non-existent class org.xml.sax.InputSource
[error]   called from scala.xml.parsing.FactoryAdapter.loadDocument(org.xml.sax.InputSource)scala.xml.Document
[error]   dispatched from scala.xml.factory.XMLLoader.loadDocument(org.xml.sax.InputSource)scala.xml.Document
[error]   called from scala.xml.factory.XMLLoader.loadStringDocument(java.lang.String)scala.xml.Document
[error]   called from scala.xml.factory.XMLLoader.loadString(java.lang.String)scala.xml.Node
[error]   called from scala.xml.XML$.loadString(java.lang.String)scala.xml.Node
[error]   called from zio.schema.codec.XmlCodecSpec$.spec()zio.test.Spec
[error]   dispatched from zio.test.ZIOSpecAbstract.spec()zio.test.Spec
[error]   called from zio.test.sbt.ZTestTask.execute(sbt.testing.EventHandler,[sbt.testing.Logger,scala.Function1)void
[error]   dispatched from sbt.testing.Task.execute(sbt.testing.EventHandler,[sbt.testing.Logger,scala.Function1)void
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.scheduleTask(sbt.testing.Task,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private static org.scalajs.testing.bridge.HTMLRunner$.runAllTasks$1(scala.collection.Seq,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.runTests(sbt.testing.Framework,scala.collection.immutable.Seq,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.onLoad(org.scalajs.testing.common.IsolatedTestSet)void
[error]   called from org.scalajs.testing.bridge.HTMLRunner$.start(org.scalajs.testing.common.IsolatedTestSet)void
[error]   called from org.scalajs.testing.bridge.Bridge$.start()void
[error]   called from static org.scalajs.testing.bridge.Bridge.start()void
[error]   called from core module module initializers
[error] involving instantiated classes:
[error]   scala.xml.parsing.NoBindingFactoryAdapter
[error]   scala.xml.XML$
[error]   zio.schema.codec.XmlCodecSpec$
[error]   zio.test.sbt.ZTestTask
[error]   org.scalajs.testing.bridge.HTMLRunner$
[error]   org.scalajs.testing.bridge.Bridge$
[error] Referring to non-existent class org.xml.sax.XMLReader
[error]   called from scala.xml.parsing.FactoryAdapter.reader()org.xml.sax.XMLReader
[error]   dispatched from scala.xml.factory.XMLLoader.reader()org.xml.sax.XMLReader
[error]   called from scala.xml.factory.XMLLoader.loadDocument(org.xml.sax.InputSource)scala.xml.Document
[error]   called from scala.xml.factory.XMLLoader.loadStringDocument(java.lang.String)scala.xml.Document
[error]   called from scala.xml.factory.XMLLoader.loadString(java.lang.String)scala.xml.Node
[error]   called from scala.xml.XML$.loadString(java.lang.String)scala.xml.Node
[error]   called from zio.schema.codec.XmlCodecSpec$.spec()zio.test.Spec
[error]   dispatched from zio.test.ZIOSpecAbstract.spec()zio.test.Spec
[error]   called from zio.test.sbt.ZTestTask.execute(sbt.testing.EventHandler,[sbt.testing.Logger,scala.Function1)void
[error]   dispatched from sbt.testing.Task.execute(sbt.testing.EventHandler,[sbt.testing.Logger,scala.Function1)void
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.scheduleTask(sbt.testing.Task,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private static org.scalajs.testing.bridge.HTMLRunner$.runAllTasks$1(scala.collection.Seq,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.runTests(sbt.testing.Framework,scala.collection.immutable.Seq,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.onLoad(org.scalajs.testing.common.IsolatedTestSet)void
[error]   called from org.scalajs.testing.bridge.HTMLRunner$.start(org.scalajs.testing.common.IsolatedTestSet)void
[error]   called from org.scalajs.testing.bridge.Bridge$.start()void
[error]   called from static org.scalajs.testing.bridge.Bridge.start()void
[error]   called from core module module initializers
[error] involving instantiated classes:
[error]   scala.xml.parsing.NoBindingFactoryAdapter
[error]   scala.xml.XML$
[error]   zio.schema.codec.XmlCodecSpec$
  [32m+[0m compile letter
[error]   zio.test.sbt.ZTestTask
[error]   org.scalajs.testing.bridge.HTMLRunner$
[error]   org.scalajs.testing.bridge.Bridge$
[error] Referring to non-existent class javax.xml.parsers.SAXParser
[error]   called from scala.xml.parsing.FactoryAdapter.parser()javax.xml.parsers.SAXParser
[error]   dispatched from scala.xml.factory.XMLLoader.parser()javax.xml.parsers.SAXParser
[error]   called from scala.xml.factory.XMLLoader.reader()org.xml.sax.XMLReader
[error]   called from scala.xml.factory.XMLLoader.loadDocument(org.xml.sax.InputSource)scala.xml.Document
[error]   called from scala.xml.factory.XMLLoader.loadStringDocument(java.lang.String)scala.xml.Document
[error]   called from scala.xml.factory.XMLLoader.loadString(java.lang.String)scala.xml.Node
[error]   called from scala.xml.XML$.loadString(java.lang.String)scala.xml.Node
[error]   called from zio.schema.codec.XmlCodecSpec$.spec()zio.test.Spec
[error]   dispatched from zio.test.ZIOSpecAbstract.spec()zio.test.Spec
[error]   called from zio.test.sbt.ZTestTask.execute(sbt.testing.EventHandler,[sbt.testing.Logger,scala.Function1)void
[error]   dispatched from sbt.testing.Task.execute(sbt.testing.EventHandler,[sbt.testing.Logger,scala.Function1)void
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.scheduleTask(sbt.testing.Task,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private static org.scalajs.testing.bridge.HTMLRunner$.runAllTasks$1(scala.collection.Seq,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.runTests(sbt.testing.Framework,scala.collection.immutable.Seq,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.onLoad(org.scalajs.testing.common.IsolatedTestSet)void
[error]   called from org.scalajs.testing.bridge.HTMLRunner$.start(org.scalajs.testing.common.IsolatedTestSet)void
[error]   called from org.scalajs.testing.bridge.Bridge$.start()void
[error]   called from static org.scalajs.testing.bridge.Bridge.start()void
[error]   called from core module module initializers
[error] involving instantiated classes:
[error]   scala.xml.parsing.NoBindingFactoryAdapter
[error]   scala.xml.XML$
[error]   zio.schema.codec.XmlCodecSpec$
[error]   zio.test.sbt.ZTestTask
[error]   org.scalajs.testing.bridge.HTMLRunner$
[error]   org.scalajs.testing.bridge.Bridge$
[error] Referring to non-existent class org.xml.sax.InputSource
[error]   called from scala.xml.parsing.FactoryAdapter.loadDocument(org.xml.sax.InputSource,org.xml.sax.XMLReader)scala.xml.Document
[error]   called from scala.xml.factory.XMLLoader.loadDocument(org.xml.sax.InputSource)scala.xml.Document
[error]   called from scala.xml.factory.XMLLoader.loadStringDocument(java.lang.String)scala.xml.Document
[error]   called from scala.xml.factory.XMLLoader.loadString(java.lang.String)scala.xml.Node
[error]   called from scala.xml.XML$.loadString(java.lang.String)scala.xml.Node
[error]   called from zio.schema.codec.XmlCodecSpec$.spec()zio.test.Spec
[error]   dispatched from zio.test.ZIOSpecAbstract.spec()zio.test.Spec
[error]   called from zio.test.sbt.ZTestTask.execute(sbt.testing.EventHandler,[sbt.testing.Logger,scala.Function1)void
[error]   dispatched from sbt.testing.Task.execute(sbt.testing.EventHandler,[sbt.testing.Logger,scala.Function1)void
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.scheduleTask(sbt.testing.Task,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private static org.scalajs.testing.bridge.HTMLRunner$.runAllTasks$1(scala.collection.Seq,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.runTests(sbt.testing.Framework,scala.collection.immutable.Seq,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.onLoad(org.scalajs.testing.common.IsolatedTestSet)void
[error]   called from org.scalajs.testing.bridge.HTMLRunner$.start(org.scalajs.testing.common.IsolatedTestSet)void
[error]   called from org.scalajs.testing.bridge.Bridge$.start()void
[error]   called from static org.scalajs.testing.bridge.Bridge.start()void
[error]   called from core module module initializers
[error] involving instantiated classes:
[error]   scala.xml.parsing.NoBindingFactoryAdapter
[error]   scala.xml.XML$
[error]   zio.schema.codec.XmlCodecSpec$
[error]   zio.test.sbt.ZTestTask
  [32m+[0m compile repeat n+
[error]   org.scalajs.testing.bridge.HTMLRunner$
[error]   org.scalajs.testing.bridge.Bridge$
[error] Referring to non-existent method org.xml.sax.XMLReader.setErrorHandler(org.xml.sax.ErrorHandler)void
[error]   dispatched from org.xml.sax.XMLReader.setErrorHandler(org.xml.sax.ErrorHandler)void
[error]   called from scala.xml.parsing.FactoryAdapter.loadDocument(org.xml.sax.InputSource,org.xml.sax.XMLReader)scala.xml.Document
[error]   called from scala.xml.factory.XMLLoader.loadDocument(org.xml.sax.InputSource)scala.xml.Document
[error]   called from scala.xml.factory.XMLLoader.loadStringDocument(java.lang.String)scala.xml.Document
[error]   called from scala.xml.factory.XMLLoader.loadString(java.lang.String)scala.xml.Node
[error]   called from scala.xml.XML$.loadString(java.lang.String)scala.xml.Node
[error]   called from zio.schema.codec.XmlCodecSpec$.spec()zio.test.Spec
[error]   dispatched from zio.test.ZIOSpecAbstract.spec()zio.test.Spec
[error]   called from zio.test.sbt.ZTestTask.execute(sbt.testing.EventHandler,[sbt.testing.Logger,scala.Function1)void
[error]   dispatched from sbt.testing.Task.execute(sbt.testing.EventHandler,[sbt.testing.Logger,scala.Function1)void
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.scheduleTask(sbt.testing.Task,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private static org.scalajs.testing.bridge.HTMLRunner$.runAllTasks$1(scala.collection.Seq,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.runTests(sbt.testing.Framework,scala.collection.immutable.Seq,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.onLoad(org.scalajs.testing.common.IsolatedTestSet)void
[error]   called from org.scalajs.testing.bridge.HTMLRunner$.start(org.scalajs.testing.common.IsolatedTestSet)void
[error]   called from org.scalajs.testing.bridge.Bridge$.start()void
[error]   called from static org.scalajs.testing.bridge.Bridge.start()void
[error]   called from core module module initializers
[error] involving instantiated classes:
[error]   scala.xml.parsing.NoBindingFactoryAdapter
[error]   scala.xml.XML$
[error]   zio.schema.codec.XmlCodecSpec$
[error]   zio.test.sbt.ZTestTask
[error]   org.scalajs.testing.bridge.HTMLRunner$
[error]   org.scalajs.testing.bridge.Bridge$
[error] Referring to non-existent method org.xml.sax.XMLReader.setDTDHandler(org.xml.sax.DTDHandler)void
[error]   dispatched from org.xml.sax.XMLReader.setDTDHandler(org.xml.sax.DTDHandler)void
[error]   called from scala.xml.parsing.FactoryAdapter.loadDocument(org.xml.sax.InputSource,org.xml.sax.XMLReader)scala.xml.Document
[error]   called from scala.xml.factory.XMLLoader.loadDocument(org.xml.sax.InputSource)scala.xml.Document
[error]   called from scala.xml.factory.XMLLoader.loadStringDocument(java.lang.String)scala.xml.Document
[error]   called from scala.xml.factory.XMLLoader.loadString(java.lang.String)scala.xml.Node
[error]   called from scala.xml.XML$.loadString(java.lang.String)scala.xml.Node
[error]   called from zio.schema.codec.XmlCodecSpec$.spec()zio.test.Spec
[error]   dispatched from zio.test.ZIOSpecAbstract.spec()zio.test.Spec
[error]   called from zio.test.sbt.ZTestTask.execute(sbt.testing.EventHandler,[sbt.testing.Logger,scala.Function1)void
[error]   dispatched from sbt.testing.Task.execute(sbt.testing.EventHandler,[sbt.testing.Logger,scala.Function1)void
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.scheduleTask(sbt.testing.Task,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private static org.scalajs.testing.bridge.HTMLRunner$.runAllTasks$1(scala.collection.Seq,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.runTests(sbt.testing.Framework,scala.collection.immutable.Seq,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.onLoad(org.scalajs.testing.common.IsolatedTestSet)void
[error]   called from org.scalajs.testing.bridge.HTMLRunner$.start(org.scalajs.testing.common.IsolatedTestSet)void
[error]   called from org.scalajs.testing.bridge.Bridge$.start()void
[error]   called from static org.scalajs.testing.bridge.Bridge.start()void
[error]   called from core module module initializers
[error] involving instantiated classes:
[error]   scala.xml.parsing.NoBindingFactoryAdapter
[error]   scala.xml.XML$
[error]   zio.schema.codec.XmlCodecSpec$
[error]   zio.test.sbt.ZTestTask
[error]   org.scalajs.testing.bridge.HTMLRunner$
[error]   org.scalajs.testing.bridge.Bridge$
[error] Referring to non-existent method org.xml.sax.XMLReader.setContentHandler(org.xml.sax.ContentHandler)void
[error]   dispatched from org.xml.sax.XMLReader.setContentHandler(org.xml.sax.ContentHandler)void
[error]   called from scala.xml.parsing.FactoryAdapter.loadDocument(org.xml.sax.InputSource,org.xml.sax.XMLReader)scala.xml.Document
[error]   called from scala.xml.factory.XMLLoader.loadDocument(org.xml.sax.InputSource)scala.xml.Document
[error]   called from scala.xml.factory.XMLLoader.loadStringDocument(java.lang.String)scala.xml.Document
[error]   called from scala.xml.factory.XMLLoader.loadString(java.lang.String)scala.xml.Node
[error]   called from scala.xml.XML$.loadString(java.lang.String)scala.xml.Node
[error]   called from zio.schema.codec.XmlCodecSpec$.spec()zio.test.Spec
[error]   dispatched from zio.test.ZIOSpecAbstract.spec()zio.test.Spec
[error]   called from zio.test.sbt.ZTestTask.execute(sbt.testing.EventHandler,[sbt.testing.Logger,scala.Function1)void
[error]   dispatched from sbt.testing.Task.execute(sbt.testing.EventHandler,[sbt.testing.Logger,scala.Function1)void
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.scheduleTask(sbt.testing.Task,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private static org.scalajs.testing.bridge.HTMLRunner$.runAllTasks$1(scala.collection.Seq,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.runTests(sbt.testing.Framework,scala.collection.immutable.Seq,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.onLoad(org.scalajs.testing.common.IsolatedTestSet)void
[error]   called from org.scalajs.testing.bridge.HTMLRunner$.start(org.scalajs.testing.common.IsolatedTestSet)void
[error]   called from org.scalajs.testing.bridge.Bridge$.start()void
[error]   called from static org.scalajs.testing.bridge.Bridge.start()void
[error]   called from core module module initializers
[error] involving instantiated classes:
[error]   scala.xml.parsing.NoBindingFactoryAdapter
[error]   scala.xml.XML$
[error]   zio.schema.codec.XmlCodecSpec$
[error]   zio.test.sbt.ZTestTask
[error]   org.scalajs.testing.bridge.HTMLRunner$
[error]   org.scalajs.testing.bridge.Bridge$
[error] Referring to non-existent method org.xml.sax.XMLReader.parse(org.xml.sax.InputSource)void
[error]   dispatched from org.xml.sax.XMLReader.parse(org.xml.sax.InputSource)void
[error]   called from scala.xml.parsing.FactoryAdapter.loadDocument(org.xml.sax.InputSource,org.xml.sax.XMLReader)scala.xml.Document
[error]   called from scala.xml.factory.XMLLoader.loadDocument(org.xml.sax.InputSource)scala.xml.Document
[error]   called from scala.xml.factory.XMLLoader.loadStringDocument(java.lang.String)scala.xml.Document
[error]   called from scala.xml.factory.XMLLoader.loadString(java.lang.String)scala.xml.Node
[error]   called from scala.xml.XML$.loadString(java.lang.String)scala.xml.Node
[error]   called from zio.schema.codec.XmlCodecSpec$.spec()zio.test.Spec
[error]   dispatched from zio.test.ZIOSpecAbstract.spec()zio.test.Spec
[error]   called from zio.test.sbt.ZTestTask.execute(sbt.testing.EventHandler,[sbt.testing.Logger,scala.Function1)void
[error]   dispatched from sbt.testing.Task.execute(sbt.testing.EventHandler,[sbt.testing.Logger,scala.Function1)void
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.scheduleTask(sbt.testing.Task,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private static org.scalajs.testing.bridge.HTMLRunner$.runAllTasks$1(scala.collection.Seq,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.runTests(sbt.testing.Framework,scala.collection.immutable.Seq,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.onLoad(org.scalajs.testing.common.IsolatedTestSet)void
[error]   called from org.scalajs.testing.bridge.HTMLRunner$.start(org.scalajs.testing.common.IsolatedTestSet)void
[error]   called from org.scalajs.testing.bridge.Bridge$.start()void
[error]   called from static org.scalajs.testing.bridge.Bridge.start()void
[error]   called from core module module initializers
[error] involving instantiated classes:
[error]   scala.xml.parsing.NoBindingFactoryAdapter
[error]   scala.xml.XML$
[error]   zio.schema.codec.XmlCodecSpec$
[error]   zio.test.sbt.ZTestTask
[error]   org.scalajs.testing.bridge.HTMLRunner$
[error]   org.scalajs.testing.bridge.Bridge$
[error] Referring to non-existent method org.xml.sax.XMLReader.getEntityResolver()org.xml.sax.EntityResolver
[error]   dispatched from org.xml.sax.XMLReader.getEntityResolver()org.xml.sax.EntityResolver
[error]   called from scala.xml.parsing.FactoryAdapter.loadDocument(org.xml.sax.InputSource,org.xml.sax.XMLReader)scala.xml.Document
[error]   called from scala.xml.factory.XMLLoader.loadDocument(org.xml.sax.InputSource)scala.xml.Document
[error]   called from scala.xml.factory.XMLLoader.loadStringDocument(java.lang.String)scala.xml.Document
[error]   called from scala.xml.factory.XMLLoader.loadString(java.lang.String)scala.xml.Node
[error]   called from scala.xml.XML$.loadString(java.lang.String)scala.xml.Node
[error]   called from zio.schema.codec.XmlCodecSpec$.spec()zio.test.Spec
[error]   dispatched from zio.test.ZIOSpecAbstract.spec()zio.test.Spec
[error]   called from zio.test.sbt.ZTestTask.execute(sbt.testing.EventHandler,[sbt.testing.Logger,scala.Function1)void
[error]   dispatched from sbt.testing.Task.execute(sbt.testing.EventHandler,[sbt.testing.Logger,scala.Function1)void
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.scheduleTask(sbt.testing.Task,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private static org.scalajs.testing.bridge.HTMLRunner$.runAllTasks$1(scala.collection.Seq,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.runTests(sbt.testing.Framework,scala.collection.immutable.Seq,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.onLoad(org.scalajs.testing.common.IsolatedTestSet)void
[error]   called from org.scalajs.testing.bridge.HTMLRunner$.start(org.scalajs.testing.common.IsolatedTestSet)void
[error]   called from org.scalajs.testing.bridge.Bridge$.start()void
[error]   called from static org.scalajs.testing.bridge.Bridge.start()void
[error]   called from core module module initializers
[error] involving instantiated classes:
[error]   scala.xml.parsing.NoBindingFactoryAdapter
[error]   scala.xml.XML$
[error]   zio.schema.codec.XmlCodecSpec$
[error]   zio.test.sbt.ZTestTask
[error]   org.scalajs.testing.bridge.HTMLRunner$
[error]   org.scalajs.testing.bridge.Bridge$
[error] Referring to non-existent method org.xml.sax.XMLReader.setProperty(java.lang.String,java.lang.Object)void
[error]   dispatched from org.xml.sax.XMLReader.setProperty(java.lang.String,java.lang.Object)void
[error]   called from scala.xml.parsing.FactoryAdapter.loadDocument(org.xml.sax.InputSource,org.xml.sax.XMLReader)scala.xml.Document
[error]   called from scala.xml.factory.XMLLoader.loadDocument(org.xml.sax.InputSource)scala.xml.Document
[error]   called from scala.xml.factory.XMLLoader.loadStringDocument(java.lang.String)scala.xml.Document
[error]   called from scala.xml.factory.XMLLoader.loadString(java.lang.String)scala.xml.Node
[error]   called from scala.xml.XML$.loadString(java.lang.String)scala.xml.Node
[error]   called from zio.schema.codec.XmlCodecSpec$.spec()zio.test.Spec
[error]   dispatched from zio.test.ZIOSpecAbstract.spec()zio.test.Spec
[error]   called from zio.test.sbt.ZTestTask.execute(sbt.testing.EventHandler,[sbt.testing.Logger,scala.Function1)void
[error]   dispatched from sbt.testing.Task.execute(sbt.testing.EventHandler,[sbt.testing.Logger,scala.Function1)void
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.scheduleTask(sbt.testing.Task,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private static org.scalajs.testing.bridge.HTMLRunner$.runAllTasks$1(scala.collection.Seq,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.runTests(sbt.testing.Framework,scala.collection.immutable.Seq,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.onLoad(org.scalajs.testing.common.IsolatedTestSet)void
[error]   called from org.scalajs.testing.bridge.HTMLRunner$.start(org.scalajs.testing.common.IsolatedTestSet)void
  [32m+[0m compile alternative
[error]   called from org.scalajs.testing.bridge.Bridge$.start()void
[error]   called from static org.scalajs.testing.bridge.Bridge.start()void
[error]   called from core module module initializers
[error] involving instantiated classes:
[error]   scala.xml.parsing.NoBindingFactoryAdapter
[error]   scala.xml.XML$
[error]   zio.schema.codec.XmlCodecSpec$
[error]   zio.test.sbt.ZTestTask
[error]   org.scalajs.testing.bridge.HTMLRunner$
[error]   org.scalajs.testing.bridge.Bridge$
[error] Referring to non-existent method org.xml.sax.XMLReader.getErrorHandler()org.xml.sax.ErrorHandler
[error]   dispatched from org.xml.sax.XMLReader.getErrorHandler()org.xml.sax.ErrorHandler
[error]   called from scala.xml.parsing.FactoryAdapter.loadDocument(org.xml.sax.InputSource,org.xml.sax.XMLReader)scala.xml.Document
[error]   called from scala.xml.factory.XMLLoader.loadDocument(org.xml.sax.InputSource)scala.xml.Document
[error]   called from scala.xml.factory.XMLLoader.loadStringDocument(java.lang.String)scala.xml.Document
[error]   called from scala.xml.factory.XMLLoader.loadString(java.lang.String)scala.xml.Node
[error]   called from scala.xml.XML$.loadString(java.lang.String)scala.xml.Node
[error]   called from zio.schema.codec.XmlCodecSpec$.spec()zio.test.Spec
[error]   dispatched from zio.test.ZIOSpecAbstract.spec()zio.test.Spec
[error]   called from zio.test.sbt.ZTestTask.execute(sbt.testing.EventHandler,[sbt.testing.Logger,scala.Function1)void
[error]   dispatched from sbt.testing.Task.execute(sbt.testing.EventHandler,[sbt.testing.Logger,scala.Function1)void
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.scheduleTask(sbt.testing.Task,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private static org.scalajs.testing.bridge.HTMLRunner$.runAllTasks$1(scala.collection.Seq,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.runTests(sbt.testing.Framework,scala.collection.immutable.Seq,org.scalajs.testing.bridge.HTMLRunner$UI)scala.concurrent.Future
[error]   called from private org.scalajs.testing.bridge.HTMLRunner$.onLoad(org.scalajs.testing.common.IsolatedTestSet)void
[error]   called from org.scalajs.testing.bridge.HTMLRunner$.start(org.scalajs.testing.common.IsolatedTestSet)void
[error]   called from org.scalajs.testing.bridge.Bridge$.start()void
[error]   called from static org.scalajs.testing.bridge.Bridge.start()void
[error]   called from core module module initializers
[error] involving instantiated classes:
[error]   scala.xml.parsing.NoBindingFactoryAdapter
[error]   scala.xml.XML$
[error]   zio.schema.codec.XmlCodecSpec$
[error]   zio.test.sbt.ZTestTask
[error]   org.scalajs.testing.bridge.HTMLRunner$
[error]   org.scalajs.testing.bridge.Bridge$
[error] Not showing 25 more linking errors
  [32m+[0m compile digit
  [32m+[0m compile sequence
[info] Starting process '/home/yossef/zio-schema/zio-schema-zio-test/native/target/scala-2.13/zio-schema-zio-test-test' on port '41501'.
  [32m+[0m Valid formats
  [32m+[0m Invalid formats
[32m+[0m TimeSpec
[32m+[0m DeriveGenSpec
[info] Done
  [32m+[0m Valid formats
[info] No tests were executed
  [32m+[0m Invalid formats
  [32m+[0m correctly derives Either
  [32m+[0m correctly derives Tuple
  [32m+[0m correctly derives Collections
  [32m+[0m correctly derives Optional
  [32m+[0m correctly derives Lazy
  [32m+[0m correctly derives Transform
  [32m+[0m correctly derives Enums
[32m+[0m ValidationSpec
  [32m+[0m Greater than
  [32m+[0m Either
  [32m+[0m Contramap
  [32m+[0m Optional
  [32m+[0m Equal to
  [32m+[0m Less than
  [32m+[0m MinLength
  [32m+[0m Regex email Validation
[32m+[0m PhoneNumberValidationSpec
  [32m+[0m correctly derives CaseClasses
  [32m+[0m correctly derives Primitives
[32m+[0m ValidationSpec
[32m+[0m Compiling Regex
    [32m+[0m should accept a correct email
    [32m+[0m should reject an invalid email
  [32m+[0m MaxLength
  [32m+[0m Regex digit or letter Validation
  [32m+[0m Regex identifier Validation
  [32m+[0m Regex IPv4 Validation
    [32m+[0m should accept a valid IPv4 address
    [32m+[0m should reject an invalid IPv4 address
  [32m+[0m Time Validation HH
  [32m+[0m Time Validation H
  [32m+[0m Regex IPv6 Validation
    [32m+[0m should reject an invalid IPv6 address
    [32m+[0m should accept a valid IPv6 address
  [32m+[0m Time Validation mm
  [32m+[0m Time Validation m
  [32m+[0m Time Validation HHmm
  [32m+[0m Time Validation HH:mm
  [32m+[0m Time Validation HH:mm:ss
  [32m+[0m Regex phone number validation for Ascension Island
  [32m+[0m Regex phone number validation for Andorra
  [32m+[0m Regex phone number validation for United Arab Emirates
  [32m+[0m Regex uuid Validations
    [32m+[0m invalid UUID
  [32m+[0m Time Validation HH:mm:ss a
    [32m+[0m valid UUID
  [32m+[0m Regex phone number validation for Afghanistan
  [32m+[0m Time Validation H:m:s
  [32m+[0m Time Validation H:m:s a
  [32m+[0m Time Validation hh:mm:ss
  [32m+[0m Time Validation hh:mm:ss a
  [32m+[0m Time Validation h:m:s
  [32m+[0m Time Validation h:m:s a
  [32m+[0m Time Validation HH:mm:ss S
  [32m+[0m Time Validation HH:mm:ss.SSS
  [32m+[0m Time Validation HH:mm:ss SSSSSSSSS a
  [32m+[0m Optional
  [32m+[0m Generic record should validate object with missing keys
  [32m+[0m Contramap
  [32m+[0m Either
  [32m+[0m Greater than
[info] No tests were executed
[warn] multiple main classes detected: run 'show discoveredMainClasses' to see the list
  [32m+[0m Regex phone number validation for Antigua and Barbuda
  [32m+[0m Regex phone number validation for Anguilla
  [32m+[0m Regex phone number validation for Albania
  [32m+[0m Regex phone number validation for Armenia
  [32m+[0m compile oneOf singleton
  [32m+[0m compile literal
  [32m+[0m compile oneOf several elements
  [32m+[0m compile between
  [32m+[0m Regex duration Validation
  [32m+[0m Regex phone number validation for Netherlands Antilles
  [32m+[0m Regex phone number validation for Angola
  [32m+[0m Regex phone number validation for Antarctica
  [32m+[0m Regex phone number validation for Argentina
  [32m+[0m Less than
  [32m+[0m Equal to
  [32m+[0m MinLength
  [32m+[0m Regex email Validation
[info] Build skipped: No changes detected in build configuration and class path contents since last build.
[32m+[0m PhoneNumberValidationSpec
[info] Starting process '/home/yossef/zio-schema/tests/native/target/scala-2.13/zio-schema-tests-test' on port '32911'.
  [32m+[0m Regex phone number validation for Afghanistan
  [32m+[0m Regex phone number validation for Ascension Island
  [32m+[0m Regex phone number validation for United Arab Emirates
  [32m+[0m Regex phone number validation for Andorra
  [32m+[0m Regex phone number validation for American Samoa
  [32m+[0m Regex phone number validation for Austria
  [32m+[0m Regex phone number validation for Australia
  [32m+[0m Regex phone number validation for Aruba
  [32m+[0m Regex phone number validation for Anguilla
  [32m+[0m Regex phone number validation for Armenia
  [32m+[0m Regex phone number validation for Antigua and Barbuda
  [32m+[0m Regex phone number validation for Netherlands Antilles
  [32m+[0m Regex phone number validation for Albania
  [32m+[0m Regex phone number validation for Angola
  [32m+[0m Regex phone number validation for Antarctica
  [32m+[0m Regex phone number validation for Argentina
  [32m+[0m Regex phone number validation for Austria
  [32m+[0m Regex phone number validation for American Samoa
  [32m+[0m Regex phone number validation for Aruba
  [32m+[0m Regex phone number validation for Australia
  [32m+[0m Regex phone number validation for Azerbaijan
  [32m+[0m Regex phone number validation for Aland Islands
  [32m+[0m Regex phone number validation for Bosnia and Herzegovina
  [32m+[0m Regex phone number validation for Barbados
  [32m+[0m Regex phone number validation for Bangladesh
  [32m+[0m Regex phone number validation for Burkina Faso
  [32m+[0m Regex phone number validation for Belgium
  [32m+[0m Regex phone number validation for Bulgaria
  [32m+[0m Regex phone number validation for Burundi
  [32m+[0m Regex phone number validation for Bahrain
  [32m+[0m Regex phone number validation for Benin
  [32m+[0m Regex phone number validation for Bermuda
  [32m+[0m Regex phone number validation for Saint-Barthelemy
  [32m+[0m Regex phone number validation for Bolivia
  [32m+[0m Regex phone number validation for Brazil
  [32m+[0m Regex phone number validation for Brunei Darussalam
  [32m+[0m Regex phone number validation for Caribbean Netherlands
  [32m+[0m Regex phone number validation for Bahamas
  [32m+[0m Regex phone number validation for Bhutan
  [32m+[0m Regex phone number validation for Bouvet Island
  [32m+[0m Regex phone number validation for Belarus
  [32m+[0m Regex phone number validation for Botswana
  [32m+[0m Regex phone number validation for Belize
  [32m+[0m Regex phone number validation for Canada
  [32m+[0m Regex phone number validation for Cocos (Keeling) Islands
  [32m+[0m Regex phone number validation for Congo, (Kinshasa)
  [32m+[0m Regex phone number validation for Aland Islands
  [32m+[0m compile *
  [32m+[0m Regex phone number validation for Azerbaijan
  [32m+[0m Regex phone number validation for Bosnia and Herzegovina
  [32m+[0m Regex phone number validation for Barbados
  [32m+[0m Regex phone number validation for Central African Republic
  [32m+[0m Regex phone number validation for Congo (Brazzaville)
  [32m+[0m Regex phone number validation for Switzerland
  [32m+[0m Regex phone number validation for Côte d'Ivoire
  [32m+[0m compile +
  [32m+[0m compile ?
  [32m+[0m compile repeat n
  [32m+[0m Regex phone number validation for Chile
  [32m+[0m Regex phone number validation for Cook Islands
  [32m+[0m Regex phone number validation for China
  [32m+[0m Regex phone number validation for Colombia
  [32m+[0m Regex phone number validation for Cape Verde
  [32m+[0m Regex phone number validation for Cuba
  [32m+[0m Regex phone number validation for Cameroon
  [32m+[0m Regex phone number validation for Costa Rica
  [32m+[0m Regex phone number validation for Christmas Island
  [32m+[0m Regex phone number validation for Cyprus
  [32m+[0m Regex phone number validation for Curacao
  [32m+[0m Regex phone number validation for Czech Republic
  [32m+[0m Regex phone number validation for Djibouti
  [32m+[0m Regex phone number validation for Bangladesh
  [32m+[0m Regex phone number validation for Denmark
  [32m+[0m Regex phone number validation for Belgium
  [32m+[0m Regex phone number validation for Dominica
  [32m+[0m Regex phone number validation for Burkina Faso
  [32m+[0m Regex phone number validation for Germany
  [32m+[0m Regex phone number validation for Bulgaria
  [32m+[0m Regex phone number validation for Algeria
  [32m+[0m Regex phone number validation for Estonia
  [32m+[0m Regex phone number validation for Dominican Republic
  [32m+[0m Regex phone number validation for Ecuador
  [32m+[0m Regex phone number validation for Egypt
  [32m+[0m Regex phone number validation for Western Sahara
  [32m+[0m Regex phone number validation for Eritrea
  [32m+[0m Regex phone number validation for Ethiopia
  [32m+[0m Regex phone number validation for Spain
  [32m+[0m Regex phone number validation for Finland
  [32m+[0m Regex phone number validation for Fiji
  [32m+[0m Regex phone number validation for Falkland Islands (Malvinas)
  [32m+[0m Regex phone number validation for France
  [32m+[0m Regex phone number validation for Faroe Islands
  [32m+[0m Regex phone number validation for Micronesia, Federated States of
  [32m+[0m compile repeat n+
  [32m+[0m compile repeat n to m
  [32m+[0m compile alternative
  [32m+[0m Regex phone number validation for United Kingdom
  [32m+[0m Regex phone number validation for Grenada
  [32m+[0m Regex phone number validation for Gabon
  [32m+[0m compile letter
  [32m+[0m Regex phone number validation for Georgia
  [32m+[0m Regex phone number validation for Ghana
  [32m+[0m Regex phone number validation for Gibraltar
  [32m+[0m Regex phone number validation for Bahrain
  [32m+[0m Regex phone number validation for Burundi
  [32m+[0m Regex phone number validation for Benin
  [32m+[0m Regex phone number validation for Saint-Barthelemy
  [32m+[0m Regex phone number validation for Guernsey
  [32m+[0m Regex phone number validation for French Guiana
  [32m+[0m Regex phone number validation for Greenland
  [32m+[0m Regex phone number validation for Gambia
  [32m+[0m Regex phone number validation for Guinea
  [32m+[0m Regex phone number validation for Greece
  [32m+[0m Regex phone number validation for Equatorial Guinea
  [32m+[0m Regex phone number validation for South Sandwich Islands
  [32m+[0m Regex phone number validation for Guatemala
  [32m+[0m Regex phone number validation for Guadeloupe
  [32m+[0m Regex phone number validation for Bermuda
  [32m+[0m Regex phone number validation for Brunei Darussalam
  [32m+[0m Regex phone number validation for Bolivia
  [32m+[0m Regex phone number validation for Caribbean Netherlands
  [32m+[0m Regex phone number validation for Guam
  [32m+[0m Regex phone number validation for Guinea-Bissau
  [32m+[0m Regex phone number validation for Guyana
  [32m+[0m Regex phone number validation for Hong Kong
  [32m+[0m Regex phone number validation for Croatia
  [32m+[0m Regex phone number validation for Honduras
  [32m+[0m Regex phone number validation for Haiti
  [32m+[0m Regex phone number validation for Ireland
  [32m+[0m Regex phone number validation for Heard and Mcdonald Islands
  [32m+[0m Regex phone number validation for Indonesia
  [32m+[0m Regex phone number validation for Hungary
  [32m+[0m Regex phone number validation for Isle of Man
  [32m+[0m Regex phone number validation for Israel
  [32m+[0m Regex phone number validation for India
  [32m+[0m Regex phone number validation for British Indian Ocean Territory
  [32m+[0m Regex phone number validation for Iraq
  [32m+[0m Regex phone number validation for Iran
  [32m+[0m Regex phone number validation for Italy
  [32m+[0m Regex phone number validation for Iceland
  [32m+[0m Regex phone number validation for Jersey
  [32m+[0m Regex phone number validation for Jordan
  [32m+[0m Regex phone number validation for Jamaica
  [32m+[0m Regex phone number validation for Japan
  [32m+[0m Regex phone number validation for Kenya
  [32m+[0m Regex phone number validation for Kyrgyzstan
  [32m+[0m Regex phone number validation for Kiribati
  [32m+[0m Regex phone number validation for Cambodia
  [32m+[0m Regex phone number validation for Saint Kitts and Nevis
  [32m+[0m Regex phone number validation for Comoros
  [32m+[0m Regex phone number validation for North Korea
  [32m+[0m Regex phone number validation for South Korea
  [32m+[0m Regex phone number validation for Cayman Islands
  [32m+[0m Regex phone number validation for Kuwait
  [32m+[0m compile digit
  [32m+[0m compile sequence
  [32m+[0m Regex phone number validation for Lebanon
  [32m+[0m Regex phone number validation for Kazakhstan
  [32m+[0m Regex phone number validation for Lao PDR
  [32m+[0m Regex phone number validation for Saint Lucia
  [32m+[0m Regex phone number validation for Brazil
  [32m+[0m Regex phone number validation for Bahamas
  [32m+[0m Regex phone number validation for Sri Lanka
  [32m+[0m Regex phone number validation for Bhutan
  [32m+[0m Regex phone number validation for Bouvet Island
  [32m+[0m Regex phone number validation for Liechtenstein
  [32m+[0m Regex phone number validation for Liberia
  [32m+[0m Regex phone number validation for Lesotho
  [32m+[0m Regex phone number validation for Lithuania
  [32m+[0m Regex phone number validation for Luxembourg
  [32m+[0m Regex phone number validation for Libya
  [32m+[0m Regex phone number validation for Monaco
    [32m+[0m should reject an invalid email
    [32m+[0m should accept a correct email
  [32m+[0m Regex phone number validation for Latvia
  [32m+[0m Regex phone number validation for Morocco
  [32m+[0m Regex phone number validation for Montenegro
  [32m+[0m MaxLength
  [32m+[0m Regex digit or letter Validation
  [32m+[0m Regex identifier Validation
  [32m+[0m Regex IPv4 Validation
    [32m+[0m should accept a valid IPv4 address
    [32m+[0m should reject an invalid IPv4 address
  [32m+[0m Regex phone number validation for Marshall Islands
  [32m+[0m Regex phone number validation for Moldova
  [32m+[0m Regex phone number validation for Macedonia
  [32m+[0m Regex phone number validation for Madagascar
  [32m+[0m Regex phone number validation for Saint-Martin (French)
  [32m+[0m Regex phone number validation for Mali
  [32m+[0m Regex phone number validation for Myanmar
  [32m+[0m Regex phone number validation for Botswana
  [32m+[0m Regex phone number validation for Mongolia
[32m+[0m Derive
  [32m+[0m Regex phone number validation for Belarus
  [32m+[0m Regex phone number validation for Belize
  [32m+[0m Regex phone number validation for Canada
  [32m+[0m Regex phone number validation for Macao
  [32m+[0m Regex phone number validation for Martinique
  [32m+[0m Regex phone number validation for Northern Mariana Islands
  [32m+[0m case object
  [32m+[0m Regex phone number validation for Mauritania
  [32m+[0m Regex phone number validation for Malta
  [32m+[0m Regex phone number validation for Montserrat
  [32m+[0m Regex phone number validation for Mauritius
  [32m+[0m Regex phone number validation for Maldives
  [32m+[0m Regex phone number validation for Malawi
  [32m+[0m Regex phone number validation for Mexico
  [32m+[0m Regex phone number validation for Malaysia
  [32m+[0m Regex phone number validation for Namibia
  [32m+[0m Regex phone number validation for Mozambique
  [32m+[0m Regex phone number validation for New Caledonia
  [32m+[0m Regex phone number validation for Nigeria
  [32m+[0m Regex phone number validation for Niger
  [32m+[0m Regex phone number validation for Norway
  [32m+[0m Regex phone number validation for Norfolk Island
  [32m+[0m Regex phone number validation for Netherlands
  [32m+[0m Regex phone number validation for Nicaragua
  [32m+[0m Regex phone number validation for Nepal
  [32m+[0m Regex phone number validation for Nauru
  [32m+[0m Regex phone number validation for Cocos (Keeling) Islands
  [32m+[0m Regex phone number validation for New Zealand
  [32m+[0m Regex phone number validation for Congo, (Kinshasa)
  [32m+[0m Regex phone number validation for Central African Republic
  [32m+[0m Regex phone number validation for Panama
  [32m+[0m Regex phone number validation for Niue
  [32m+[0m Regex phone number validation for Oman
  [32m+[0m Regex phone number validation for Congo (Brazzaville)
  [32m+[0m Regex phone number validation for Papua New Guinea
  [32m+[0m Regex phone number validation for Peru
  [32m+[0m Regex phone number validation for Philippines
  [32m+[0m Regex phone number validation for French Polynesia
  [32m+[0m Regex phone number validation for Poland
  [32m+[0m Regex phone number validation for Pakistan
  [32m+[0m Regex phone number validation for Saint Pierre and Miquelon
  [32m+[0m Regex phone number validation for Pitcairn Islands
  [32m+[0m Regex phone number validation for Puerto Rico
  [32m+[0m Regex phone number validation for Palau
  [32m+[0m Regex phone number validation for Palestinian Territory
  [32m+[0m Regex phone number validation for Portugal
  [32m+[0m Regex phone number validation for Qatar
  [32m+[0m Regex phone number validation for Paraguay
  [32m+[0m Regex phone number validation for Réunion
  [32m+[0m Regex phone number validation for Rwanda
  [32m+[0m Regex phone number validation for Russian Federation
  [32m+[0m Regex phone number validation for Romania
  [32m+[0m Regex phone number validation for Serbia
  [32m+[0m Regex phone number validation for Switzerland
  [32m+[0m Regex phone number validation for Côte d'Ivoire
  [32m+[0m Regex phone number validation for Cook Islands
  [32m+[0m Regex phone number validation for Sudan
  [32m+[0m Regex phone number validation for Saudi Arabia
  [32m+[0m Regex phone number validation for Chile
  [32m+[0m Regex phone number validation for Seychelles
  [32m+[0m Regex phone number validation for Solomon Islands
[32m+[0m Record Spec
  [32m+[0m Regex phone number validation for Singapore
  [32m+[0m Deconstruct should get the values of a case class' fields
  [32m+[0m Regex phone number validation for Saint Helena
  [32m+[0m Regex phone number validation for Sweden
  [32m+[0m Regex phone number validation for Svalbard and Jan Mayen Islands
  [32m+[0m Regex phone number validation for Sierra Leone
  [32m+[0m Regex phone number validation for Slovenia
  [32m+[0m Regex phone number validation for Slovakia
  [32m+[0m Regex phone number validation for Suriname
  [32m+[0m Regex phone number validation for Somalia
  [32m+[0m Regex phone number validation for San Marino
  [32m+[0m Regex phone number validation for Senegal
  [32m+[0m Regex phone number validation for Sao Tome and Principe
  [32m+[0m Regex phone number validation for South Sudan
  [32m+[0m Regex phone number validation for Saint Marten
  [32m+[0m Regex phone number validation for Cameroon
  [32m+[0m Regex phone number validation for China
  [32m+[0m Regex phone number validation for Colombia
  [32m+[0m Regex phone number validation for Syria
  [32m+[0m Regex phone number validation for Swaziland
  [32m+[0m Regex phone number validation for Costa Rica
  [32m+[0m Regex phone number validation for El Salvador
  [32m+[0m Regex phone number validation for Chad
  [32m+[0m Regex phone number validation for Tristan da Cunha
  [32m+[0m Regex phone number validation for Turks and Caicos Islands
  [32m+[0m Regex phone number validation for French Southern Territories
  [32m+[0m Regex phone number validation for Togo
  [32m+[0m Regex phone number validation for Thailand
  [32m+[0m Regex phone number validation for Cuba
  [32m+[0m Regex phone number validation for Cape Verde
  [32m+[0m Regex phone number validation for Curacao
  [32m+[0m Regex phone number validation for Christmas Island
  [32m+[0m Regex phone number validation for Tajikistan
  [32m+[0m Regex phone number validation for Timor-Leste
  [32m+[0m Regex phone number validation for Tokelau
  [32m+[0m Regex phone number validation for Turkmenistan
  [32m+[0m Regex phone number validation for Tunisia
  [32m+[0m Regex phone number validation for Tonga
  [32m+[0m Regex phone number validation for Turkey
  [32m+[0m Regex phone number validation for Tuvalu
  [32m+[0m Regex phone number validation for Trinidad and Tobago
  [32m+[0m Regex phone number validation for Tanzania
  [32m+[0m Regex phone number validation for Uganda
  [32m+[0m Regex phone number validation for Ukraine
  [32m+[0m Regex phone number validation for US Minor Outlying Islands
  [32m+[0m Regex phone number validation for Taiwan
  [32m+[0m Regex phone number validation for Uruguay
  [32m+[0m Regex phone number validation for United States of America
  [32m+[0m Regex phone number validation for Holy See (Vatican City State)
  [32m+[0m Regex phone number validation for Uzbekistan
  [32m+[0m Regex phone number validation for Venezuela
  [32m+[0m Regex phone number validation for Saint Vincent and Grenadines
[32m+[0m Schema Validation Spec
  [32m+[0m Regex phone number validation for British Virgin Islands
  [32m+[0m Regex phone number validation for Virgin Islands, US
  [32m+[0m Regex phone number validation for Vanuatu
  [32m+[0m Regex phone number validation for Cyprus
  [32m+[0m Regex phone number validation for Czech Republic
  [32m+[0m Regex phone number validation for Wallis and Futuna Islands
  [32m+[0m Regex phone number validation for Germany
  [32m+[0m Regex phone number validation for Viet Nam
  [32m+[0m Regex phone number validation for Djibouti
  [32m+[0m Regex phone number validation for Samoa
  [32m+[0m Regex phone number validation for Yemen
  [32m+[0m Regex phone number validation for South Africa
  [32m+[0m Regex phone number validation for Kosovo
  [32m+[0m Regex phone number validation for Mayotte
  [32m+[0m Regex phone number validation for Zimbabwe
  [32m+[0m Regex phone number validation for Zambia
[32m+[0m DeriveSchemaSpec
[32m+[0m DeriveGenSpec
[info] Starting process '/home/yossef/zio-schema/tests/native/target/scala-2.13/zio-schema-tests-test' on port '38031'.
  [32m+[0m Derivation
  [32m+[0m Regex phone number validation for Denmark
  [32m+[0m Regex phone number validation for Dominica
306 tests passed. 0 tests failed. 0 tests ignored.

Executed in 6 s 561 ms

  [32m+[0m Regex phone number validation for Dominican Republic
  [32m+[0m Regex phone number validation for Algeria
  [32m+[0m Regex uuid Validations
    [32m+[0m invalid UUID
    [32m+[0m valid UUID
  [32m+[0m Regex IPv6 Validation
    [32m+[0m should accept a valid IPv6 address
    [32m+[0m should reject an invalid IPv6 address
  [32m+[0m Time Validation HH
  [32m+[0m Time Validation H
    [32m+[0m CaseClass0
  [32m+[0m Regex phone number validation for Ecuador
  [32m+[0m Regex phone number validation for Estonia
    [32m+[0m CaseClass1
  [32m+[0m Regex phone number validation for Egypt
    [32m+[0m CaseClass2
  [32m+[0m Regex phone number validation for Western Sahara
    [32m+[0m CaseClass3
  [32m+[0m Regex phone number validation for Eritrea
  [32m+[0m Regex phone number validation for Spain
  [32m+[0m Regex phone number validation for Ethiopia
  [32m+[0m Regex phone number validation for Finland
  [33m-[0m [33mTime Validation mm[0m - ignored: 1
  [33m-[0m [33mTime Validation m[0m - ignored: 1
  [32m+[0m Time Validation HHmm
  [32m+[0m Time Validation HH:mm
    [32m+[0m CaseClass4
  [32m+[0m Regex phone number validation for Fiji
  [32m+[0m Regex phone number validation for Falkland Islands (Malvinas)
  [32m+[0m Regex phone number validation for Micronesia, Federated States of
    [32m+[0m CaseClass5
  [32m+[0m Regex phone number validation for Faroe Islands
    [32m+[0m CaseClass6
    [32m+[0m CaseClass7
    [32m+[0m can derive new instance for case object
    [32m+[0m can use existing instance for case object
  [32m+[0m Regex phone number validation for France
  [32m+[0m Regex phone number validation for Gabon
  [32m+[0m Regex phone number validation for United Kingdom
  [32m+[0m Regex phone number validation for Grenada
  [32m+[0m support for unknown types
  [32m+[0m correctly derives Tuple
  [32m+[0m correctly derives Either
  [32m+[0m Invalid CaseClass1 creation
  [33m-[0m [33mTime Validation HH:mm:ss a[0m - ignored: 1
  [32m+[0m Valid CaseClass1 creation
  [32m+[0m Invalid CaseClass2 creation
  [32m+[0m Time Validation HH:mm:ss
  [33m-[0m [33mTime Validation H:m:s a[0m - ignored: 1
  [32m+[0m correctly derives Collections
  [32m+[0m Time Validation H:m:s
  [32m+[0m Valid CaseClass2 creation
    [32m+[0m correctly derives case class 0
  [32m+[0m Regex phone number validation for Georgia
  [32m+[0m Regex phone number validation for French Guiana
    [32m+[0m correctly derives case class
  [32m+[0m Regex phone number validation for Guernsey
  [32m+[0m Regex phone number validation for Ghana
    [32m+[0m correctly derives case class with arity > 22
    [32m+[0m correctly derives recursive data structure
    [32m+[0m CaseClass8
    [32m+[0m CaseClass9
    [32m+[0m CaseClass10
    [32m+[0m CaseClass11
  [32m+[0m Regex phone number validation for Gibraltar
  [32m+[0m Regex phone number validation for Greenland
  [32m+[0m Regex phone number validation for Gambia
  [32m+[0m Regex phone number validation for Guinea
  [32m+[0m Regex phone number validation for Guadeloupe
  [32m+[0m Regex phone number validation for Equatorial Guinea
  [32m+[0m Regex phone number validation for Greece
  [32m+[0m Regex phone number validation for South Sandwich Islands
  [33m-[0m [33mTime Validation hh:mm:ss a[0m - ignored: 1
  [32m+[0m Time Validation hh:mm:ss
  [33m-[0m [33mTime Validation h:m:s a[0m - ignored: 1
  [32m+[0m Time Validation h:m:s
  [32m+[0m Example Data, no ValidationErrors
  [32m+[0m Example Data, Left ValidationError
  [32m+[0m Example Data, Right ValidationError
  [32m+[0m Example Data, Option value without ValidationError
    [32m+[0m CaseClass12
    [32m+[0m CaseClass13
    [32m+[0m CaseClass14
    [32m+[0m CaseClass15
  [32m+[0m Regex phone number validation for Guatemala
  [32m+[0m Regex phone number validation for Guam
  [32m+[0m Regex phone number validation for Guinea-Bissau
  [32m+[0m Regex phone number validation for Guyana
    [32m+[0m correctly derives tuple arities from 2 to 22
    [32m+[0m correctly derive mutually recursive data structure
    [32m+[0m correctly derives recursively for case class
    [32m+[0m correctly derives for case object
  [32m+[0m Regex phone number validation for Hong Kong
  [32m+[0m Regex phone number validation for Heard and Mcdonald Islands
  [32m+[0m Regex phone number validation for Honduras
  [32m+[0m Regex phone number validation for Croatia
  [32m+[0m Example Data, Option value with ValidationError
  [32m+[0m Time Validation HH:mm:ss S
  [32m+[0m Time Validation HH:mm:ss.SSS
    [32m+[0m CaseClass16
  [32m+[0m Example Data, single element List with ValidationError
  [33m-[0m [33mTime Validation HH:mm:ss SSSSSSSSS a[0m - ignored: 1
    [32m+[0m CaseClass17
    [32m+[0m CaseClass18
    [32m+[0m CaseClass19
  [32m+[0m Example Data, multi element List with ValidationError
  [32m+[0m Regex duration Validation
  [32m+[0m Example Data, Tuple with ValidationError on first element
  [32m+[0m correctly derives Optional
  [32m+[0m correctly derives Transform
  [32m+[0m Generic record should validate object with missing keys
  [32m+[0m correctly derives Lazy
    [32m+[0m can pick up existing instance for unknown type
    [32m+[0m calls deriveUnknown for unknown type
  [32m+[0m Scala 2.13 specific tests
  [32m+[0m default field values
    [32m+[0m use case class default values
    [32m+[0m use case class default values of generic class
    [32m+[0m prefer field annotations over case class default values
  [32m+[0m Regex phone number validation for Haiti
  [32m+[0m Regex phone number validation for Hungary
[info] Starting process '/home/yossef/zio-schema/tests/native/target/scala-2.13/zio-schema-tests-test' on port '46755'.
  [32m+[0m Regex phone number validation for Indonesia
  [32m+[0m Regex phone number validation for Ireland
    [32m+[0m CaseClass20
    [32m+[0m CaseClass21
    [32m+[0m CaseClass22
    [32m+[0m correctly captures annotations on case class
  [32m+[0m support factory
    [32m+[0m factory
    [32m+[0m correctly captures annotations on case class with arity greater than 22
  [32m+[0m case class
    [32m+[0m can derive new instance for simple case class
    [32m+[0m can use existing instance for simple case class
    [32m+[0m correctly derives Enum
    [32m+[0m can derive new instance for case class referring another one using an existing instance
    [32m+[0m can derive new instance for case class containing sequences
    [32m+[0m can derive new instance for case class containing a set
    [32m+[0m correctly capture annotations on Enum and cases
    [32m+[0m can derive new instance for case class containing a map and an either
    [32m+[0m can derive new instance for case class containing a 3-tuple field
    [32m+[0m works with with arity > 22
    [32m+[0m new top level implicit value is not passed as summoned
  [32m+[0m caching
    [32m+[0m reuses derived instances
  [32m+[0m enum
    [32m+[0m can derive instance for enum
    [32m+[0m can derive instance for recursive enum
  [32m+[0m default implementation
    [32m+[0m default tupleN implementation creates proper record schema
[info] Starting process '/home/yossef/zio-schema/tests/native/target/scala-2.13/zio-schema-tests-test' on port '37237'.
  [32m+[0m Example Data, Tuple with ValidationError on second element
  [32m+[0m Example Data, Wrapper class wrapping class with ValidationError
  [32m+[0m Example Data, first Enum with ValidationError
  [32m+[0m Example Data, second Enum with ValidationError
[info] Starting process '/home/yossef/zio-schema/tests/native/target/scala-2.13/zio-schema-tests-test' on port '36237'.
  [32m+[0m Validator successfully extracts from validation annotation
  [32m+[0m Regex phone number validation for Israel
  [32m+[0m Regex phone number validation for Isle of Man
  [32m+[0m Regex phone number validation for India
  [32m+[0m Regex phone number validation for British Indian Ocean Territory
[info] Starting process '/home/yossef/zio-schema/tests/native/target/scala-2.13/zio-schema-tests-test' on port '46359'.
[32m+[0m PatchSpec
  [32m+[0m identity law
    [32m+[0m standard types
[32m+[0m Default Value Spec
  [32m+[0m Primitive
    [32m+[0m correctly derives mutually recursive case classes
    [32m+[0m correctly derives recursive Enum with type parameters
    [32m+[0m correctly derives generic recursive Enum
    [32m+[0m correctly derives recursive Enum with multiple type parameters
[32m+[0m Schema Spec
  [32m+[0m Should have valid equals
    [32m+[0m StringType default value
    [32m+[0m UnitType default value
    [32m+[0m IntType default value
    [32m+[0m ShortType default value
  [32m+[0m Regex phone number validation for Iraq
  [32m+[0m Regex phone number validation for Iran
  [32m+[0m Regex phone number validation for Iceland
  [32m+[0m Regex phone number validation for Italy
[32m+[0m TypeId
    [32m+[0m tuple
    [32m+[0m record
    [32m+[0m primitive
    [32m+[0m BoolType default value
    [32m+[0m FloatType default value
    [32m+[0m DoubleType default value
    [32m+[0m LongType default value
    [32m+[0m BinaryType default value
    [32m+[0m CharType default value
  [32m+[0m parse inner class name in some object
    [32m+[0m BigDecimalType default value
  [32m+[0m parse one string
  [32m+[0m parse class name in package
    [32m+[0m sequence
  [32m+[0m parse complex structure
  [32m+[0m name of nominal structure    [32m+[0m Month default value

  [32m+[0m fully qualified name of nominal structure
    [32m+[0m optional
    [32m+[0m BigIntegerType default value
    [32m+[0m MonthDay default value
    [32m+[0m transform
    [32m+[0m schema of schema
    [32m+[0m enumeration
    [32m+[0m DayOfWeekType default value
    [32m+[0m schema of schema of schema
  [32m+[0m Tuple.toRecord should preserve annotations
    [32m+[0m YearMonth default value
    [32m+[0m Year default value
    [32m+[0m ZoneId default value
    [32m+[0m Period default value
    [32m+[0m ZoneOffset default value
    [32m+[0m correctly derives generic recursive Enum with multiple type parameters
    [32m+[0m correctly derives schema with unused type parameters
    [32m+[0m correctly derives recursive Enum
    [32m+[0m correctly derives Enum with > 22 cases
  [32m+[0m Regex phone number validation for Jersey
  [32m+[0m Regex phone number validation for Jamaica
  [32m+[0m Regex phone number validation for Jordan
[info] Starting process '/home/yossef/zio-schema/tests/native/target/scala-2.13/zio-schema-tests-test' on port '36557'.
      [32m+[0m Short
    [32m+[0m Instant default value
  [32m+[0m Regex phone number validation for Japan
[32m+[0m AccessorBuilder
    [32m+[0m LocalDateTime default value
    [32m+[0m Duration default value
    [32m+[0m LocalDate default value
    [32m+[0m LocalTime default value
  [32m+[0m fail
    [32m+[0m OffsetTime default value
    [33m-[0m [33mCurrency default value[0m - ignored: 1
    [32m+[0m ZonedDateTime default value
  [32m+[0m primitive
    [32m+[0m OffsetDateTime default value
  [32m+[0m Enumeration
    [32m+[0m defaults to first case
  [32m+[0m Transform
    [32m+[0m returns transformed default value
  [32m+[0m Optional
    [32m+[0m defaults to None
  [32m+[0m Fail
    [32m+[0m defaults to the error message
  [32m+[0m Record
    [32m+[0m basic
    [32m+[0m recursive
  [32m+[0m Sequence
    [32m+[0m nonEmptyMap
    [32m+[0m chunk
    [32m+[0m list
    [32m+[0m nonEmptyChunk
  [32m+[0m Enum
    [32m+[0m defaults to first case
  [32m+[0m Tuple
    [32m+[0m defaults to default value of tuple members
  [32m+[0m Lazy
    [32m+[0m calls the schema thunk
  [32m+[0m default from annotation
    [32m+[0m default value from annotation
  [32m+[0m EitherSchema
    [32m+[0m either
    [32m+[0m left
    [32m+[0m right
  [32m+[0m transform
  [32m+[0m optional
  [32m+[0m tuple
  [32m+[0m lazy
  [32m+[0m either
  [32m+[0m sequence
  [32m+[0m case class
[32m+[0m DynamicValueSpec
  [32m+[0m round-trip
    [32m+[0m Primitives
      [32m+[0m Int
      [32m+[0m Bool
    [32m+[0m correctly derives schema for case classes that use schema
    [32m+[0m correctly derives renaming field when fieldName annotation is present
  [32m+[0m sealed trait
    [32m+[0m correctly derives optional fields when optional annotation is present
    [32m+[0m correctly derives simpleEnum with annotation
  [32m+[0m Regex phone number validation for Kenya
  [32m+[0m Regex phone number validation for Kyrgyzstan
  [32m+[0m Regex phone number validation for Cambodia
  [32m+[0m Regex phone number validation for Kiribati
[32m+[0m Migration Spec
  [32m+[0m Derivation
    [32m+[0m Record
      [32m+[0m round-trips Int
      [32m+[0m round-trips Short
[32m+[0m MetaSchema
  [32m+[0m from schema
      [32m+[0m delete node
      [32m+[0m add node
      [32m+[0m change field type
      [32m+[0m delete recursive node
      [32m+[0m add nested node
      [32m+[0m delete nested node
      [32m+[0m round-trips Float
    [32m+[0m Sum
      [32m+[0m add case
      [32m+[0m delete node
    [32m+[0m Value
      [32m+[0m require
      [32m+[0m change type
      [32m+[0m optional
    [32m+[0m correctly derives simpleEnum without annotation
      [32m+[0m increment dimensions
      [32m+[0m round-trips Long
      [32m+[0m decrement dimensions
  [32m+[0m Transformation
    [32m+[0m delete node from nested record
    [32m+[0m delete node from record
    [32m+[0m require node fails
    [32m+[0m require node
    [32m+[0m delete node recursively
    [32m+[0m ignore add case
    [32m+[0m optional
    [32m+[0m fail to remove instantiated case
    [32m+[0m correctly derives schema for abstract sealed class with case class subclasses
    [32m+[0m correctly derives schema for abstract sealed class with intermediate subclasses, having case class leaf classes
  [32m+[0m Scala 2.13 specific tests
      [32m+[0m round-trips Double
  [32m+[0m Regex phone number validation for Comoros
  [32m+[0m Regex phone number validation for Saint Kitts and Nevis
      [32m+[0m round-trips Bool
  [32m+[0m Regex phone number validation for North Korea
  [32m+[0m Regex phone number validation for South Korea
    [32m+[0m primitive
  [32m+[0m extended meta schema
      [32m+[0m round-trips UUID
    [32m+[0m represents known type as Known
[info] Starting process '/home/yossef/zio-schema/tests/native/target/scala-2.13/zio-schema-tests-test' on port '42929'.
    [32m+[0m roundtrip serialization with known types
    [32m+[0m materializes the original schema
[32m+[0m schemas should generate correct orderings
  [32m+[0m primitives
  [32m+[0m correctly derives Enums
  [32m+[0m materialization
    [32m+[0m simple recursive product
    [32m+[0m simple recursive sum
    [32m+[0m sequence
  [32m+[0m correctly derives CaseClasses
  [32m+[0m correctly derives Primitives
    [32m+[0m optional
      [32m+[0m Long
    [32m+[0m primitive
  [32m+[0m Regex phone number validation for Kuwait
  [32m+[0m Regex phone number validation for Cayman Islands
  [32m+[0m Regex phone number validation for Kazakhstan
  [32m+[0m Regex phone number validation for Lao PDR
    [33m-[0m [33mcase class[0m - ignored: 1
    [33m-[0m [33msealed trait[0m - ignored: 1
[32m+[0m Schema Migration Spec
  [32m+[0m case class
      [32m+[0m round-trips Char
    [32m+[0m isomorphisms
      [32m+[0m round-trips BigDecimal
  [32m+[0m Regex phone number validation for Lebanon
    [32m+[0m either
      [32m+[0m round-trips BigInteger
  [32m+[0m Regex phone number validation for Saint Lucia
    [32m+[0m tuple
  [32m+[0m Regex phone number validation for Liechtenstein
    [32m+[0m sequence of optional primitives
  [32m+[0m Regex phone number validation for Sri Lanka
      [32m+[0m round-trips Binary
    [32m+[0m optional sequence of primitives
    [32m+[0m dynamic
[32m+[0m NodePath
  [32m+[0m isSubpathOf
    [32m+[0m recursive type
  [32m+[0m Regex phone number validation for Liberia
  [32m+[0m Regex phone number validation for Lesotho
  [32m+[0m Regex phone number validation for Lithuania
  [32m+[0m Regex phone number validation for Luxembourg
    [32m+[0m any schema
  [32m+[0m record
    [32m+[0m recursive case class
    [32m+[0m case class
    [32m+[0m generic
  [32m+[0m enumeration
    [32m+[0m sealed trait
    [32m+[0m generic
  [32m+[0m optional
    [32m+[0m primitive
  [32m+[0m sequence
    [32m+[0m primitive
      [32m+[0m round-trips DayOfWeek
      [32m+[0m round-trips Duration
      [32m+[0m round-trips LocalDate
      [32m+[0m round-trips LocalTime
      [32m+[0m round-trips Month
      [32m+[0m round-trips Instant
  [32m+[0m Regex phone number validation for Latvia
  [32m+[0m Regex phone number validation for Libya
  [32m+[0m Regex phone number validation for Morocco
  [32m+[0m Regex phone number validation for Monaco
      [32m+[0m round-trips LocalDateTime
  [32m+[0m Regex phone number validation for Moldova
  [32m+[0m Regex phone number validation for Montenegro
  [32m+[0m Regex phone number validation for Saint-Martin (French)
  [32m+[0m Regex phone number validation for Madagascar
  [32m+[0m Regex phone number validation for Marshall Islands
  [32m+[0m Regex phone number validation for Macedonia
  [32m+[0m Regex phone number validation for Mali
  [32m+[0m Regex phone number validation for Myanmar
  [32m+[0m Regex phone number validation for Mongolia
  [32m+[0m Regex phone number validation for Macao
  [32m+[0m Regex phone number validation for Northern Mariana Islands
  [32m+[0m Regex phone number validation for Martinique
    [32m+[0m Int
[32m+[0m Avro Codec Spec
    [32m+[0m Short
      [32m+[0m round-trips MonthDay
  [32m+[0m Avro Codec - Encoder primitive spec
      [32m+[0m round-trips OffsetDateTime
      [32m+[0m round-trips Period
      [32m+[0m round-trips OffsetTime
      [32m+[0m round-trips Year
  [32m+[0m Regex phone number validation for Mauritania
  [32m+[0m Regex phone number validation for Montserrat
  [32m+[0m Regex phone number validation for Malta
  [32m+[0m Regex phone number validation for Mauritius
      [32m+[0m round-trips YearMonth      [32m+[0m String

      [32m+[0m round-trips ZoneId
  [32m+[0m Regex phone number validation for Maldives
  [32m+[0m Regex phone number validation for Malawi
  [32m+[0m Regex phone number validation for Mexico
  [32m+[0m Regex phone number validation for Malaysia
      [32m+[0m Char
  [32m+[0m Regex phone number validation for Mozambique
  [32m+[0m Regex phone number validation for Namibia
  [32m+[0m Regex phone number validation for New Caledonia
  [32m+[0m Regex phone number validation for Niger
    [32m+[0m Bool
  [32m+[0m Regex phone number validation for Norfolk Island
      [32m+[0m UUID
  [32m+[0m Regex phone number validation for Nigeria
  [32m+[0m Regex phone number validation for Nicaragua
  [32m+[0m Regex phone number validation for Netherlands
[32m+[0m Derive
      [32m+[0m round-trips ZoneOffset
  [32m+[0m case object
  [32m+[0m Regex phone number validation for Norway
  [32m+[0m Regex phone number validation for Nepal
  [32m+[0m Regex phone number validation for Nauru
  [32m+[0m Regex phone number validation for Niue
      [32m+[0m round-trips UnitType
  [32m+[0m Regex phone number validation for New Zealand
  [32m+[0m Regex phone number validation for Oman
      [32m+[0m round-trips ZonedDateTime
  [32m+[0m Regex phone number validation for Panama
  [32m+[0m Regex phone number validation for Peru
      [32m+[0m round-trips String
    [32m+[0m round-trips Eithers
    [32m+[0m round-trips Tuples
    [32m+[0m round-trips Optionals
  [32m+[0m Regex phone number validation for French Polynesia
  [32m+[0m Regex phone number validation for Papua New Guinea
  [32m+[0m Regex phone number validation for Philippines
  [32m+[0m Regex phone number validation for Pakistan
      [32m+[0m BigDecimal
    [32m+[0m can derive new instance for case object
    [32m+[0m can use existing instance for case object
  [32m+[0m Regex phone number validation for Poland
  [32m+[0m Regex phone number validation for Saint Pierre and Miquelon
  [32m+[0m Regex phone number validation for Pitcairn Islands
  [32m+[0m Regex phone number validation for Puerto Rico
  [32m+[0m support for unknown types
    [32m+[0m calls deriveUnknown for unknown type
    [32m+[0m can pick up existing instance for unknown type
  [32m+[0m default field values
    [32m+[0m use case class default values
    [32m+[0m prefer field annotations over case class default values
    [32m+[0m use case class default values of generic class
  [32m+[0m enum
    [32m+[0m can derive instance for enum
  [32m+[0m Regex phone number validation for Palestinian Territory
  [32m+[0m Regex phone number validation for Portugal
    [32m+[0m can derive instance for recursive enum
  [32m+[0m default implementation
    [32m+[0m default tupleN implementation creates proper record schema
  [32m+[0m caching
    [32m+[0m reuses derived instances
  [32m+[0m Regex phone number validation for Palau
  [32m+[0m case class
    [32m+[0m can derive new instance for simple case class
    [32m+[0m can use existing instance for simple case class
    [32m+[0m can derive new instance for case class referring another one using an existing instance
    [32m+[0m can derive new instance for case class containing sequences
    [32m+[0m can derive new instance for case class containing a 3-tuple field
  [32m+[0m Regex phone number validation for Paraguay
    [32m+[0m can derive new instance for case class containing a set
    [32m+[0m can derive new instance for case class containing a map and an either
    [32m+[0m new top level implicit value is not passed as summoned
    [32m+[0m works with with arity > 22
  [32m+[0m Scala 2.13 specific tests
  [32m+[0m support factory
    [32m+[0m factory
    [32m+[0m Long
    [32m+[0m Double
  [32m+[0m Regex phone number validation for Qatar
  [32m+[0m Regex phone number validation for Réunion
    [32m+[0m Encode string
  [32m+[0m Regex phone number validation for Romania
    [32m+[0m Float
  [32m+[0m Regex phone number validation for Serbia
    [32m+[0m Encode Long
      [32m+[0m BigInteger
    [32m+[0m Encode Short
    [32m+[0m Encode Float
    [32m+[0m Encode Int
  [32m+[0m Regex phone number validation for Russian Federation
  [32m+[0m Regex phone number validation for Rwanda
[32m+[0m BsonSchemaCodecGenericSpec
  [32m+[0m Regex phone number validation for Saudi Arabia
  [32m+[0m Regex phone number validation for Solomon Islands
  [32m+[0m round trip
      [32m+[0m DayOfWeek
      [32m+[0m BrandedDogFood <-> BrandedCatFood
    [32m+[0m GenericTree[Int]
      [32m+[0m encoder/decoder
    [32m+[0m Encode UUID
    [32m+[0m Encode Boolean
    [32m+[0m Encode Double
    [32m+[0m Encode Char
  [32m+[0m Regex phone number validation for Seychelles
  [32m+[0m Regex phone number validation for Sudan
  [32m+[0m Regex phone number validation for Sweden
  [32m+[0m Regex phone number validation for Singapore
    [32m+[0m Encode BigDecimal
    [32m+[0m Encode Currency
    [32m+[0m Encode DayOfWeek
    [32m+[0m Encode Period
    [32m+[0m Encode Month
    [32m+[0m Encode MonthDay
  [32m+[0m Regex phone number validation for Saint Helena
  [32m+[0m Regex phone number validation for Slovenia
  [32m+[0m Regex phone number validation for Svalbard and Jan Mayen Islands
  [32m+[0m Regex phone number validation for Slovakia
    [32m+[0m Encode YearMonth
[32m+[0m Record Spec
  [32m+[0m Deconstruct should get the values of a case class' fields
    [32m+[0m Encode ZoneOffset
    [32m+[0m Encode BigDecimal
    [32m+[0m Encode Year
      [32m+[0m Duration
      [32m+[0m Instant
      [32m+[0m Double
      [32m+[0m DogFood <-> CatFood
    [32m+[0m round-trips Transform
    [32m+[0m CaseClass2
    [32m+[0m CaseClass0
    [32m+[0m CaseClass3
    [32m+[0m CaseClass1
    [32m+[0m CaseClass7
    [32m+[0m CaseClass4
    [32m+[0m CaseClass5
    [32m+[0m CaseClass6
    [32m+[0m CaseClass8
    [32m+[0m CaseClass9
    [32m+[0m CaseClass12
    [32m+[0m CaseClass13
    [32m+[0m CaseClass11
    [32m+[0m CaseClass10
    [32m+[0m CaseClass16
    [32m+[0m CaseClass14
    [32m+[0m CaseClass17
    [32m+[0m CaseClass15
    [32m+[0m CaseClass18
    [32m+[0m CaseClass20
  [32m+[0m Regex phone number validation for Sierra Leone
  [32m+[0m Regex phone number validation for San Marino
  [32m+[0m Regex phone number validation for Senegal
  [32m+[0m Regex phone number validation for Somalia
  [32m+[0m Regex phone number validation for Suriname
  [32m+[0m Regex phone number validation for South Sudan
  [32m+[0m Regex phone number validation for Sao Tome and Principe
  [32m+[0m Regex phone number validation for El Salvador
    [32m+[0m CaseClass21
    [32m+[0m CaseClass19
    [32m+[0m CaseClass22
[32m+[0m Schema Validation Spec
    [32m+[0m UUID
    [32m+[0m Encode Unit
      [32m+[0m LocalDate  [32m+[0m Avro Codec - Decode enum

  [32m+[0m Regex phone number validation for Saint Marten
        [32m+[0m example
  [32m+[0m Regex phone number validation for Syria
    [32m+[0m Char
  [32m+[0m Regex phone number validation for Swaziland
  [32m+[0m Regex phone number validation for Tristan da Cunha
  [32m+[0m Valid CaseClass1 creation
  [32m+[0m Invalid CaseClass1 creation
  [32m+[0m Invalid CaseClass2 creation
  [32m+[0m Valid CaseClass2 creation
  [32m+[0m Example Data, Right ValidationError
  [32m+[0m Example Data, no ValidationErrors
    [32m+[0m Decode Enum3 - case object
    [32m+[0m Decode Enum3
  [32m+[0m Example Data, Left ValidationError
    [32m+[0m any path is subpath of root
  [32m+[0m Example Data, Option value without ValidationError
  [32m+[0m Example Data, single element List with ValidationError
  [32m+[0m Example Data, Option value with ValidationError
      [32m+[0m LocalDateTime
    [32m+[0m Decode Enum5
    [32m+[0m Decode Person
  [32m+[0m Example Data, Tuple with ValidationError on first element
  [32m+[0m Example Data, multi element List with ValidationError
      [32m+[0m Float
  [32m+[0m Example Data, Wrapper class wrapping class with ValidationError
  [32m+[0m Example Data, first Enum with ValidationError
  [32m+[0m Example Data, Tuple with ValidationError on second element
  [32m+[0m Example Data, second Enum with ValidationError
  [32m+[0m Validator successfully extracts from validation annotation
    [32m+[0m Decode CaseClass3
  [32m+[0m Avro Codec - Primitive decoder spec
    [32m+[0m Decode Unit
    [32m+[0m Decode Byte
    [32m+[0m Decode Boolean
    [32m+[0m Decode String
    [32m+[0m Decode Short
    [32m+[0m Decode Float
    [32m+[0m Decode Integer
    [32m+[0m Decode Double
    [32m+[0m Decode Chunk[Byte]
    [32m+[0m Decode Long
    [32m+[0m Decode Char
    [32m+[0m Decode Currency
    [32m+[0m Decode BigDecimal
    [32m+[0m Decode BigInt
    [32m+[0m Decode DayOfWeek
    [32m+[0m Decode Month
    [32m+[0m Decode MonthDay
    [32m+[0m Decode Period
    [32m+[0m Decode OffsetTime
    [32m+[0m Decode Year
[32m+[0m DeriveSchemaSpec
  [32m+[0m Derivation
    [32m+[0m Decode UUID
    [32m+[0m Decode YearMonth
      [32m+[0m NestedEither1 <-> NestedEither2
    [32m+[0m Decode ZoneOffset
    [32m+[0m Decode Duration
    [32m+[0m Decode Instant
    [32m+[0m Decode ZoneId
    [32m+[0m Decode LocalDate
    [32m+[0m Decode LocalDateTime
    [32m+[0m Decode OffsetDateTime
    [32m+[0m Decode LocalTime
    [32m+[0m Decode ZonedDateTime
    [32m+[0m correctly derives case class
  [32m+[0m Regex phone number validation for Turks and Caicos Islands
    [32m+[0m correctly derives recursive data structure
  [32m+[0m Regex phone number validation for Chad
  [32m+[0m AvroCodec - Stream encode/decode
    [32m+[0m Encoding/Decoding using streams
  [32m+[0m Regex phone number validation for French Southern Territories
  [32m+[0m Regex phone number validation for Togo
  [32m+[0m Avro Codec - Encoder Option spec
    [32m+[0m Encode List[Option[Int]]
    [32m+[0m Encode Chunk[Option[Int]]
    [32m+[0m Encode Option[Int]
    [32m+[0m Encode Option[Option[Int]]
  [32m+[0m Avro Codec - Encoder Either spec
    [32m+[0m Encode Either[Int, String]
    [32m+[0m Encode Either[Int, String]
    [32m+[0m Encode Either[List[String], Int]
    [32m+[0m correctly derives case class with arity > 22
    [32m+[0m Encode Either[String, Option[Int]]
  [32m+[0m Avro Codec - Encoder Collection spec
    [32m+[0m Encode Chunk[Byte]
    [32m+[0m Encode Chunk[String]
    [32m+[0m Encode List[String]
    [32m+[0m Encode Set[String]
    [32m+[0m Encode Map[String, String]
  [32m+[0m Avro Codec - Encode Tuples spec
    [32m+[0m Encode Tuple2[Int, String]
  [32m+[0m Avro Codec - Encoder Fallback spec
    [32m+[0m Encode Fallback.Right
    [32m+[0m Encode Fallback.Both
    [32m+[0m Encode Fallback.Left
  [32m+[0m Avro Codec - Encode Generic Record
    [32m+[0m Encode Record
    [32m+[0m Encode High Arity
  [32m+[0m Avro Codec - Encode Enum
    [32m+[0m Encode Enum3
  [32m+[0m Avro Codec - Encode Case class
    [32m+[0m Encode Case Class 0
    [32m+[0m Encode Case Class 1
    [32m+[0m Encode Case Class 2
    [32m+[0m Encode Case Class 3
  [32m+[0m Avro Codec - Option Decoder spec
    [32m+[0m Decode Option
    [32m+[0m Decode Option[Option[_]]
    [32m+[0m Decode Option[Enum]
  [32m+[0m Avro Codec - Either Decoder spec
    [32m+[0m Decode Either
    [32m+[0m Decode Either[String, Option[Int]]
    [32m+[0m Decode Either[List[String], Int]
  [32m+[0m Avro Codec - Tuple Decoder Spec
    [32m+[0m Decode Tuple2
  [32m+[0m Avro Codec - Fallback Decoder spec
    [32m+[0m Decode Fallback
    [32m+[0m Decode Fallback[List[String], Int]
    [32m+[0m Decode Fallback.Both full decode
    [32m+[0m Decode Fallback.Both non full decode
  [32m+[0m Avro Codec - Decode Generic Record
    [32m+[0m Decode Record
    [32m+[0m Decode High Arity
    [32m+[0m Decode single field record
  [32m+[0m Avro Codec - Sequence Decoder spec
    [32m+[0m Decode List
    [32m+[0m Decode Set
    [32m+[0m Decode Map
    [32m+[0m Decode Chunk
    [32m+[0m Decode Chunk[Option[Int]]
  [32m+[0m AvroCodec - encode/decode Generic Record
    [32m+[0m Encode/Decode for ViviRequestKey
    [32m+[0m Encode/Decode
[32m+[0m AvroSchemaCodecSpec
  [33m-[0m [33mencode/decode full adt test[0m - ignored: 1
  [32m+[0m encode
    [32m+[0m seq
      [32m+[0m encodes complex types
      [32m+[0m is mapped to an avro array
    [32m+[0m set
      [32m+[0m is mapped to an avro array
      [32m+[0m encodes complex types
    [32m+[0m map
      [32m+[0m string keys and string values
      [32m+[0m string keys and complex values
      [32m+[0m complex keys and string values
      [32m+[0m complex keys and complex values
    [32m+[0m enum
      [32m+[0m encodes string only enum as avro enum
      [32m+[0m encodes sealed trait objects only as enum when avroEnum annotation is present
      [32m+[0m encodes sealed trait objects only as union of records when no avroEnum annotation is present
      [32m+[0m ignores avroEnum annotation if ADT cannot be reduced to String symbols
      [33m-[0m [33mflatten nested unions with initialSchemaDerived derivation[0m - ignored: 1
      [32m+[0m wraps nested unions
    [32m+[0m record
      [33m-[0m [33mgenerate a static name if not specified via annotation[0m - ignored: 1
      [32m+[0m fail with left on invalid name
      [32m+[0m pick up name from annotation
      [32m+[0m pick up name from annotation for fields
      [32m+[0m pick up doc from annotation
      [32m+[0m pick up namespace from annotation
      [32m+[0m fail with left on invalid namespace
      [32m+[0m pick up error annotation
      [32m+[0m includes all fields
      [32m+[0m includes nested record fields
    [32m+[0m optional
      [32m+[0m creates a union with case NULL
      [32m+[0m encodes complex types
      [32m+[0m wraps optional of unit to prevent duplicate null in union
      [32m+[0m encodes nested optionals
      [32m+[0m encodes optionals of union
      [32m+[0m encodes optionals of either
    [32m+[0m either
      [32m+[0m create an union
      [32m+[0m fails with duplicate names
      [32m+[0m create a named union
      [32m+[0m encodes complex types
    [32m+[0m correctly derives tuple arities from 2 to 22
      [32m+[0m encodes either containing optional
      [32m+[0m encodes nested either
    [32m+[0m tuple
      [32m+[0m encodes complex types
      [32m+[0m creates a record type and applies the name
      [32m+[0m encodes duplicate complex types by reference
    [32m+[0m fail should fail the encode
    [32m+[0m correctly derives case class 0
    [32m+[0m correctly derives recursively for case class
    [32m+[0m lazy is handled properly
    [32m+[0m primitives
      [32m+[0m encodes UnitType
      [32m+[0m encodes StringType
      [32m+[0m encodes BooleanType
      [32m+[0m encodes ShortType
      [32m+[0m encodes LongType
      [32m+[0m encodes IntType
      [32m+[0m encodes DoubleType
      [32m+[0m encodes BinaryType as fixed
    [32m+[0m correctly derives for case object
      [32m+[0m encodes BinaryType as bytes
      [32m+[0m encodes UUIDType
      [32m+[0m encodes BigDecimalType as Bytes
      [32m+[0m encodes FloatType
      [32m+[0m encodes CharType
      [32m+[0m encodes BigDecimalType as Bytes with scala and precision
      [32m+[0m encodes BigDecimalType as Fixed
      [32m+[0m encodes BigIntegerType as Bytes with scala and precision
      [32m+[0m encodes BigDecimalType as Fixed with scala and precision
      [32m+[0m encodes BigIntegerType as Fixed with scala and precision
      [32m+[0m encodes BigIntegerType as Fixed
      [32m+[0m encodes DayOfWeekType
      [32m+[0m encodes ZoneIdType
      [32m+[0m encodes ZoneOffsetType
      [32m+[0m encodes MonthType
      [32m+[0m encodes InstantType as string
      [32m+[0m encodes LocalTimeType as string
      [32m+[0m encodes LocalDateTimeType as string
      [32m+[0m encodes YearType
  [32m+[0m Regex phone number validation for Thailand
  [32m+[0m Regex phone number validation for Tajikistan
  [32m+[0m Regex phone number validation for Tokelau
    [32m+[0m correctly captures annotations on case class
    [32m+[0m correctly captures annotations on case class with arity greater than 22
      [32m+[0m encodes OffsetDateTimeType
      [32m+[0m encodes ZonedDateTimeType
      [32m+[0m encodes LocalDateType as string
      [32m+[0m encodes OffsetTimeType
      [32m+[0m encodes BigIntegerType as Bytes
  [32m+[0m Regex phone number validation for Timor-Leste
  [32m+[0m decode
    [32m+[0m decodes primitive array
    [32m+[0m decodes complex array
    [32m+[0m fields
      [32m+[0m decodes primitive fields of record
      [32m+[0m assign the field name annotation
      [32m+[0m decodes the fields complex initialSchemaDerived
      [32m+[0m assign the field doc annotation iff it exists
      [32m+[0m assign the field default annotation
      [32m+[0m assign the fieldOrder annotation
      [32m+[0m assign the field aliases annotation
    [32m+[0m decodes map with string keys
    [32m+[0m correctly capture annotations on Enum and cases
    [32m+[0m enum
      [32m+[0m decodes symbols as union of strings
      [32m+[0m assign the enum name annotation
      [32m+[0m assign the enum namespace annotation
      [32m+[0m not assign the enum namespace annotation if empty
      [32m+[0m assign the enum aliases annotation
      [32m+[0m not assign the enum aliases annotation if empty
    [32m+[0m correctly derives Enum
      [32m+[0m assign the enum doc annotation
      [32m+[0m not assign the enum doc annotation if empty
      [32m+[0m fail if enum default is not a symbol
      [32m+[0m assign the enum default annotation
      [32m+[0m not assign the enum default annotation if empty
    [32m+[0m union
      [32m+[0m option union with null on first position
      [32m+[0m option union with null on second position
      [32m+[0m not an option union with more than one element type
      [32m+[0m nested either union
    [32m+[0m correctly derives generic recursive Enum
    [32m+[0m correctly derives recursive Enum with type parameters
      [32m+[0m union as zio initialSchemaDerived enumeration
      [32m+[0m correct case codec for case object of ADT
      [32m+[0m correct case codec for case class of ADT
      [32m+[0m unwrap nested union
    [32m+[0m fixed
      [32m+[0m decode as binary
      [32m+[0m fail on invalid logical type
      [32m+[0m logical type decimal as BigDecimal
      [32m+[0m logical type decimal as BigInteger
    [32m+[0m bytes
      [32m+[0m logical type decimal as BigDecimal
      [32m+[0m logical type decimal as BigInteger
      [32m+[0m decode as binary
    [32m+[0m string
      [32m+[0m decodes zoneId with formatter
      [32m+[0m decodes instant using default
      [32m+[0m decodes instant with formatter pattern
      [32m+[0m decode DateTimeFormatter field fails on invalid formatter
      [32m+[0m decodes instant with formatter
      [32m+[0m decodes localTime with default formatter
      [32m+[0m decodes localDate with formatter
      [32m+[0m decodes localDate with default formatter
      [32m+[0m decodes localDateTime with formatter
      [32m+[0m decodes localTime with formatter
      [32m+[0m decodes localDateTime with default formatter
      [32m+[0m decodes zonedDateTime with formatter
      [32m+[0m decodes offsetTime with default formatter
      [32m+[0m decodes offsetDateTime with formatter
      [32m+[0m decodes zonedDateTime with default formatter
      [32m+[0m decodes offsetDateTime with default formatter
      [32m+[0m decodes offsetTime with formatter
      [32m+[0m decodes logical type uuid
      [32m+[0m decodes primitive type string
    [32m+[0m float
    [32m+[0m double
    [32m+[0m long
      [32m+[0m decodes long
      [32m+[0m decodes logical type timestampMillis with default formatter
      [32m+[0m decodes logical type timeMicros with default formatter
      [32m+[0m decodes logical type timestampMicros
      [32m+[0m decodes logical type timestampMillis
      [32m+[0m decodes logical type LocalTimestamp millis
      [32m+[0m decodes logical type timestampMicros with default formatter
      [32m+[0m decodes logical type timeMicros
      [32m+[0m decodes logical type LocalTimestamp micros
    [32m+[0m correctly derives recursive Enum with multiple type parameters
      [32m+[0m decodes logical type LocalTimestamp millis with default formatter
      [32m+[0m decodes logical type LocalTimestamp micros with default formatter
    [32m+[0m correctly derive mutually recursive data structure
    [32m+[0m record
      [32m+[0m decode a simple record
      [32m+[0m decode a nested record
      [32m+[0m unwrap a wrapped initialSchemaDerived
      [32m+[0m period record
      [32m+[0m tuple record successful
      [32m+[0m yearMonth record
      [32m+[0m monthDay record
      [32m+[0m tuple record failing
      [32m+[0m duration record without chrono unit annotation
      [32m+[0m assign the namespace annotation
      [32m+[0m duration record chrono unit annotation
      [32m+[0m assign the name annotation
      [32m+[0m not assign the namespace annotation if missing
      [32m+[0m assign the doc annotation
    [32m+[0m correctly derives mutually recursive case classes
      [32m+[0m not assign the doc annotation if missing
      [32m+[0m assign the aliases annotation
      [32m+[0m not assign the error annotation if not an error
      [32m+[0m not assign the aliases annotation if missing
      [32m+[0m not assign the aliases annotation if empty
      [32m+[0m assign the error annotation
    [32m+[0m int
      [32m+[0m decodes dayOfWeek
      [32m+[0m decodes Year
      [32m+[0m decodes short
      [32m+[0m decodes int
      [32m+[0m decodes logical type timemillis
      [32m+[0m decodes char
    [32m+[0m correctly derives generic recursive Enum with multiple type parameters
    [32m+[0m correctly derives schema for case classes that use schema
  [32m+[0m Regex phone number validation for Turkmenistan
      [32m+[0m decodes zoneOffset
      [32m+[0m decodes month
      [32m+[0m decodes logical type date
      [32m+[0m decodes logical type date with default formatter
      [32m+[0m decodes logical type timemillis with default formatter
    [32m+[0m boolean
    [32m+[0m null
  [32m+[0m Regex phone number validation for Tunisia
    [32m+[0m correctly derives schema with unused type parameters
    [32m+[0m correctly derives renaming field when fieldName annotation is present
  [32m+[0m Regex phone number validation for Tonga
    [32m+[0m correctly derives recursive Enum
  [32m+[0m Regex phone number validation for Turkey
    [32m+[0m correctly derives simpleEnum with annotation
    [32m+[0m correctly derives optional fields when optional annotation is present
    [32m+[0m correctly derives Enum with > 22 cases
    [32m+[0m correctly derives simpleEnum without annotation
    [32m+[0m correctly derives schema for abstract sealed class with case class subclasses
    [32m+[0m correctly derives schema for abstract sealed class with intermediate subclasses, having case class leaf classes
  [32m+[0m Scala 2.13 specific tests
      [32m+[0m Month
88 tests passed. 0 tests failed. 0 tests ignored.

Executed in 7 s 600 ms

      [33m-[0m [33mMonthDay[0m - ignored: 1
    [32m+[0m round-trips Enum
  [32m+[0m Regex phone number validation for Trinidad and Tobago
  [32m+[0m Regex phone number validation for Tuvalu
  [32m+[0m Regex phone number validation for Taiwan
  [32m+[0m Regex phone number validation for Tanzania
    [32m+[0m round-trips CaseClass
  [32m+[0m Regex phone number validation for Ukraine
  [32m+[0m Regex phone number validation for Uganda
  [32m+[0m Regex phone number validation for US Minor Outlying Islands
  [32m+[0m Regex phone number validation for United States of America
    [32m+[0m BigDecimal
  [32m+[0m Regex phone number validation for Uruguay
  [32m+[0m Regex phone number validation for Uzbekistan
  [32m+[0m Regex phone number validation for Holy See (Vatican City State)
  [32m+[0m Regex phone number validation for Saint Vincent and Grenadines
    [32m+[0m BigInteger
  [32m+[0m Regex phone number validation for Venezuela
  [32m+[0m Regex phone number validation for British Virgin Islands
  [32m+[0m Regex phone number validation for Virgin Islands, US
  [32m+[0m Regex phone number validation for Viet Nam
    [32m+[0m any relative path is subpath
  [32m+[0m relativeTo
    [32m+[0m compute relative subpath
    [32m+[0m compute path relative to self
    [32m+[0m return full path when not subpath
  [32m+[0m partitionLeaf
    [32m+[0m partition root path into empty path and None
    [32m+[0m partition path into internal path and leaf label
    [32m+[0m DayOfWeek
  [32m+[0m Regex phone number validation for Vanuatu
  [32m+[0m Regex phone number validation for Wallis and Futuna Islands
  [32m+[0m Regex phone number validation for Samoa
  [32m+[0m Regex phone number validation for Kosovo
  [32m+[0m Regex phone number validation for Yemen
  [32m+[0m Regex phone number validation for Mayotte
  [32m+[0m Regex phone number validation for South Africa
  [32m+[0m Regex phone number validation for Zambia
  [32m+[0m Regex phone number validation for Zimbabwe
      [32m+[0m OffsetDateTime
      [32m+[0m Binary
      [32m+[0m Recursive1 <-> Recursive2
      [32m+[0m Year
    [32m+[0m round-trips Enumerations
    [32m+[0m round-trips any un-nested schema
      [32m+[0m YearMonth
    [32m+[0m round-trips any nested schema
        [32m+[0m toBsonValue/as
        [32m+[0m writer/reader
        [32m+[0m toBsonValue/reader
    [32m+[0m round-trips set
    [32m+[0m round-trips sequence
[32m+[0m Migration Spec
  [32m+[0m Derivation
    [32m+[0m Value
        [32m+[0m writer/as
    [32m+[0m Binary
    [32m+[0m String
    [32m+[0m Duration
    [32m+[0m Instant
      [32m+[0m codec
        [32m+[0m example
        [32m+[0m toBsonValue/reader
    [32m+[0m LocalDate
    [32m+[0m LocalTime        [32m+[0m toBsonValue/as

    [32m+[0m Month
[32m+[0m NodePath
  [32m+[0m relativeTo
    [32m+[0m LocalDateTime
        [32m+[0m writer/reader
      [32m+[0m LocalTime
[32m+[0m Schema Spec
  [32m+[0m Should have valid equals
    [32m+[0m OffsetDateTime
      [32m+[0m OffsetTime
[32m+[0m DeriveGenSpec
        [32m+[0m writer/as
    [32m+[0m GenericRec[Int]
      [32m+[0m encoder/decoder
        [32m+[0m example
        [32m+[0m writer/reader
        [32m+[0m writer/as
        [32m+[0m toBsonValue/as
        [32m+[0m toBsonValue/reader
      [32m+[0m codec
        [32m+[0m writer/reader
        [32m+[0m example
        [32m+[0m toBsonValue/as
        [32m+[0m toBsonValue/reader
        [32m+[0m writer/as
    [32m+[0m SimpleGeneric[String]
      [32m+[0m codec
        [32m+[0m toBsonValue/as
        [32m+[0m writer/reader
        [32m+[0m example
        [32m+[0m toBsonValue/reader
        [32m+[0m writer/as
      [32m+[0m encoder/decoder
        [32m+[0m example
        [32m+[0m toBsonValue/as
        [32m+[0m writer/reader
        [32m+[0m toBsonValue/reader
        [32m+[0m writer/as
    [32m+[0m primitive
    [32m+[0m sequence
    [32m+[0m tuple
    [32m+[0m record
[32m+[0m schemas should generate correct orderings
  [32m+[0m primitives
      [32m+[0m Period
      [32m+[0m ZoneOffset
      [32m+[0m ZoneId
      [32m+[0m change type
    [32m+[0m transform
      [32m+[0m optional
      [32m+[0m require
    [32m+[0m optional
      [32m+[0m increment dimensions
    [32m+[0m enumeration
    [32m+[0m schema of schema
    [32m+[0m schema of schema of schema
  [32m+[0m Tuple.toRecord should preserve annotations
    [32m+[0m round-trips map
  [32m+[0m correctly derives Either
  [32m+[0m correctly derives Tuple
  [32m+[0m correctly derives Collections
    [32m+[0m OffsetTime
  [32m+[0m correctly derives Optional
  [32m+[0m correctly derives Transform
  [32m+[0m correctly derives Lazy
      [32m+[0m decrement dimensions
    [32m+[0m Record
      [32m+[0m change field type
      [32m+[0m add node
      [32m+[0m delete node
      [32m+[0m add nested node
      [32m+[0m delete nested node
      [32m+[0m delete recursive node
    [32m+[0m Sum
      [32m+[0m add case
      [32m+[0m delete node
  [32m+[0m Transformation
    [32m+[0m delete node from record
    [32m+[0m delete node from nested record
    [32m+[0m delete node recursively
    [32m+[0m require node
    [32m+[0m require node fails
    [32m+[0m optional
    [32m+[0m ignore add case
    [32m+[0m fail to remove instantiated case
  [32m+[0m correctly derives Enums
    [32m+[0m Year
[32m+[0m AccessorBuilder
    [32m+[0m MonthDay
    [32m+[0m Period
    [32m+[0m YearMonth
    [32m+[0m ZoneId
    [32m+[0m ZonedDateTime
    [32m+[0m UnitType
      [32m+[0m UnitType
  [32m+[0m correctly derives Primitives
    [32m+[0m ZoneOffset
  [32m+[0m structures
    [32m+[0m either
    [32m+[0m sequence
[32m+[0m BsonSchemaCodecSpec
  [32m+[0m configuration
    [32m+[0m bson annotations
      [32m+[0m caseName without discriminator
        [32m+[0m encode
          [32m+[0m toBsonValue
          [32m+[0m write
        [32m+[0m decode
          [32m+[0m as
          [32m+[0m read
      [32m+[0m caseName enum like
        [32m+[0m encode
          [32m+[0m toBsonValue
          [32m+[0m write
        [32m+[0m decode
          [32m+[0m read
          [32m+[0m as
      [32m+[0m with discriminator
        [32m+[0m encode
          [32m+[0m toBsonValue
          [32m+[0m write
        [32m+[0m decode
          [32m+[0m read
          [32m+[0m as
      [32m+[0m fieldName
        [32m+[0m encode
          [32m+[0m toBsonValue
          [32m+[0m write
        [32m+[0m decode
          [32m+[0m read
          [32m+[0m as
      [32m+[0m without discriminator
        [32m+[0m encode
          [32m+[0m toBsonValue
          [32m+[0m write
        [32m+[0m decode
          [32m+[0m read
          [32m+[0m as
      [32m+[0m caseName with discriminator
        [32m+[0m encode
          [32m+[0m toBsonValue
          [32m+[0m write
        [32m+[0m decode
          [32m+[0m as
  [32m+[0m fail
          [32m+[0m read
      [32m+[0m allowExtraFields
        [32m+[0m encode
          [32m+[0m write
          [32m+[0m toBsonValue
        [32m+[0m decode
          [32m+[0m read
          [32m+[0m as
      [32m+[0m rejectExtraFields
        [32m+[0m decode
          [32m+[0m as
          [32m+[0m read
        [32m+[0m encode
          [32m+[0m write
          [32m+[0m toBsonValue
      [32m+[0m transientField
        [32m+[0m encode
          [32m+[0m toBsonValue
          [32m+[0m write
        [32m+[0m decode
          [32m+[0m as
          [32m+[0m read
    [32m+[0m mixed annotations (bson priority)
      [32m+[0m no discriminator
        [32m+[0m encode
          [32m+[0m toBsonValue
          [32m+[0m write
        [32m+[0m decode
          [32m+[0m as
          [32m+[0m read
      [32m+[0m without discriminator
        [32m+[0m encode
          [32m+[0m toBsonValue
          [32m+[0m write
        [32m+[0m decode
  [32m+[0m primitive
          [32m+[0m as
          [32m+[0m read
      [32m+[0m with discriminator
        [32m+[0m encode
          [32m+[0m toBsonValue
          [32m+[0m write
        [32m+[0m decode
          [32m+[0m as
          [32m+[0m read
      [32m+[0m caseName with discriminator
        [32m+[0m encode
          [32m+[0m toBsonValue
          [32m+[0m write
        [32m+[0m decode
          [32m+[0m as
          [32m+[0m read
      [32m+[0m caseNameAliases with discriminator
        [32m+[0m encode
          [32m+[0m toBsonValue
          [32m+[0m write
        [32m+[0m decode
          [32m+[0m as
  [32m+[0m transform
          [32m+[0m read
      [32m+[0m caseNameAliases without discriminator
        [32m+[0m encode
          [32m+[0m toBsonValue
          [32m+[0m write
        [32m+[0m decode
          [32m+[0m as
          [32m+[0m read
      [32m+[0m caseName without discriminator
        [32m+[0m encode
          [32m+[0m toBsonValue
          [32m+[0m write
        [32m+[0m decode
          [32m+[0m as
          [32m+[0m read
      [32m+[0m caseName enum like
        [32m+[0m encode
  [32m+[0m sequence
          [32m+[0m toBsonValue
          [32m+[0m write
        [32m+[0m decode
          [32m+[0m as
          [32m+[0m read
      [32m+[0m fieldName
        [32m+[0m encode
          [32m+[0m toBsonValue
          [32m+[0m write
        [32m+[0m decode
          [32m+[0m as
          [32m+[0m read
      [32m+[0m rejectExtraFields
        [32m+[0m encode
          [32m+[0m toBsonValue
          [32m+[0m write
        [32m+[0m decode
          [32m+[0m as
          [32m+[0m read
      [32m+[0m fieldDefaultValue
        [32m+[0m decode
          [32m+[0m as
          [32m+[0m read
        [32m+[0m encode
          [32m+[0m toBsonValue
    [32m+[0m option
          [32m+[0m write
      [32m+[0m transientCase without discriminator
        [32m+[0m decode
          [32m+[0m read
          [32m+[0m as
        [32m+[0m encode
          [32m+[0m toBsonValue
          [32m+[0m write
      [32m+[0m allowExtraFields
        [32m+[0m encode
          [32m+[0m toBsonValue
          [32m+[0m write
        [32m+[0m decode
          [32m+[0m read
          [32m+[0m as
      [32m+[0m transientCase with discriminator
        [32m+[0m encode
          [32m+[0m toBsonValue
          [32m+[0m write
        [32m+[0m decode
          [32m+[0m read
          [32m+[0m as
      [32m+[0m transientField
        [32m+[0m decode
          [32m+[0m read
          [32m+[0m as
        [32m+[0m encode
          [32m+[0m write
          [32m+[0m toBsonValue
    [32m+[0m schema annotations
      [32m+[0m without discriminator
        [32m+[0m encode
          [32m+[0m toBsonValue
          [32m+[0m write
        [32m+[0m decode
          [32m+[0m as
          [32m+[0m read
      [32m+[0m with discriminator
        [32m+[0m encode
          [32m+[0m toBsonValue
          [32m+[0m write
        [32m+[0m decode
          [32m+[0m as
          [32m+[0m read
      [32m+[0m caseName enum like
        [32m+[0m encode
          [32m+[0m toBsonValue
          [32m+[0m write
        [32m+[0m decode
          [32m+[0m as
          [32m+[0m read
      [32m+[0m caseName without discriminator
        [32m+[0m encode
          [32m+[0m toBsonValue
          [32m+[0m write
        [32m+[0m decode
          [32m+[0m as
          [32m+[0m read
      [32m+[0m caseNameAliases with discriminator
        [32m+[0m encode
          [32m+[0m toBsonValue
          [32m+[0m write
        [32m+[0m decode
          [32m+[0m read
          [32m+[0m as
      [32m+[0m no discriminator
        [32m+[0m decode
          [32m+[0m as
          [32m+[0m read
        [32m+[0m encode
          [32m+[0m write
          [32m+[0m toBsonValue
      [32m+[0m fieldName
        [32m+[0m encode
          [32m+[0m toBsonValue
          [32m+[0m write
        [32m+[0m decode
          [32m+[0m as
          [32m+[0m read
      [32m+[0m caseName with discriminator
        [32m+[0m encode
          [32m+[0m toBsonValue
          [32m+[0m write
        [32m+[0m decode
          [32m+[0m as
          [32m+[0m read
      [32m+[0m caseNameAliases without discriminator
        [32m+[0m decode
          [32m+[0m as
          [32m+[0m read
        [32m+[0m encode
          [32m+[0m write
          [32m+[0m toBsonValue
      [32m+[0m fieldDefaultValue
        [32m+[0m encode
          [32m+[0m toBsonValue
          [32m+[0m write
        [32m+[0m decode
          [32m+[0m as
          [32m+[0m read
      [32m+[0m allowExtraFields
        [32m+[0m encode
          [32m+[0m toBsonValue
          [32m+[0m write
        [32m+[0m decode
          [32m+[0m as
          [32m+[0m read
      [32m+[0m rejectExtraFields
        [32m+[0m encode
          [32m+[0m toBsonValue
          [32m+[0m write
        [32m+[0m decode
          [32m+[0m as
          [32m+[0m read
      [32m+[0m transientCase without discriminator
        [32m+[0m encode
          [32m+[0m toBsonValue
          [32m+[0m write
        [32m+[0m decode
          [32m+[0m as
          [32m+[0m read
      [32m+[0m Config with DiscriminatorField
        [32m+[0m encode
          [32m+[0m toBsonValue
          [32m+[0m write
        [32m+[0m decode
          [32m+[0m as
          [32m+[0m read
      [32m+[0m Config with WrapperWithClassNameField
        [32m+[0m decode
          [32m+[0m as
          [32m+[0m read
        [32m+[0m encode
          [32m+[0m write
          [32m+[0m toBsonValue
      [32m+[0m transientField
        [32m+[0m decode
          [32m+[0m as
          [32m+[0m read
        [32m+[0m encode
          [32m+[0m toBsonValue
          [32m+[0m write
      [32m+[0m transientCase with discriminator
        [32m+[0m encode
          [32m+[0m toBsonValue
          [32m+[0m write
        [32m+[0m decode
          [32m+[0m as
          [32m+[0m read
      [32m+[0m Config with classNameTransform
        [32m+[0m decode
          [32m+[0m read
          [32m+[0m as
        [32m+[0m encode
          [32m+[0m toBsonValue
          [32m+[0m write
  [32m+[0m round trip
    [32m+[0m EnumLike
      [32m+[0m codec
        [32m+[0m toBsonValue/reader
        [32m+[0m example
        [32m+[0m toBsonValue/as
        [32m+[0m writer/reader
        [32m+[0m writer/as
      [32m+[0m encoder/decoder
        [32m+[0m writer/reader
        [32m+[0m toBsonValue/reader
        [32m+[0m example
        [32m+[0m toBsonValue/as
        [32m+[0m writer/as
    [32m+[0m SimpleClass
      [32m+[0m encoder/decoder
        [32m+[0m example
        [32m+[0m toBsonValue/as
        [32m+[0m writer/reader
        [32m+[0m toBsonValue/reader
        [32m+[0m writer/as
      [32m+[0m codec
        [32m+[0m example
        [32m+[0m toBsonValue/reader
        [32m+[0m toBsonValue/as
        [32m+[0m writer/reader
        [32m+[0m writer/as
    [32m+[0m BigDecimalClass
      [32m+[0m encoder/decoder
        [32m+[0m example
        [32m+[0m toBsonValue/as
        [32m+[0m toBsonValue/reader
        [32m+[0m writer/reader
        [32m+[0m writer/as
      [32m+[0m codec
        [32m+[0m toBsonValue/as
        [32m+[0m example
        [32m+[0m writer/reader
        [32m+[0m writer/as
        [32m+[0m toBsonValue/reader
    [32m+[0m Tree
      [32m+[0m codec
        [32m+[0m example
        [32m+[0m writer/reader
        [32m+[0m toBsonValue/as
        [32m+[0m writer/as
        [32m+[0m toBsonValue/reader
      [32m+[0m encoder/decoder
        [32m+[0m example
        [32m+[0m toBsonValue/as
        [32m+[0m toBsonValue/reader
        [32m+[0m writer/reader
        [32m+[0m writer/as
    [32m+[0m Customer
      [32m+[0m codec
        [32m+[0m example
        [32m+[0m toBsonValue/as
        [32m+[0m toBsonValue/reader
        [32m+[0m writer/reader
        [32m+[0m writer/as
      [32m+[0m encoder/decoder
        [32m+[0m example
        [32m+[0m toBsonValue/as
        [32m+[0m writer/reader
        [32m+[0m toBsonValue/reader
        [32m+[0m writer/as
[32m+[0m Default Value Spec
  [32m+[0m Primitive
  [32m+[0m optional
  [32m+[0m tuple
  [32m+[0m either
  [32m+[0m lazy
  [32m+[0m case class
  [32m+[0m sealed trait
  [32m+[0m correctly derives CaseClasses
9 tests passed. 0 tests failed. 0 tests ignored.

Executed in 7 s 158 ms

    [32m+[0m UnitType default value
    [32m+[0m StringType default value
    [32m+[0m BoolType default value
[32m+[0m DynamicValueSpec
  [32m+[0m round-trip
    [32m+[0m Primitives
[32m+[0m MetaSchema
  [32m+[0m from schema
    [32m+[0m ShortType default value
    [32m+[0m IntType default value
    [32m+[0m LongType default value
    [32m+[0m FloatType default value
    [32m+[0m DoubleType default value
[32m+[0m PatchSpec
  [32m+[0m identity law
    [32m+[0m standard types
    [32m+[0m round-trips recursive data types
    [32m+[0m BinaryType default value
    [32m+[0m CharType default value
    [32m+[0m BigDecimalType default value
    [32m+[0m BigIntegerType default value
    [32m+[0m primitive
  [32m+[0m materialization
    [32m+[0m DayOfWeekType default value
    [32m+[0m Month default value
    [32m+[0m MonthDay default value
    [32m+[0m Period default value
    [32m+[0m round-trips Records
  [32m+[0m stack safety
    [33m-[0m [33mtoTyped is stack safe[0m - ignored: 1
    [32m+[0m fromSchemaAndValue is stack safe
    [32m+[0m Year default value
    [32m+[0m YearMonth default value
    [32m+[0m ZoneId default value
    [32m+[0m ZoneOffset default value
    [32m+[0m Duration default value
    [32m+[0m Instant default value
    [32m+[0m LocalDate default value
    [32m+[0m LocalTime default value
    [32m+[0m simple recursive product
    [32m+[0m simple recursive sum
    [32m+[0m primitive
    [32m+[0m optional
    [32m+[0m transform
    [32m+[0m LocalDateTime default value
    [32m+[0m OffsetTime default value
    [32m+[0m OffsetDateTime default value
    [32m+[0m ZonedDateTime default value
    [33m-[0m [33mCurrency default value[0m - ignored: 1
  [32m+[0m Enumeration
    [32m+[0m defaults to first case
  [32m+[0m Record
    [32m+[0m basic
    [32m+[0m recursive
  [32m+[0m Sequence
    [32m+[0m chunk
    [32m+[0m list
    [32m+[0m nonEmptyChunk
    [32m+[0m nonEmptyMap
  [32m+[0m Transform
    [32m+[0m returns transformed default value
  [32m+[0m Optional
    [32m+[0m defaults to None
  [32m+[0m Fail
    [32m+[0m defaults to the error message
  [32m+[0m Tuple
    [32m+[0m defaults to default value of tuple members
  [32m+[0m Lazy
    [32m+[0m calls the schema thunk
  [32m+[0m Enum
    [32m+[0m defaults to first case
  [32m+[0m default from annotation
    [32m+[0m default value from annotation
  [32m+[0m EitherSchema
    [32m+[0m either
    [32m+[0m left
    [32m+[0m right
    [33m-[0m [33mcase class[0m - ignored: 1
    [32m+[0m sequence
    [32m+[0m tuple
    [32m+[0m either
    [32m+[0m compute relative subpath
    [32m+[0m compute path relative to self
    [32m+[0m return full path when not subpath
    [33m-[0m [33msealed trait[0m - ignored: 1
    [32m+[0m recursive type
    [32m+[0m sequence of optional primitives
    [32m+[0m any schema
[32m+[0m Schema Migration Spec
  [32m+[0m case class
    [32m+[0m isomorphisms
[32m+[0m LensSpec
    [32m+[0m optional sequence of primitives
    [32m+[0m dynamic
  [32m+[0m record
    [32m+[0m generic
    [32m+[0m case class
    [32m+[0m recursive case class
  [32m+[0m optional
    [32m+[0m primitive
  [32m+[0m sequence
    [32m+[0m primitive
  [32m+[0m enumeration
    [32m+[0m generic
    [32m+[0m sealed trait
  [32m+[0m extended meta schema
    [32m+[0m represents known type as Known
    [32m+[0m materializes the original schema
    [32m+[0m roundtrip serialization with known types
  [32m+[0m constructors
[info] Linking (multithreadingEnabled=true, disable if not used) (43984 ms)
[32m+[0m TypeId
  [32m+[0m partitionLeaf
    [32m+[0m partition root path into empty path and None
    [32m+[0m partition path into internal path and leaf label
[info] Discovered 11745 classes and 62413 methods after classloading
[error] Found 16 unreachable symbols!
[error] Unknown type org.xml.sax.SAXNotRecognizedException, referenced from:
[error]          method scala.xml.parsing.FactoryAdapter.loadDocument(org.xml.sax.InputSource, org.xml.sax.XMLReader): scala.xml.Document at FactoryAdapter.scala:126
[error]          method scala.xml.factory.XMLLoader.loadDocument(org.xml.sax.InputSource): scala.xml.Document at XMLLoader.scala:65
[error]          method scala.xml.XML$.loadDocument(org.xml.sax.InputSource): scala.xml.Document at XML.scala:61
[error]          method scala.xml.factory.XMLLoader.loadStringDocument(java.lang.String): scala.xml.Document at XMLLoader.scala:73
[error]          method scala.xml.XML$.loadStringDocument(java.lang.String): scala.xml.Document at XML.scala:61
[error]          method scala.xml.factory.XMLLoader.loadString(java.lang.String): scala.xml.Node at XMLLoader.scala:85
[error]          method scala.xml.XML$.loadString(java.lang.String): scala.xml.Node at XML.scala:61
[error]  private method zio.schema.codec.XmlCodec$$anon$1.$anonfun$streamDecoder$2(zio.Chunk): zio.ZIO at XmlCodec.scala:74
[error]          method zio.schema.codec.XmlCodec$$anon$1$$Lambda$2.apply(java.lang.Object): java.lang.Object at XmlCodec.scala:71
[error]          method zio.schema.codec.XmlCodec$$anon$1.streamDecoder(): zio.stream.ZPipeline at XmlCodec.scala:71
[error]          method zio.schema.codec.XmlCodec$.xmlCodec(zio.schema.codec.XmlCodec$Configuration, zio.schema.Schema): zio.schema.codec.BinaryCodec at XmlCodec.scala:59
[error]          method zio.schema.codec.XmlCodec$.xmlCodec(zio.schema.Schema): zio.schema.codec.BinaryCodec at XmlCodec.scala:56
[error]  private method zio.schema.codec.XmlCodecSpec$.$anonfun$spec$56(): zio.ZIO at XmlCodecSpec.scala:239
[error]          method zio.schema.codec.XmlCodecSpec$$$Lambda$18.apply(): java.lang.Object at XmlCodecSpec.scala:238
[error]          method zio.schema.codec.XmlCodecSpec$.spec(): zio.test.Spec at XmlCodecSpec.scala:238
[error]  private method zio.test.sbt.ZTestTask.$anonfun$execute$1(sbt.testing.EventHandler, zio.Console): zio.ZIO at ZTestRunnerNative.scala:121
[error]          method zio.test.sbt.ZTestTask$$Lambda$1.apply(java.lang.Object): java.lang.Object at ZTestRunnerNative.scala:119
[error]          method zio.test.sbt.ZTestTask.execute(sbt.testing.EventHandler, sbt.testing.Logger[]): sbt.testing.Task[] at ZTestRunnerNative.scala:119
[error]          method zio.test.sbt.ZTestTask$.apply(sbt.testing.TaskDef, java.lang.ClassLoader, java.lang.String, zio.ZIO, zio.test.TestArgs): zio.test.sbt.ZTestTask at ZTestRunnerNative.scala:169
[error]          method zio.test.sbt.ZTestRunnerNative.deserializeTask(java.lang.String, scala.Function1): sbt.testing.Task at ZTestRunnerNative.scala:77
[error]          method zio.test.sbt.ZTestFramework.slaveRunner(java.lang.String[], java.lang.String[], java.lang.ClassLoader, scala.Function1): sbt.testing.Runner at ZTestFramework.scala:35
[error]  private method scala.scalanative.testinterface.TestAdapterBridge.$anonfun$createRunnerFun$1(bool, scala.scalanative.testinterface.common.RunnerArgs): scala.runtime.BoxedUnit at TestAdapterBridge.scala:41
[error]          method scala.scalanative.testinterface.TestAdapterBridge$$Lambda$2.apply(java.lang.Object): java.lang.Object at TestAdapterBridge.scala:33
[error]  private method scala.scalanative.testinterface.TestAdapterBridge.createRunnerFun(bool): scala.Function1 at TestAdapterBridge.scala:33
[error]          method scala.scalanative.testinterface.TestAdapterBridge.start(): scala.runtime.BoxedUnit at TestAdapterBridge.scala:16
[error]          method scala.scalanative.testinterface.TestMain$.main(java.lang.String[]): scala.runtime.BoxedUnit at TestMain.scala:94
[error]   static method scala.scalanative.testinterface.TestMain.main(java.lang.String[]): scala.runtime.BoxedUnit at TestMain.scala:61
[error] 
[error] Unknown type org.xml.sax.ext.DefaultHandler2, referenced from:
[error]            type scala.xml.parsing.FactoryAdapter at FactoryAdapter.scala:40
[error]          method scala.xml.factory.XMLLoader.loadDocument(org.xml.sax.InputSource): scala.xml.Document at XMLLoader.scala:65
[error]          method scala.xml.XML$.loadDocument(org.xml.sax.InputSource): scala.xml.Document at XML.scala:61
[error]          method scala.xml.factory.XMLLoader.loadStringDocument(java.lang.String): scala.xml.Document at XMLLoader.scala:73
[error]          method scala.xml.XML$.loadStringDocument(java.lang.String): scala.xml.Document at XML.scala:61
[error]          method scala.xml.factory.XMLLoader.loadString(java.lang.String): scala.xml.Node at XMLLoader.scala:85
[error]          method scala.xml.XML$.loadString(java.lang.String): scala.xml.Node at XML.scala:61
[error]  private method zio.schema.codec.XmlCodec$$anon$1.$anonfun$streamDecoder$2(zio.Chunk): zio.ZIO at XmlCodec.scala:74
[error]          method zio.schema.codec.XmlCodec$$anon$1$$Lambda$2.apply(java.lang.Object): java.lang.Object at XmlCodec.scala:71
[error]          method zio.schema.codec.XmlCodec$$anon$1.streamDecoder(): zio.stream.ZPipeline at XmlCodec.scala:71
[error]          method zio.schema.codec.XmlCodec$.xmlCodec(zio.schema.codec.XmlCodec$Configuration, zio.schema.Schema): zio.schema.codec.BinaryCodec at XmlCodec.scala:59
[error]          method zio.schema.codec.XmlCodec$.xmlCodec(zio.schema.Schema): zio.schema.codec.BinaryCodec at XmlCodec.scala:56
[error]  private method zio.schema.codec.XmlCodecSpec$.$anonfun$spec$56(): zio.ZIO at XmlCodecSpec.scala:239
[error]          method zio.schema.codec.XmlCodecSpec$$$Lambda$18.apply(): java.lang.Object at XmlCodecSpec.scala:238
[error]          method zio.schema.codec.XmlCodecSpec$.spec(): zio.test.Spec at XmlCodecSpec.scala:238
[error]  private method zio.test.sbt.ZTestTask.$anonfun$execute$1(sbt.testing.EventHandler, zio.Console): zio.ZIO at ZTestRunnerNative.scala:121
[error]          method zio.test.sbt.ZTestTask$$Lambda$1.apply(java.lang.Object): java.lang.Object at ZTestRunnerNative.scala:119
[error]          method zio.test.sbt.ZTestTask.execute(sbt.testing.EventHandler, sbt.testing.Logger[]): sbt.testing.Task[] at ZTestRunnerNative.scala:119
[error]          method zio.test.sbt.ZTestTask$.apply(sbt.testing.TaskDef, java.lang.ClassLoader, java.lang.String, zio.ZIO, zio.test.TestArgs): zio.test.sbt.ZTestTask at ZTestRunnerNative.scala:169
[error]          method zio.test.sbt.ZTestRunnerNative.deserializeTask(java.lang.String, scala.Function1): sbt.testing.Task at ZTestRunnerNative.scala:77
[error]          method zio.test.sbt.ZTestFramework.slaveRunner(java.lang.String[], java.lang.String[], java.lang.ClassLoader, scala.Function1): sbt.testing.Runner at ZTestFramework.scala:35
[error]  private method scala.scalanative.testinterface.TestAdapterBridge.$anonfun$createRunnerFun$1(bool, scala.scalanative.testinterface.common.RunnerArgs): scala.runtime.BoxedUnit at TestAdapterBridge.scala:41
[error]          method scala.scalanative.testinterface.TestAdapterBridge$$Lambda$2.apply(java.lang.Object): java.lang.Object at TestAdapterBridge.scala:33
[error]  private method scala.scalanative.testinterface.TestAdapterBridge.createRunnerFun(bool): scala.Function1 at TestAdapterBridge.scala:33
[error]          method scala.scalanative.testinterface.TestAdapterBridge.start(): scala.runtime.BoxedUnit at TestAdapterBridge.scala:16
[error]          method scala.scalanative.testinterface.TestMain$.main(java.lang.String[]): scala.runtime.BoxedUnit at TestMain.scala:94
[error]   static method scala.scalanative.testinterface.TestMain.main(java.lang.String[]): scala.runtime.BoxedUnit at TestMain.scala:61
[error] 
[error] Unknown constructor org.xml.sax.ext.DefaultHandler2(), referenced from:
[error]     constructor scala.xml.parsing.FactoryAdapter() at FactoryAdapter.scala:40
[error]     constructor scala.xml.parsing.NoBindingFactoryAdapter() at NoBindingFactoryAdapter.scala:24
[error]          method scala.xml.factory.XMLLoader.adapter(): scala.xml.parsing.FactoryAdapter at XMLLoader.scala:62
[error]          method scala.xml.XML$.adapter(): scala.xml.parsing.FactoryAdapter at XML.scala:61
[error]          method scala.xml.factory.XMLLoader.loadDocument(org.xml.sax.InputSource): scala.xml.Document at XMLLoader.scala:65
[error]          method scala.xml.XML$.loadDocument(org.xml.sax.InputSource): scala.xml.Document at XML.scala:61
[error]          method scala.xml.factory.XMLLoader.loadStringDocument(java.lang.String): scala.xml.Document at XMLLoader.scala:73
[error]          method scala.xml.XML$.loadStringDocument(java.lang.String): scala.xml.Document at XML.scala:61
[error]          method scala.xml.factory.XMLLoader.loadString(java.lang.String): scala.xml.Node at XMLLoader.scala:85
[error]          method scala.xml.XML$.loadString(java.lang.String): scala.xml.Node at XML.scala:61
[error]  private method zio.schema.codec.XmlCodec$$anon$1.$anonfun$streamDecoder$2(zio.Chunk): zio.ZIO at XmlCodec.scala:74
[error]          method zio.schema.codec.XmlCodec$$anon$1$$Lambda$2.apply(java.lang.Object): java.lang.Object at XmlCodec.scala:71
[error]          method zio.schema.codec.XmlCodec$$anon$1.streamDecoder(): zio.stream.ZPipeline at XmlCodec.scala:71
[error]          method zio.schema.codec.XmlCodec$.xmlCodec(zio.schema.codec.XmlCodec$Configuration, zio.schema.Schema): zio.schema.codec.BinaryCodec at XmlCodec.scala:59
[error]          method zio.schema.codec.XmlCodec$.xmlCodec(zio.schema.Schema): zio.schema.codec.BinaryCodec at XmlCodec.scala:56
[error]  private method zio.schema.codec.XmlCodecSpec$.$anonfun$spec$56(): zio.ZIO at XmlCodecSpec.scala:239
[error]          method zio.schema.codec.XmlCodecSpec$$$Lambda$18.apply(): java.lang.Object at XmlCodecSpec.scala:238
[error]          method zio.schema.codec.XmlCodecSpec$.spec(): zio.test.Spec at XmlCodecSpec.scala:238
[error]  private method zio.test.sbt.ZTestTask.$anonfun$execute$1(sbt.testing.EventHandler, zio.Console): zio.ZIO at ZTestRunnerNative.scala:121
[error]          method zio.test.sbt.ZTestTask$$Lambda$1.apply(java.lang.Object): java.lang.Object at ZTestRunnerNative.scala:119
[error]          method zio.test.sbt.ZTestTask.execute(sbt.testing.EventHandler, sbt.testing.Logger[]): sbt.testing.Task[] at ZTestRunnerNative.scala:119
[error]          method zio.test.sbt.ZTestTask$.apply(sbt.testing.TaskDef, java.lang.ClassLoader, java.lang.String, zio.ZIO, zio.test.TestArgs): zio.test.sbt.ZTestTask at ZTestRunnerNative.scala:169
[error]          method zio.test.sbt.ZTestRunnerNative.deserializeTask(java.lang.String, scala.Function1): sbt.testing.Task at ZTestRunnerNative.scala:77
[error]          method zio.test.sbt.ZTestFramework.slaveRunner(java.lang.String[], java.lang.String[], java.lang.ClassLoader, scala.Function1): sbt.testing.Runner at ZTestFramework.scala:35
[error]  private method scala.scalanative.testinterface.TestAdapterBridge.$anonfun$createRunnerFun$1(bool, scala.scalanative.testinterface.common.RunnerArgs): scala.runtime.BoxedUnit at TestAdapterBridge.scala:41
[error]          method scala.scalanative.testinterface.TestAdapterBridge$$Lambda$2.apply(java.lang.Object): java.lang.Object at TestAdapterBridge.scala:33
[error]  private method scala.scalanative.testinterface.TestAdapterBridge.createRunnerFun(bool): scala.Function1 at TestAdapterBridge.scala:33
[error]          method scala.scalanative.testinterface.TestAdapterBridge.start(): scala.runtime.BoxedUnit at TestAdapterBridge.scala:16
[error]          method scala.scalanative.testinterface.TestMain$.main(java.lang.String[]): scala.runtime.BoxedUnit at TestMain.scala:94
[error]   static method scala.scalanative.testinterface.TestMain.main(java.lang.String[]): scala.runtime.BoxedUnit at TestMain.scala:61
[error] 
[error] Unknown type org.xml.sax.ErrorHandler, referenced from:
[error]          method scala.xml.parsing.FactoryAdapter.loadDocument(org.xml.sax.InputSource, org.xml.sax.XMLReader): scala.xml.Document at FactoryAdapter.scala:122
[error]          method scala.xml.factory.XMLLoader.loadDocument(org.xml.sax.InputSource): scala.xml.Document at XMLLoader.scala:65
[error]          method scala.xml.XML$.loadDocument(org.xml.sax.InputSource): scala.xml.Document at XML.scala:61
[error]          method scala.xml.factory.XMLLoader.loadStringDocument(java.lang.String): scala.xml.Document at XMLLoader.scala:73
[error]          method scala.xml.XML$.loadStringDocument(java.lang.String): scala.xml.Document at XML.scala:61
[error]          method scala.xml.factory.XMLLoader.loadString(java.lang.String): scala.xml.Node at XMLLoader.scala:85
[error]          method scala.xml.XML$.loadString(java.lang.String): scala.xml.Node at XML.scala:61
[error]  private method zio.schema.codec.XmlCodec$$anon$1.$anonfun$streamDecoder$2(zio.Chunk): zio.ZIO at XmlCodec.scala:74
[error]          method zio.schema.codec.XmlCodec$$anon$1$$Lambda$2.apply(java.lang.Object): java.lang.Object at XmlCodec.scala:71
[error]          method zio.schema.codec.XmlCodec$$anon$1.streamDecoder(): zio.stream.ZPipeline at XmlCodec.scala:71
[error]          method zio.schema.codec.XmlCodec$.xmlCodec(zio.schema.codec.XmlCodec$Configuration, zio.schema.Schema): zio.schema.codec.BinaryCodec at XmlCodec.scala:59
[error]          method zio.schema.codec.XmlCodec$.xmlCodec(zio.schema.Schema): zio.schema.codec.BinaryCodec at XmlCodec.scala:56
[error]  private method zio.schema.codec.XmlCodecSpec$.$anonfun$spec$56(): zio.ZIO at XmlCodecSpec.scala:239
[error]          method zio.schema.codec.XmlCodecSpec$$$Lambda$18.apply(): java.lang.Object at XmlCodecSpec.scala:238
[error]          method zio.schema.codec.XmlCodecSpec$.spec(): zio.test.Spec at XmlCodecSpec.scala:238
[error]  private method zio.test.sbt.ZTestTask.$anonfun$execute$1(sbt.testing.EventHandler, zio.Console): zio.ZIO at ZTestRunnerNative.scala:121
[error]          method zio.test.sbt.ZTestTask$$Lambda$1.apply(java.lang.Object): java.lang.Object at ZTestRunnerNative.scala:119
[error]          method zio.test.sbt.ZTestTask.execute(sbt.testing.EventHandler, sbt.testing.Logger[]): sbt.testing.Task[] at ZTestRunnerNative.scala:119
[error]          method zio.test.sbt.ZTestTask$.apply(sbt.testing.TaskDef, java.lang.ClassLoader, java.lang.String, zio.ZIO, zio.test.TestArgs): zio.test.sbt.ZTestTask at ZTestRunnerNative.scala:169
[error]          method zio.test.sbt.ZTestRunnerNative.deserializeTask(java.lang.String, scala.Function1): sbt.testing.Task at ZTestRunnerNative.scala:77
[error]          method zio.test.sbt.ZTestFramework.slaveRunner(java.lang.String[], java.lang.String[], java.lang.ClassLoader, scala.Function1): sbt.testing.Runner at ZTestFramework.scala:35
[error]  private method scala.scalanative.testinterface.TestAdapterBridge.$anonfun$createRunnerFun$1(bool, scala.scalanative.testinterface.common.RunnerArgs): scala.runtime.BoxedUnit at TestAdapterBridge.scala:41
[error]          method scala.scalanative.testinterface.TestAdapterBridge$$Lambda$2.apply(java.lang.Object): java.lang.Object at TestAdapterBridge.scala:33
[error]  private method scala.scalanative.testinterface.TestAdapterBridge.createRunnerFun(bool): scala.Function1 at TestAdapterBridge.scala:33
[error]          method scala.scalanative.testinterface.TestAdapterBridge.start(): scala.runtime.BoxedUnit at TestAdapterBridge.scala:16
[error]          method scala.scalanative.testinterface.TestMain$.main(java.lang.String[]): scala.runtime.BoxedUnit at TestMain.scala:94
[error]   static method scala.scalanative.testinterface.TestMain.main(java.lang.String[]): scala.runtime.BoxedUnit at TestMain.scala:61
[error] 
[error] Unknown type org.xml.sax.InputSource, referenced from:
[error]          method scala.xml.factory.XMLLoader.loadStringDocument(java.lang.String): scala.xml.Document at XMLLoader.scala:73
[error]          method scala.xml.XML$.loadStringDocument(java.lang.String): scala.xml.Document at XML.scala:61
[error]          method scala.xml.factory.XMLLoader.loadString(java.lang.String): scala.xml.Node at XMLLoader.scala:85
[error]          method scala.xml.XML$.loadString(java.lang.String): scala.xml.Node at XML.scala:61
[error]  private method zio.schema.codec.XmlCodec$$anon$1.$anonfun$streamDecoder$2(zio.Chunk): zio.ZIO at XmlCodec.scala:74
[error]          method zio.schema.codec.XmlCodec$$anon$1$$Lambda$2.apply(java.lang.Object): java.lang.Object at XmlCodec.scala:71
[error]          method zio.schema.codec.XmlCodec$$anon$1.streamDecoder(): zio.stream.ZPipeline at XmlCodec.scala:71
[error]          method zio.schema.codec.XmlCodec$.xmlCodec(zio.schema.codec.XmlCodec$Configuration, zio.schema.Schema): zio.schema.codec.BinaryCodec at XmlCodec.scala:59
[error]          method zio.schema.codec.XmlCodec$.xmlCodec(zio.schema.Schema): zio.schema.codec.BinaryCodec at XmlCodec.scala:56
[error]  private method zio.schema.codec.XmlCodecSpec$.$anonfun$spec$56(): zio.ZIO at XmlCodecSpec.scala:239
[error]          method zio.schema.codec.XmlCodecSpec$$$Lambda$18.apply(): java.lang.Object at XmlCodecSpec.scala:238
[error]          method zio.schema.codec.XmlCodecSpec$.spec(): zio.test.Spec at XmlCodecSpec.scala:238
[error]  private method zio.test.sbt.ZTestTask.$anonfun$execute$1(sbt.testing.EventHandler, zio.Console): zio.ZIO at ZTestRunnerNative.scala:121
[error]          method zio.test.sbt.ZTestTask$$Lambda$1.apply(java.lang.Object): java.lang.Object at ZTestRunnerNative.scala:119
[error]          method zio.test.sbt.ZTestTask.execute(sbt.testing.EventHandler, sbt.testing.Logger[]): sbt.testing.Task[] at ZTestRunnerNative.scala:119
[error]          method zio.test.sbt.ZTestTask$.apply(sbt.testing.TaskDef, java.lang.ClassLoader, java.lang.String, zio.ZIO, zio.test.TestArgs): zio.test.sbt.ZTestTask at ZTestRunnerNative.scala:169
[error]          method zio.test.sbt.ZTestRunnerNative.deserializeTask(java.lang.String, scala.Function1): sbt.testing.Task at ZTestRunnerNative.scala:77
[error]          method zio.test.sbt.ZTestFramework.slaveRunner(java.lang.String[], java.lang.String[], java.lang.ClassLoader, scala.Function1): sbt.testing.Runner at ZTestFramework.scala:35
[error]  private method scala.scalanative.testinterface.TestAdapterBridge.$anonfun$createRunnerFun$1(bool, scala.scalanative.testinterface.common.RunnerArgs): scala.runtime.BoxedUnit at TestAdapterBridge.scala:41
[error]          method scala.scalanative.testinterface.TestAdapterBridge$$Lambda$2.apply(java.lang.Object): java.lang.Object at TestAdapterBridge.scala:33
[error]  private method scala.scalanative.testinterface.TestAdapterBridge.createRunnerFun(bool): scala.Function1 at TestAdapterBridge.scala:33
[error]          method scala.scalanative.testinterface.TestAdapterBridge.start(): scala.runtime.BoxedUnit at TestAdapterBridge.scala:16
[error]          method scala.scalanative.testinterface.TestMain$.main(java.lang.String[]): scala.runtime.BoxedUnit at TestMain.scala:94
[error]   static method scala.scalanative.testinterface.TestMain.main(java.lang.String[]): scala.runtime.BoxedUnit at TestMain.scala:61
[error] 
[error] Unknown method java.lang.Class.getDeclaredField(java.lang.String): java.lang.reflect.Field, referenced from:
[error]  private method zio.schema.codec.XmlCodec$.$anonfun$encodeRecord$1(java.lang.Object, zio.schema.codec.XmlCodec$Configuration, scala.runtime.ObjectRef, scala.collection.mutable.ListBuffer, zio.schema.Schema$Field): java.lang.Object at XmlCodec.scala:212
[error]          method zio.schema.codec.XmlCodec$$$Lambda$4.apply(java.lang.Object): java.lang.Object at XmlCodec.scala:208
[error]  private method zio.schema.codec.XmlCodec$.encodeRecord(zio.schema.Schema$Record, java.lang.Object, java.lang.String, zio.schema.codec.XmlCodec$Configuration): scala.xml.Elem at XmlCodec.scala:208
[error]          method zio.schema.codec.XmlCodec$.zio$schema$codec$XmlCodec$$encodeXml(zio.schema.Schema, java.lang.Object, java.lang.String, zio.schema.codec.XmlCodec$Configuration): scala.xml.Elem at XmlCodec.scala:153
[error]  private method zio.schema.codec.XmlCodec$$anon$1.$anonfun$streamEncoder$3(java.lang.Object): scala.xml.Elem at XmlCodec.scala:113
[error]          method zio.schema.codec.XmlCodec$$anon$1$$Lambda$11.apply(java.lang.Object): java.lang.Object at XmlCodec.scala:113
[error]  private method zio.schema.codec.XmlCodec$$anon$1.$anonfun$streamEncoder$1(zio.Chunk): zio.ZIO at XmlCodec.scala:113
[error]          method zio.schema.codec.XmlCodec$$anon$1$$Lambda$3.apply(java.lang.Object): java.lang.Object at XmlCodec.scala:108
[error]          method zio.schema.codec.XmlCodec$$anon$1.streamEncoder(): zio.stream.ZPipeline at XmlCodec.scala:108
[error]          method zio.schema.codec.XmlCodec$.xmlCodec(zio.schema.codec.XmlCodec$Configuration, zio.schema.Schema): zio.schema.codec.BinaryCodec at XmlCodec.scala:59
[error]          method zio.schema.codec.XmlCodec$.xmlCodec(zio.schema.Schema): zio.schema.codec.BinaryCodec at XmlCodec.scala:56
[error]  private method zio.schema.codec.XmlCodecSpec$.$anonfun$spec$56(): zio.ZIO at XmlCodecSpec.scala:239
[error]          method zio.schema.codec.XmlCodecSpec$$$Lambda$18.apply(): java.lang.Object at XmlCodecSpec.scala:238
[error]          method zio.schema.codec.XmlCodecSpec$.spec(): zio.test.Spec at XmlCodecSpec.scala:238
[error]  private method zio.test.sbt.ZTestTask.$anonfun$execute$1(sbt.testing.EventHandler, zio.Console): zio.ZIO at ZTestRunnerNative.scala:121
[error]          method zio.test.sbt.ZTestTask$$Lambda$1.apply(java.lang.Object): java.lang.Object at ZTestRunnerNative.scala:119
[error]          method zio.test.sbt.ZTestTask.execute(sbt.testing.EventHandler, sbt.testing.Logger[]): sbt.testing.Task[] at ZTestRunnerNative.scala:119
[error]          method zio.test.sbt.ZTestTask$.apply(sbt.testing.TaskDef, java.lang.ClassLoader, java.lang.String, zio.ZIO, zio.test.TestArgs): zio.test.sbt.ZTestTask at ZTestRunnerNative.scala:169
[error]          method zio.test.sbt.ZTestRunnerNative.deserializeTask(java.lang.String, scala.Function1): sbt.testing.Task at ZTestRunnerNative.scala:77
[error]          method zio.test.sbt.ZTestFramework.slaveRunner(java.lang.String[], java.lang.String[], java.lang.ClassLoader, scala.Function1): sbt.testing.Runner at ZTestFramework.scala:35
[error]  private method scala.scalanative.testinterface.TestAdapterBridge.$anonfun$createRunnerFun$1(bool, scala.scalanative.testinterface.common.RunnerArgs): scala.runtime.BoxedUnit at TestAdapterBridge.scala:41
[error]          method scala.scalanative.testinterface.TestAdapterBridge$$Lambda$2.apply(java.lang.Object): java.lang.Object at TestAdapterBridge.scala:33
[error]  private method scala.scalanative.testinterface.TestAdapterBridge.createRunnerFun(bool): scala.Function1 at TestAdapterBridge.scala:33
[error]          method scala.scalanative.testinterface.TestAdapterBridge.start(): scala.runtime.BoxedUnit at TestAdapterBridge.scala:16
[error]          method scala.scalanative.testinterface.TestMain$.main(java.lang.String[]): scala.runtime.BoxedUnit at TestMain.scala:94
[error]   static method scala.scalanative.testinterface.TestMain.main(java.lang.String[]): scala.runtime.BoxedUnit at TestMain.scala:61
[error] 
[error] Unknown constructor org.xml.sax.InputSource(java.io.Reader), referenced from:
[error]          method scala.xml.Source$.fromReader(java.io.Reader): org.xml.sax.InputSource at XML.scala:29
[error]          method scala.xml.Source$.fromString(java.lang.String): org.xml.sax.InputSource at XML.scala:28
[error]          method scala.xml.factory.XMLLoader.loadStringDocument(java.lang.String): scala.xml.Document at XMLLoader.scala:73
[error]          method scala.xml.XML$.loadStringDocument(java.lang.String): scala.xml.Document at XML.scala:61
[error]          method scala.xml.factory.XMLLoader.loadString(java.lang.String): scala.xml.Node at XMLLoader.scala:85
[error]          method scala.xml.XML$.loadString(java.lang.String): scala.xml.Node at XML.scala:61
[error]  private method zio.schema.codec.XmlCodec$$anon$1.$anonfun$streamDecoder$2(zio.Chunk): zio.ZIO at XmlCodec.scala:74
[error]          method zio.schema.codec.XmlCodec$$anon$1$$Lambda$2.apply(java.lang.Object): java.lang.Object at XmlCodec.scala:71
[error]          method zio.schema.codec.XmlCodec$$anon$1.streamDecoder(): zio.stream.ZPipeline at XmlCodec.scala:71
[error]          method zio.schema.codec.XmlCodec$.xmlCodec(zio.schema.codec.XmlCodec$Configuration, zio.schema.Schema): zio.schema.codec.BinaryCodec at XmlCodec.scala:59
[error]          method zio.schema.codec.XmlCodec$.xmlCodec(zio.schema.Schema): zio.schema.codec.BinaryCodec at XmlCodec.scala:56
[error]  private method zio.schema.codec.XmlCodecSpec$.$anonfun$spec$56(): zio.ZIO at XmlCodecSpec.scala:239
[error]          method zio.schema.codec.XmlCodecSpec$$$Lambda$18.apply(): java.lang.Object at XmlCodecSpec.scala:238
[error]          method zio.schema.codec.XmlCodecSpec$.spec(): zio.test.Spec at XmlCodecSpec.scala:238
[error]  private method zio.test.sbt.ZTestTask.$anonfun$execute$1(sbt.testing.EventHandler, zio.Console): zio.ZIO at ZTestRunnerNative.scala:121
[error]          method zio.test.sbt.ZTestTask$$Lambda$1.apply(java.lang.Object): java.lang.Object at ZTestRunnerNative.scala:119
[error]          method zio.test.sbt.ZTestTask.execute(sbt.testing.EventHandler, sbt.testing.Logger[]): sbt.testing.Task[] at ZTestRunnerNative.scala:119
[error]          method zio.test.sbt.ZTestTask$.apply(sbt.testing.TaskDef, java.lang.ClassLoader, java.lang.String, zio.ZIO, zio.test.TestArgs): zio.test.sbt.ZTestTask at ZTestRunnerNative.scala:169
[error]          method zio.test.sbt.ZTestRunnerNative.deserializeTask(java.lang.String, scala.Function1): sbt.testing.Task at ZTestRunnerNative.scala:77
[error]          method zio.test.sbt.ZTestFramework.slaveRunner(java.lang.String[], java.lang.String[], java.lang.ClassLoader, scala.Function1): sbt.testing.Runner at ZTestFramework.scala:35
[error]  private method scala.scalanative.testinterface.TestAdapterBridge.$anonfun$createRunnerFun$1(bool, scala.scalanative.testinterface.common.RunnerArgs): scala.runtime.BoxedUnit at TestAdapterBridge.scala:41
[error]          method scala.scalanative.testinterface.TestAdapterBridge$$Lambda$2.apply(java.lang.Object): java.lang.Object at TestAdapterBridge.scala:33
[error]  private method scala.scalanative.testinterface.TestAdapterBridge.createRunnerFun(bool): scala.Function1 at TestAdapterBridge.scala:33
[error]          method scala.scalanative.testinterface.TestAdapterBridge.start(): scala.runtime.BoxedUnit at TestAdapterBridge.scala:16
[error]          method scala.scalanative.testinterface.TestMain$.main(java.lang.String[]): scala.runtime.BoxedUnit at TestMain.scala:94
[error]   static method scala.scalanative.testinterface.TestMain.main(java.lang.String[]): scala.runtime.BoxedUnit at TestMain.scala:61
[error] 
[error] Unknown type org.xml.sax.EntityResolver, referenced from:
[error]          method scala.xml.parsing.FactoryAdapter.loadDocument(org.xml.sax.InputSource, org.xml.sax.XMLReader): scala.xml.Document at FactoryAdapter.scala:120
[error]          method scala.xml.factory.XMLLoader.loadDocument(org.xml.sax.InputSource): scala.xml.Document at XMLLoader.scala:65
[error]          method scala.xml.XML$.loadDocument(org.xml.sax.InputSource): scala.xml.Document at XML.scala:61
[error]          method scala.xml.factory.XMLLoader.loadStringDocument(java.lang.String): scala.xml.Document at XMLLoader.scala:73
[error]          method scala.xml.XML$.loadStringDocument(java.lang.String): scala.xml.Document at XML.scala:61
[error]          method scala.xml.factory.XMLLoader.loadString(java.lang.String): scala.xml.Node at XMLLoader.scala:85
[error]          method scala.xml.XML$.loadString(java.lang.String): scala.xml.Node at XML.scala:61
[error]  private method zio.schema.codec.XmlCodec$$anon$1.$anonfun$streamDecoder$2(zio.Chunk): zio.ZIO at XmlCodec.scala:74
[error]          method zio.schema.codec.XmlCodec$$anon$1$$Lambda$2.apply(java.lang.Object): java.lang.Object at XmlCodec.scala:71
[error]          method zio.schema.codec.XmlCodec$$anon$1.streamDecoder(): zio.stream.ZPipeline at XmlCodec.scala:71
[error]          method zio.schema.codec.XmlCodec$.xmlCodec(zio.schema.codec.XmlCodec$Configuration, zio.schema.Schema): zio.schema.codec.BinaryCodec at XmlCodec.scala:59
[error]          method zio.schema.codec.XmlCodec$.xmlCodec(zio.schema.Schema): zio.schema.codec.BinaryCodec at XmlCodec.scala:56
[error]  private method zio.schema.codec.XmlCodecSpec$.$anonfun$spec$56(): zio.ZIO at XmlCodecSpec.scala:239
[error]          method zio.schema.codec.XmlCodecSpec$$$Lambda$18.apply(): java.lang.Object at XmlCodecSpec.scala:238
[error]          method zio.schema.codec.XmlCodecSpec$.spec(): zio.test.Spec at XmlCodecSpec.scala:238
[error]  private method zio.test.sbt.ZTestTask.$anonfun$execute$1(sbt.testing.EventHandler, zio.Console): zio.ZIO at ZTestRunnerNative.scala:121
[error]          method zio.test.sbt.ZTestTask$$Lambda$1.apply(java.lang.Object): java.lang.Object at ZTestRunnerNative.scala:119
[error]          method zio.test.sbt.ZTestTask.execute(sbt.testing.EventHandler, sbt.testing.Logger[]): sbt.testing.Task[] at ZTestRunnerNative.scala:119
[error]          method zio.test.sbt.ZTestTask$.apply(sbt.testing.TaskDef, java.lang.ClassLoader, java.lang.String, zio.ZIO, zio.test.TestArgs): zio.test.sbt.ZTestTask at ZTestRunnerNative.scala:169
[error]          method zio.test.sbt.ZTestRunnerNative.deserializeTask(java.lang.String, scala.Function1): sbt.testing.Task at ZTestRunnerNative.scala:77
[error]          method zio.test.sbt.ZTestFramework.slaveRunner(java.lang.String[], java.lang.String[], java.lang.ClassLoader, scala.Function1): sbt.testing.Runner at ZTestFramework.scala:35
[error]  private method scala.scalanative.testinterface.TestAdapterBridge.$anonfun$createRunnerFun$1(bool, scala.scalanative.testinterface.common.RunnerArgs): scala.runtime.BoxedUnit at TestAdapterBridge.scala:41
[error]          method scala.scalanative.testinterface.TestAdapterBridge$$Lambda$2.apply(java.lang.Object): java.lang.Object at TestAdapterBridge.scala:33
[error]  private method scala.scalanative.testinterface.TestAdapterBridge.createRunnerFun(bool): scala.Function1 at TestAdapterBridge.scala:33
[error]          method scala.scalanative.testinterface.TestAdapterBridge.start(): scala.runtime.BoxedUnit at TestAdapterBridge.scala:16
[error]          method scala.scalanative.testinterface.TestMain$.main(java.lang.String[]): scala.runtime.BoxedUnit at TestMain.scala:94
[error]   static method scala.scalanative.testinterface.TestMain.main(java.lang.String[]): scala.runtime.BoxedUnit at TestMain.scala:61
[error] 
[error] Unknown type org.xml.sax.ContentHandler, referenced from:
[error]          method scala.xml.parsing.FactoryAdapter.loadDocument(org.xml.sax.InputSource, org.xml.sax.XMLReader): scala.xml.Document at FactoryAdapter.scala:117
[error]          method scala.xml.factory.XMLLoader.loadDocument(org.xml.sax.InputSource): scala.xml.Document at XMLLoader.scala:65
[error]          method scala.xml.XML$.loadDocument(org.xml.sax.InputSource): scala.xml.Document at XML.scala:61
[error]          method scala.xml.factory.XMLLoader.loadStringDocument(java.lang.String): scala.xml.Document at XMLLoader.scala:73
[error]          method scala.xml.XML$.loadStringDocument(java.lang.String): scala.xml.Document at XML.scala:61
[error]          method scala.xml.factory.XMLLoader.loadString(java.lang.String): scala.xml.Node at XMLLoader.scala:85
[error]          method scala.xml.XML$.loadString(java.lang.String): scala.xml.Node at XML.scala:61
[error]  private method zio.schema.codec.XmlCodec$$anon$1.$anonfun$streamDecoder$2(zio.Chunk): zio.ZIO at XmlCodec.scala:74
[error]          method zio.schema.codec.XmlCodec$$anon$1$$Lambda$2.apply(java.lang.Object): java.lang.Object at XmlCodec.scala:71
[error]          method zio.schema.codec.XmlCodec$$anon$1.streamDecoder(): zio.stream.ZPipeline at XmlCodec.scala:71
[error]          method zio.schema.codec.XmlCodec$.xmlCodec(zio.schema.codec.XmlCodec$Configuration, zio.schema.Schema): zio.schema.codec.BinaryCodec at XmlCodec.scala:59
[error]          method zio.schema.codec.XmlCodec$.xmlCodec(zio.schema.Schema): zio.schema.codec.BinaryCodec at XmlCodec.scala:56
[error]  private method zio.schema.codec.XmlCodecSpec$.$anonfun$spec$56(): zio.ZIO at XmlCodecSpec.scala:239
[error]          method zio.schema.codec.XmlCodecSpec$$$Lambda$18.apply(): java.lang.Object at XmlCodecSpec.scala:238
[error]          method zio.schema.codec.XmlCodecSpec$.spec(): zio.test.Spec at XmlCodecSpec.scala:238
[error]  private method zio.test.sbt.ZTestTask.$anonfun$execute$1(sbt.testing.EventHandler, zio.Console): zio.ZIO at ZTestRunnerNative.scala:121
[error]          method zio.test.sbt.ZTestTask$$Lambda$1.apply(java.lang.Object): java.lang.Object at ZTestRunnerNative.scala:119
[error]          method zio.test.sbt.ZTestTask.execute(sbt.testing.EventHandler, sbt.testing.Logger[]): sbt.testing.Task[] at ZTestRunnerNative.scala:119
[error]          method zio.test.sbt.ZTestTask$.apply(sbt.testing.TaskDef, java.lang.ClassLoader, java.lang.String, zio.ZIO, zio.test.TestArgs): zio.test.sbt.ZTestTask at ZTestRunnerNative.scala:169
[error]          method zio.test.sbt.ZTestRunnerNative.deserializeTask(java.lang.String, scala.Function1): sbt.testing.Task at ZTestRunnerNative.scala:77
[error]          method zio.test.sbt.ZTestFramework.slaveRunner(java.lang.String[], java.lang.String[], java.lang.ClassLoader, scala.Function1): sbt.testing.Runner at ZTestFramework.scala:35
[error]  private method scala.scalanative.testinterface.TestAdapterBridge.$anonfun$createRunnerFun$1(bool, scala.scalanative.testinterface.common.RunnerArgs): scala.runtime.BoxedUnit at TestAdapterBridge.scala:41
[error]          method scala.scalanative.testinterface.TestAdapterBridge$$Lambda$2.apply(java.lang.Object): java.lang.Object at TestAdapterBridge.scala:33
[error]  private method scala.scalanative.testinterface.TestAdapterBridge.createRunnerFun(bool): scala.Function1 at TestAdapterBridge.scala:33
[error]          method scala.scalanative.testinterface.TestAdapterBridge.start(): scala.runtime.BoxedUnit at TestAdapterBridge.scala:16
[error]          method scala.scalanative.testinterface.TestMain$.main(java.lang.String[]): scala.runtime.BoxedUnit at TestMain.scala:94
[error]   static method scala.scalanative.testinterface.TestMain.main(java.lang.String[]): scala.runtime.BoxedUnit at TestMain.scala:61
[error] 
[error] Unknown type org.xml.sax.DTDHandler, referenced from:
[error]          method scala.xml.parsing.FactoryAdapter.loadDocument(org.xml.sax.InputSource, org.xml.sax.XMLReader): scala.xml.Document at FactoryAdapter.scala:118
[error]          method scala.xml.factory.XMLLoader.loadDocument(org.xml.sax.InputSource): scala.xml.Document at XMLLoader.scala:65
[error]          method scala.xml.XML$.loadDocument(org.xml.sax.InputSource): scala.xml.Document at XML.scala:61
[error]          method scala.xml.factory.XMLLoader.loadStringDocument(java.lang.String): scala.xml.Document at XMLLoader.scala:73
[error]          method scala.xml.XML$.loadStringDocument(java.lang.String): scala.xml.Document at XML.scala:61
[error]          method scala.xml.factory.XMLLoader.loadString(java.lang.String): scala.xml.Node at XMLLoader.scala:85
[error]          method scala.xml.XML$.loadString(java.lang.String): scala.xml.Node at XML.scala:61
[error]  private method zio.schema.codec.XmlCodec$$anon$1.$anonfun$streamDecoder$2(zio.Chunk): zio.ZIO at XmlCodec.scala:74
[error]          method zio.schema.codec.XmlCodec$$anon$1$$Lambda$2.apply(java.lang.Object): java.lang.Object at XmlCodec.scala:71
[error]          method zio.schema.codec.XmlCodec$$anon$1.streamDecoder(): zio.stream.ZPipeline at XmlCodec.scala:71
[error]          method zio.schema.codec.XmlCodec$.xmlCodec(zio.schema.codec.XmlCodec$Configuration, zio.schema.Schema): zio.schema.codec.BinaryCodec at XmlCodec.scala:59
[error]          method zio.schema.codec.XmlCodec$.xmlCodec(zio.schema.Schema): zio.schema.codec.BinaryCodec at XmlCodec.scala:56
[error]  private method zio.schema.codec.XmlCodecSpec$.$anonfun$spec$56(): zio.ZIO at XmlCodecSpec.scala:239
[error]          method zio.schema.codec.XmlCodecSpec$$$Lambda$18.apply(): java.lang.Object at XmlCodecSpec.scala:238
[error]          method zio.schema.codec.XmlCodecSpec$.spec(): zio.test.Spec at XmlCodecSpec.scala:238
[error]  private method zio.test.sbt.ZTestTask.$anonfun$execute$1(sbt.testing.EventHandler, zio.Console): zio.ZIO at ZTestRunnerNative.scala:121
[error]          method zio.test.sbt.ZTestTask$$Lambda$1.apply(java.lang.Object): java.lang.Object at ZTestRunnerNative.scala:119
[error]          method zio.test.sbt.ZTestTask.execute(sbt.testing.EventHandler, sbt.testing.Logger[]): sbt.testing.Task[] at ZTestRunnerNative.scala:119
[error]          method zio.test.sbt.ZTestTask$.apply(sbt.testing.TaskDef, java.lang.ClassLoader, java.lang.String, zio.ZIO, zio.test.TestArgs): zio.test.sbt.ZTestTask at ZTestRunnerNative.scala:169
[error]          method zio.test.sbt.ZTestRunnerNative.deserializeTask(java.lang.String, scala.Function1): sbt.testing.Task at ZTestRunnerNative.scala:77
[error]          method zio.test.sbt.ZTestFramework.slaveRunner(java.lang.String[], java.lang.String[], java.lang.ClassLoader, scala.Function1): sbt.testing.Runner at ZTestFramework.scala:35
[error]  private method scala.scalanative.testinterface.TestAdapterBridge.$anonfun$createRunnerFun$1(bool, scala.scalanative.testinterface.common.RunnerArgs): scala.runtime.BoxedUnit at TestAdapterBridge.scala:41
[error]          method scala.scalanative.testinterface.TestAdapterBridge$$Lambda$2.apply(java.lang.Object): java.lang.Object at TestAdapterBridge.scala:33
[error]  private method scala.scalanative.testinterface.TestAdapterBridge.createRunnerFun(bool): scala.Function1 at TestAdapterBridge.scala:33
[error]          method scala.scalanative.testinterface.TestAdapterBridge.start(): scala.runtime.BoxedUnit at TestAdapterBridge.scala:16
[error]          method scala.scalanative.testinterface.TestMain$.main(java.lang.String[]): scala.runtime.BoxedUnit at TestMain.scala:94
[error]   static method scala.scalanative.testinterface.TestMain.main(java.lang.String[]): scala.runtime.BoxedUnit at TestMain.scala:61
[error] 
[error] Unknown type org.xml.sax.SAXNotSupportedException, referenced from:
[error]          method scala.xml.parsing.FactoryAdapter.loadDocument(org.xml.sax.InputSource, org.xml.sax.XMLReader): scala.xml.Document at FactoryAdapter.scala:126
[error]          method scala.xml.factory.XMLLoader.loadDocument(org.xml.sax.InputSource): scala.xml.Document at XMLLoader.scala:65
[error]          method scala.xml.XML$.loadDocument(org.xml.sax.InputSource): scala.xml.Document at XML.scala:61
[error]          method scala.xml.factory.XMLLoader.loadStringDocument(java.lang.String): scala.xml.Document at XMLLoader.scala:73
[error]          method scala.xml.XML$.loadStringDocument(java.lang.String): scala.xml.Document at XML.scala:61
[error]          method scala.xml.factory.XMLLoader.loadString(java.lang.String): scala.xml.Node at XMLLoader.scala:85
[error]          method scala.xml.XML$.loadString(java.lang.String): scala.xml.Node at XML.scala:61
[error]  private method zio.schema.codec.XmlCodec$$anon$1.$anonfun$streamDecoder$2(zio.Chunk): zio.ZIO at XmlCodec.scala:74
[error]          method zio.schema.codec.XmlCodec$$anon$1$$Lambda$2.apply(java.lang.Object): java.lang.Object at XmlCodec.scala:71
[error]          method zio.schema.codec.XmlCodec$$anon$1.streamDecoder(): zio.stream.ZPipeline at XmlCodec.scala:71
[error]          method zio.schema.codec.XmlCodec$.xmlCodec(zio.schema.codec.XmlCodec$Configuration, zio.schema.Schema): zio.schema.codec.BinaryCodec at XmlCodec.scala:59
[error]          method zio.schema.codec.XmlCodec$.xmlCodec(zio.schema.Schema): zio.schema.codec.BinaryCodec at XmlCodec.scala:56
[error]  private method zio.schema.codec.XmlCodecSpec$.$anonfun$spec$56(): zio.ZIO at XmlCodecSpec.scala:239
[error]          method zio.schema.codec.XmlCodecSpec$$$Lambda$18.apply(): java.lang.Object at XmlCodecSpec.scala:238
[error]          method zio.schema.codec.XmlCodecSpec$.spec(): zio.test.Spec at XmlCodecSpec.scala:238
[error]  private method zio.test.sbt.ZTestTask.$anonfun$execute$1(sbt.testing.EventHandler, zio.Console): zio.ZIO at ZTestRunnerNative.scala:121
[error]          method zio.test.sbt.ZTestTask$$Lambda$1.apply(java.lang.Object): java.lang.Object at ZTestRunnerNative.scala:119
[error]          method zio.test.sbt.ZTestTask.execute(sbt.testing.EventHandler, sbt.testing.Logger[]): sbt.testing.Task[] at ZTestRunnerNative.scala:119
[error]          method zio.test.sbt.ZTestTask$.apply(sbt.testing.TaskDef, java.lang.ClassLoader, java.lang.String, zio.ZIO, zio.test.TestArgs): zio.test.sbt.ZTestTask at ZTestRunnerNative.scala:169
[error]          method zio.test.sbt.ZTestRunnerNative.deserializeTask(java.lang.String, scala.Function1): sbt.testing.Task at ZTestRunnerNative.scala:77
[error]          method zio.test.sbt.ZTestFramework.slaveRunner(java.lang.String[], java.lang.String[], java.lang.ClassLoader, scala.Function1): sbt.testing.Runner at ZTestFramework.scala:35
[error]  private method scala.scalanative.testinterface.TestAdapterBridge.$anonfun$createRunnerFun$1(bool, scala.scalanative.testinterface.common.RunnerArgs): scala.runtime.BoxedUnit at TestAdapterBridge.scala:41
[error]          method scala.scalanative.testinterface.TestAdapterBridge$$Lambda$2.apply(java.lang.Object): java.lang.Object at TestAdapterBridge.scala:33
[error]  private method scala.scalanative.testinterface.TestAdapterBridge.createRunnerFun(bool): scala.Function1 at TestAdapterBridge.scala:33
[error]          method scala.scalanative.testinterface.TestAdapterBridge.start(): scala.runtime.BoxedUnit at TestAdapterBridge.scala:16
[error]          method scala.scalanative.testinterface.TestMain$.main(java.lang.String[]): scala.runtime.BoxedUnit at TestMain.scala:94
[error]   static method scala.scalanative.testinterface.TestMain.main(java.lang.String[]): scala.runtime.BoxedUnit at TestMain.scala:61
[error] 
[error] Unknown type org.xml.sax.XMLReader, referenced from:
[error]          method scala.xml.factory.XMLLoader.loadDocument(org.xml.sax.InputSource): scala.xml.Document at XMLLoader.scala:65
[error]          method scala.xml.XML$.loadDocument(org.xml.sax.InputSource): scala.xml.Document at XML.scala:61
[error]          method scala.xml.factory.XMLLoader.loadStringDocument(java.lang.String): scala.xml.Document at XMLLoader.scala:73
[error]          method scala.xml.XML$.loadStringDocument(java.lang.String): scala.xml.Document at XML.scala:61
[error]          method scala.xml.factory.XMLLoader.loadString(java.lang.String): scala.xml.Node at XMLLoader.scala:85
[error]          method scala.xml.XML$.loadString(java.lang.String): scala.xml.Node at XML.scala:61
[error]  private method zio.schema.codec.XmlCodec$$anon$1.$anonfun$streamDecoder$2(zio.Chunk): zio.ZIO at XmlCodec.scala:74
[error]          method zio.schema.codec.XmlCodec$$anon$1$$Lambda$2.apply(java.lang.Object): java.lang.Object at XmlCodec.scala:71
[error]          method zio.schema.codec.XmlCodec$$anon$1.streamDecoder(): zio.stream.ZPipeline at XmlCodec.scala:71
[error]          method zio.schema.codec.XmlCodec$.xmlCodec(zio.schema.codec.XmlCodec$Configuration, zio.schema.Schema): zio.schema.codec.BinaryCodec at XmlCodec.scala:59
[error]          method zio.schema.codec.XmlCodec$.xmlCodec(zio.schema.Schema): zio.schema.codec.BinaryCodec at XmlCodec.scala:56
[error]  private method zio.schema.codec.XmlCodecSpec$.$anonfun$spec$56(): zio.ZIO at XmlCodecSpec.scala:239
[error]          method zio.schema.codec.XmlCodecSpec$$$Lambda$18.apply(): java.lang.Object at XmlCodecSpec.scala:238
[error]          method zio.schema.codec.XmlCodecSpec$.spec(): zio.test.Spec at XmlCodecSpec.scala:238
[error]  private method zio.test.sbt.ZTestTask.$anonfun$execute$1(sbt.testing.EventHandler, zio.Console): zio.ZIO at ZTestRunnerNative.scala:121
[error]          method zio.test.sbt.ZTestTask$$Lambda$1.apply(java.lang.Object): java.lang.Object at ZTestRunnerNative.scala:119
[error]          method zio.test.sbt.ZTestTask.execute(sbt.testing.EventHandler, sbt.testing.Logger[]): sbt.testing.Task[] at ZTestRunnerNative.scala:119
[error]          method zio.test.sbt.ZTestTask$.apply(sbt.testing.TaskDef, java.lang.ClassLoader, java.lang.String, zio.ZIO, zio.test.TestArgs): zio.test.sbt.ZTestTask at ZTestRunnerNative.scala:169
[error]          method zio.test.sbt.ZTestRunnerNative.deserializeTask(java.lang.String, scala.Function1): sbt.testing.Task at ZTestRunnerNative.scala:77
[error]          method zio.test.sbt.ZTestFramework.slaveRunner(java.lang.String[], java.lang.String[], java.lang.ClassLoader, scala.Function1): sbt.testing.Runner at ZTestFramework.scala:35
[error]  private method scala.scalanative.testinterface.TestAdapterBridge.$anonfun$createRunnerFun$1(bool, scala.scalanative.testinterface.common.RunnerArgs): scala.runtime.BoxedUnit at TestAdapterBridge.scala:41
[error]          method scala.scalanative.testinterface.TestAdapterBridge$$Lambda$2.apply(java.lang.Object): java.lang.Object at TestAdapterBridge.scala:33
[error]  private method scala.scalanative.testinterface.TestAdapterBridge.createRunnerFun(bool): scala.Function1 at TestAdapterBridge.scala:33
[error]          method scala.scalanative.testinterface.TestAdapterBridge.start(): scala.runtime.BoxedUnit at TestAdapterBridge.scala:16
[error]          method scala.scalanative.testinterface.TestMain$.main(java.lang.String[]): scala.runtime.BoxedUnit at TestMain.scala:94
[error]   static method scala.scalanative.testinterface.TestMain.main(java.lang.String[]): scala.runtime.BoxedUnit at TestMain.scala:61
[error] 
[error] Unknown static method javax.xml.parsers.SAXParserFactory.newInstance(): javax.xml.parsers.SAXParserFactory, referenced from:
[error]          method scala.xml.factory.XMLLoader$$anon$1.initialValue(): javax.xml.parsers.SAXParser at XMLLoader.scala:41
[error]          method scala.xml.factory.XMLLoader$$anon$1.initialValue(): java.lang.Object at XMLLoader.scala:39
[error]          method scala.xml.factory.XMLLoader.scala$xml$factory$XMLLoader$$parserInstance(): java.lang.ThreadLocal at XMLLoader.scala:39
[error]  private method scala.xml.XML$.scala$xml$factory$XMLLoader$$parserInstance$lzycompute(): java.lang.ThreadLocal at XML.scala:61
[error]          method scala.xml.XML$.scala$xml$factory$XMLLoader$$parserInstance(): java.lang.ThreadLocal at XML.scala:61
[error]          method scala.xml.factory.XMLLoader.parser(): javax.xml.parsers.SAXParser at XMLLoader.scala:48
[error]          method scala.xml.XML$.parser(): javax.xml.parsers.SAXParser at XML.scala:61
[error]          method scala.xml.factory.XMLLoader.reader(): org.xml.sax.XMLReader at XMLLoader.scala:51
[error]          method scala.xml.XML$.reader(): org.xml.sax.XMLReader at XML.scala:61
[error]          method scala.xml.factory.XMLLoader.loadDocument(org.xml.sax.InputSource): scala.xml.Document at XMLLoader.scala:65
[error]          method scala.xml.XML$.loadDocument(org.xml.sax.InputSource): scala.xml.Document at XML.scala:61
[error]          method scala.xml.factory.XMLLoader.loadStringDocument(java.lang.String): scala.xml.Document at XMLLoader.scala:73
[error]          method scala.xml.XML$.loadStringDocument(java.lang.String): scala.xml.Document at XML.scala:61
[error]          method scala.xml.factory.XMLLoader.loadString(java.lang.String): scala.xml.Node at XMLLoader.scala:85
[error]          method scala.xml.XML$.loadString(java.lang.String): scala.xml.Node at XML.scala:61
[error]  private method zio.schema.codec.XmlCodec$$anon$1.$anonfun$streamDecoder$2(zio.Chunk): zio.ZIO at XmlCodec.scala:74
[error]          method zio.schema.codec.XmlCodec$$anon$1$$Lambda$2.apply(java.lang.Object): java.lang.Object at XmlCodec.scala:71
[error]          method zio.schema.codec.XmlCodec$$anon$1.streamDecoder(): zio.stream.ZPipeline at XmlCodec.scala:71
[error]          method zio.schema.codec.XmlCodec$.xmlCodec(zio.schema.codec.XmlCodec$Configuration, zio.schema.Schema): zio.schema.codec.BinaryCodec at XmlCodec.scala:59
[error]          method zio.schema.codec.XmlCodec$.xmlCodec(zio.schema.Schema): zio.schema.codec.BinaryCodec at XmlCodec.scala:56
[error]  private method zio.schema.codec.XmlCodecSpec$.$anonfun$spec$56(): zio.ZIO at XmlCodecSpec.scala:239
[error]          method zio.schema.codec.XmlCodecSpec$$$Lambda$18.apply(): java.lang.Object at XmlCodecSpec.scala:238
[error]          method zio.schema.codec.XmlCodecSpec$.spec(): zio.test.Spec at XmlCodecSpec.scala:238
[error]  private method zio.test.sbt.ZTestTask.$anonfun$execute$1(sbt.testing.EventHandler, zio.Console): zio.ZIO at ZTestRunnerNative.scala:121
[error]          method zio.test.sbt.ZTestTask$$Lambda$1.apply(java.lang.Object): java.lang.Object at ZTestRunnerNative.scala:119
[error]          method zio.test.sbt.ZTestTask.execute(sbt.testing.EventHandler, sbt.testing.Logger[]): sbt.testing.Task[] at ZTestRunnerNative.scala:119
[error]          method zio.test.sbt.ZTestTask$.apply(sbt.testing.TaskDef, java.lang.ClassLoader, java.lang.String, zio.ZIO, zio.test.TestArgs): zio.test.sbt.ZTestTask at ZTestRunnerNative.scala:169
[error]          method zio.test.sbt.ZTestRunnerNative.deserializeTask(java.lang.String, scala.Function1): sbt.testing.Task at ZTestRunnerNative.scala:77
[error]          method zio.test.sbt.ZTestFramework.slaveRunner(java.lang.String[], java.lang.String[], java.lang.ClassLoader, scala.Function1): sbt.testing.Runner at ZTestFramework.scala:35
[error]  private method scala.scalanative.testinterface.TestAdapterBridge.$anonfun$createRunnerFun$1(bool, scala.scalanative.testinterface.common.RunnerArgs): scala.runtime.BoxedUnit at TestAdapterBridge.scala:41
[error]          method scala.scalanative.testinterface.TestAdapterBridge$$Lambda$2.apply(java.lang.Object): java.lang.Object at TestAdapterBridge.scala:33
[error]  private method scala.scalanative.testinterface.TestAdapterBridge.createRunnerFun(bool): scala.Function1 at TestAdapterBridge.scala:33
[error]          method scala.scalanative.testinterface.TestAdapterBridge.start(): scala.runtime.BoxedUnit at TestAdapterBridge.scala:16
[error]          method scala.scalanative.testinterface.TestMain$.main(java.lang.String[]): scala.runtime.BoxedUnit at TestMain.scala:94
[error]   static method scala.scalanative.testinterface.TestMain.main(java.lang.String[]): scala.runtime.BoxedUnit at TestMain.scala:61
[error] 
[error] Unknown type java.lang.reflect.Field, referenced from:
[error]  private method zio.schema.codec.XmlCodec$.$anonfun$encodeRecord$1(java.lang.Object, zio.schema.codec.XmlCodec$Configuration, scala.runtime.ObjectRef, scala.collection.mutable.ListBuffer, zio.schema.Schema$Field): java.lang.Object at XmlCodec.scala:212
[error]          method zio.schema.codec.XmlCodec$$$Lambda$4.apply(java.lang.Object): java.lang.Object at XmlCodec.scala:208
[error]  private method zio.schema.codec.XmlCodec$.encodeRecord(zio.schema.Schema$Record, java.lang.Object, java.lang.String, zio.schema.codec.XmlCodec$Configuration): scala.xml.Elem at XmlCodec.scala:208
[error]          method zio.schema.codec.XmlCodec$.zio$schema$codec$XmlCodec$$encodeXml(zio.schema.Schema, java.lang.Object, java.lang.String, zio.schema.codec.XmlCodec$Configuration): scala.xml.Elem at XmlCodec.scala:153
[error]  private method zio.schema.codec.XmlCodec$$anon$1.$anonfun$streamEncoder$3(java.lang.Object): scala.xml.Elem at XmlCodec.scala:113
[error]          method zio.schema.codec.XmlCodec$$anon$1$$Lambda$11.apply(java.lang.Object): java.lang.Object at XmlCodec.scala:113
[error]  private method zio.schema.codec.XmlCodec$$anon$1.$anonfun$streamEncoder$1(zio.Chunk): zio.ZIO at XmlCodec.scala:113
[error]          method zio.schema.codec.XmlCodec$$anon$1$$Lambda$3.apply(java.lang.Object): java.lang.Object at XmlCodec.scala:108
[error]          method zio.schema.codec.XmlCodec$$anon$1.streamEncoder(): zio.stream.ZPipeline at XmlCodec.scala:108
[error]          method zio.schema.codec.XmlCodec$.xmlCodec(zio.schema.codec.XmlCodec$Configuration, zio.schema.Schema): zio.schema.codec.BinaryCodec at XmlCodec.scala:59
[error]          method zio.schema.codec.XmlCodec$.xmlCodec(zio.schema.Schema): zio.schema.codec.BinaryCodec at XmlCodec.scala:56
[error]  private method zio.schema.codec.XmlCodecSpec$.$anonfun$spec$56(): zio.ZIO at XmlCodecSpec.scala:239
[error]          method zio.schema.codec.XmlCodecSpec$$$Lambda$18.apply(): java.lang.Object at XmlCodecSpec.scala:238
[error]          method zio.schema.codec.XmlCodecSpec$.spec(): zio.test.Spec at XmlCodecSpec.scala:238
[error]  private method zio.test.sbt.ZTestTask.$anonfun$execute$1(sbt.testing.EventHandler, zio.Console): zio.ZIO at ZTestRunnerNative.scala:121
[error]          method zio.test.sbt.ZTestTask$$Lambda$1.apply(java.lang.Object): java.lang.Object at ZTestRunnerNative.scala:119
[error]          method zio.test.sbt.ZTestTask.execute(sbt.testing.EventHandler, sbt.testing.Logger[]): sbt.testing.Task[] at ZTestRunnerNative.scala:119
[error]          method zio.test.sbt.ZTestTask$.apply(sbt.testing.TaskDef, java.lang.ClassLoader, java.lang.String, zio.ZIO, zio.test.TestArgs): zio.test.sbt.ZTestTask at ZTestRunnerNative.scala:169
[error]          method zio.test.sbt.ZTestRunnerNative.deserializeTask(java.lang.String, scala.Function1): sbt.testing.Task at ZTestRunnerNative.scala:77
[error]          method zio.test.sbt.ZTestFramework.slaveRunner(java.lang.String[], java.lang.String[], java.lang.ClassLoader, scala.Function1): sbt.testing.Runner at ZTestFramework.scala:35
[error]  private method scala.scalanative.testinterface.TestAdapterBridge.$anonfun$createRunnerFun$1(bool, scala.scalanative.testinterface.common.RunnerArgs): scala.runtime.BoxedUnit at TestAdapterBridge.scala:41
[error]          method scala.scalanative.testinterface.TestAdapterBridge$$Lambda$2.apply(java.lang.Object): java.lang.Object at TestAdapterBridge.scala:33
[error]  private method scala.scalanative.testinterface.TestAdapterBridge.createRunnerFun(bool): scala.Function1 at TestAdapterBridge.scala:33
[error]          method scala.scalanative.testinterface.TestAdapterBridge.start(): scala.runtime.BoxedUnit at TestAdapterBridge.scala:16
[error]          method scala.scalanative.testinterface.TestMain$.main(java.lang.String[]): scala.runtime.BoxedUnit at TestMain.scala:94
[error]   static method scala.scalanative.testinterface.TestMain.main(java.lang.String[]): scala.runtime.BoxedUnit at TestMain.scala:61
[error] 
[error] Unknown type javax.xml.parsers.SAXParser, referenced from:
[error]          method scala.xml.factory.XMLLoader.reader(): org.xml.sax.XMLReader at XMLLoader.scala:51
[error]          method scala.xml.XML$.reader(): org.xml.sax.XMLReader at XML.scala:61
[error]          method scala.xml.factory.XMLLoader.loadDocument(org.xml.sax.InputSource): scala.xml.Document at XMLLoader.scala:65
[error]          method scala.xml.XML$.loadDocument(org.xml.sax.InputSource): scala.xml.Document at XML.scala:61
[error]          method scala.xml.factory.XMLLoader.loadStringDocument(java.lang.String): scala.xml.Document at XMLLoader.scala:73
[error]          method scala.xml.XML$.loadStringDocument(java.lang.String): scala.xml.Document at XML.scala:61
[error]          method scala.xml.factory.XMLLoader.loadString(java.lang.String): scala.xml.Node at XMLLoader.scala:85
[error]          method scala.xml.XML$.loadString(java.lang.String): scala.xml.Node at XML.scala:61
[error]  private method zio.schema.codec.XmlCodec$$anon$1.$anonfun$streamDecoder$2(zio.Chunk): zio.ZIO at XmlCodec.scala:74
[error]          method zio.schema.codec.XmlCodec$$anon$1$$Lambda$2.apply(java.lang.Object): java.lang.Object at XmlCodec.scala:71
[error]          method zio.schema.codec.XmlCodec$$anon$1.streamDecoder(): zio.stream.ZPipeline at XmlCodec.scala:71
[error]          method zio.schema.codec.XmlCodec$.xmlCodec(zio.schema.codec.XmlCodec$Configuration, zio.schema.Schema): zio.schema.codec.BinaryCodec at XmlCodec.scala:59
[error]          method zio.schema.codec.XmlCodec$.xmlCodec(zio.schema.Schema): zio.schema.codec.BinaryCodec at XmlCodec.scala:56
[error]  private method zio.schema.codec.XmlCodecSpec$.$anonfun$spec$56(): zio.ZIO at XmlCodecSpec.scala:239
[error]          method zio.schema.codec.XmlCodecSpec$$$Lambda$18.apply(): java.lang.Object at XmlCodecSpec.scala:238
[error]          method zio.schema.codec.XmlCodecSpec$.spec(): zio.test.Spec at XmlCodecSpec.scala:238
[error]  private method zio.test.sbt.ZTestTask.$anonfun$execute$1(sbt.testing.EventHandler, zio.Console): zio.ZIO at ZTestRunnerNative.scala:121
[error]          method zio.test.sbt.ZTestTask$$Lambda$1.apply(java.lang.Object): java.lang.Object at ZTestRunnerNative.scala:119
[error]          method zio.test.sbt.ZTestTask.execute(sbt.testing.EventHandler, sbt.testing.Logger[]): sbt.testing.Task[] at ZTestRunnerNative.scala:119
[error]          method zio.test.sbt.ZTestTask$.apply(sbt.testing.TaskDef, java.lang.ClassLoader, java.lang.String, zio.ZIO, zio.test.TestArgs): zio.test.sbt.ZTestTask at ZTestRunnerNative.scala:169
[error]          method zio.test.sbt.ZTestRunnerNative.deserializeTask(java.lang.String, scala.Function1): sbt.testing.Task at ZTestRunnerNative.scala:77
[error]          method zio.test.sbt.ZTestFramework.slaveRunner(java.lang.String[], java.lang.String[], java.lang.ClassLoader, scala.Function1): sbt.testing.Runner at ZTestFramework.scala:35
[error]  private method scala.scalanative.testinterface.TestAdapterBridge.$anonfun$createRunnerFun$1(bool, scala.scalanative.testinterface.common.RunnerArgs): scala.runtime.BoxedUnit at TestAdapterBridge.scala:41
[error]          method scala.scalanative.testinterface.TestAdapterBridge$$Lambda$2.apply(java.lang.Object): java.lang.Object at TestAdapterBridge.scala:33
[error]  private method scala.scalanative.testinterface.TestAdapterBridge.createRunnerFun(bool): scala.Function1 at TestAdapterBridge.scala:33
[error]          method scala.scalanative.testinterface.TestAdapterBridge.start(): scala.runtime.BoxedUnit at TestAdapterBridge.scala:16
[error]          method scala.scalanative.testinterface.TestMain$.main(java.lang.String[]): scala.runtime.BoxedUnit at TestMain.scala:94
[error]   static method scala.scalanative.testinterface.TestMain.main(java.lang.String[]): scala.runtime.BoxedUnit at TestMain.scala:61
[error] 
[error] Unknown type javax.xml.parsers.SAXParserFactory, referenced from:
[error]          method scala.xml.factory.XMLLoader$$anon$1.initialValue(): javax.xml.parsers.SAXParser at XMLLoader.scala:41
[error]          method scala.xml.factory.XMLLoader$$anon$1.initialValue(): java.lang.Object at XMLLoader.scala:39
[error]          method scala.xml.factory.XMLLoader.scala$xml$factory$XMLLoader$$parserInstance(): java.lang.ThreadLocal at XMLLoader.scala:39
[error]  private method scala.xml.XML$.scala$xml$factory$XMLLoader$$parserInstance$lzycompute(): java.lang.ThreadLocal at XML.scala:61
[error]          method scala.xml.XML$.scala$xml$factory$XMLLoader$$parserInstance(): java.lang.ThreadLocal at XML.scala:61
[error]          method scala.xml.factory.XMLLoader.parser(): javax.xml.parsers.SAXParser at XMLLoader.scala:48
[error]          method scala.xml.XML$.parser(): javax.xml.parsers.SAXParser at XML.scala:61
[error]          method scala.xml.factory.XMLLoader.reader(): org.xml.sax.XMLReader at XMLLoader.scala:51
[error]          method scala.xml.XML$.reader(): org.xml.sax.XMLReader at XML.scala:61
[error]          method scala.xml.factory.XMLLoader.loadDocument(org.xml.sax.InputSource): scala.xml.Document at XMLLoader.scala:65
[error]          method scala.xml.XML$.loadDocument(org.xml.sax.InputSource): scala.xml.Document at XML.scala:61
[error]          method scala.xml.factory.XMLLoader.loadStringDocument(java.lang.String): scala.xml.Document at XMLLoader.scala:73
[error]          method scala.xml.XML$.loadStringDocument(java.lang.String): scala.xml.Document at XML.scala:61
[error]          method scala.xml.factory.XMLLoader.loadString(java.lang.String): scala.xml.Node at XMLLoader.scala:85
[error]          method scala.xml.XML$.loadString(java.lang.String): scala.xml.Node at XML.scala:61
[error]  private method zio.schema.codec.XmlCodec$$anon$1.$anonfun$streamDecoder$2(zio.Chunk): zio.ZIO at XmlCodec.scala:74
[error]          method zio.schema.codec.XmlCodec$$anon$1$$Lambda$2.apply(java.lang.Object): java.lang.Object at XmlCodec.scala:71
[error]          method zio.schema.codec.XmlCodec$$anon$1.streamDecoder(): zio.stream.ZPipeline at XmlCodec.scala:71
[error]          method zio.schema.codec.XmlCodec$.xmlCodec(zio.schema.codec.XmlCodec$Configuration, zio.schema.Schema): zio.schema.codec.BinaryCodec at XmlCodec.scala:59
[error]          method zio.schema.codec.XmlCodec$.xmlCodec(zio.schema.Schema): zio.schema.codec.BinaryCodec at XmlCodec.scala:56
[error]  private method zio.schema.codec.XmlCodecSpec$.$anonfun$spec$56(): zio.ZIO at XmlCodecSpec.scala:239
[error]          method zio.schema.codec.XmlCodecSpec$$$Lambda$18.apply(): java.lang.Object at XmlCodecSpec.scala:238
[error]          method zio.schema.codec.XmlCodecSpec$.spec(): zio.test.Spec at XmlCodecSpec.scala:238
[error]  private method zio.test.sbt.ZTestTask.$anonfun$execute$1(sbt.testing.EventHandler, zio.Console): zio.ZIO at ZTestRunnerNative.scala:121
[error]          method zio.test.sbt.ZTestTask$$Lambda$1.apply(java.lang.Object): java.lang.Object at ZTestRunnerNative.scala:119
[error]          method zio.test.sbt.ZTestTask.execute(sbt.testing.EventHandler, sbt.testing.Logger[]): sbt.testing.Task[] at ZTestRunnerNative.scala:119
[error]          method zio.test.sbt.ZTestTask$.apply(sbt.testing.TaskDef, java.lang.ClassLoader, java.lang.String, zio.ZIO, zio.test.TestArgs): zio.test.sbt.ZTestTask at ZTestRunnerNative.scala:169
[error]          method zio.test.sbt.ZTestRunnerNative.deserializeTask(java.lang.String, scala.Function1): sbt.testing.Task at ZTestRunnerNative.scala:77
[error]          method zio.test.sbt.ZTestFramework.slaveRunner(java.lang.String[], java.lang.String[], java.lang.ClassLoader, scala.Function1): sbt.testing.Runner at ZTestFramework.scala:35
[error]  private method scala.scalanative.testinterface.TestAdapterBridge.$anonfun$createRunnerFun$1(bool, scala.scalanative.testinterface.common.RunnerArgs): scala.runtime.BoxedUnit at TestAdapterBridge.scala:41
[error]          method scala.scalanative.testinterface.TestAdapterBridge$$Lambda$2.apply(java.lang.Object): java.lang.Object at TestAdapterBridge.scala:33
[error]  private method scala.scalanative.testinterface.TestAdapterBridge.createRunnerFun(bool): scala.Function1 at TestAdapterBridge.scala:33
[error]          method scala.scalanative.testinterface.TestAdapterBridge.start(): scala.runtime.BoxedUnit at TestAdapterBridge.scala:16
[error]          method scala.scalanative.testinterface.TestMain$.main(java.lang.String[]): scala.runtime.BoxedUnit at TestMain.scala:94
[error]   static method scala.scalanative.testinterface.TestMain.main(java.lang.String[]): scala.runtime.BoxedUnit at TestMain.scala:61
[error] 
[info] Total (45136 ms)
  [32m+[0m parse class name in package
  [32m+[0m parse inner class name in some object
  [32m+[0m parse one string
  [32m+[0m parse complex structure
  [32m+[0m fully qualified name of nominal structure
  [32m+[0m name of nominal structure
      [32m+[0m ZonedDateTime
    [32m+[0m option
      [32m+[0m Bool
      [32m+[0m Short
      [32m+[0m Int
      [32m+[0m String
      [32m+[0m Long
      [32m+[0m Float
      [32m+[0m Char
      [32m+[0m UUID
      [32m+[0m Double
      [32m+[0m BigDecimal
      [32m+[0m BigInteger
      [32m+[0m Binary
      [32m+[0m Instant
      [32m+[0m Duration
      [32m+[0m LocalDateTime
      [32m+[0m DayOfWeek
      [32m+[0m LocalDate
      [32m+[0m Month
      [32m+[0m LocalTime
      [32m+[0m OffsetTime
      [32m+[0m Period
      [32m+[0m Year
      [33m-[0m [33mMonthDay[0m - ignored: 1
      [32m+[0m OffsetDateTime
      [32m+[0m YearMonth
      [32m+[0m UnitType
      [32m+[0m ZoneId
      [32m+[0m ZoneOffset
      [32m+[0m ZonedDateTime
    [32m+[0m records
      [32m+[0m singleton
      [32m+[0m case class
      [32m+[0m recursive
      [32m+[0m generic record
    [32m+[0m enums
      [33m-[0m [33mhigh arity[0m - ignored: 1
      [32m+[0m sealed trait
      [32m+[0m recursive
    [32m+[0m either
      [32m+[0m Either[Short,Short]
      [32m+[0m Either[Int,Int]
      [32m+[0m Either[Bool,Bool]
      [32m+[0m Either[Long,Long]
      [32m+[0m Either[Float,Float]
      [32m+[0m Either[Double,Double]
      [32m+[0m Either[Char,Char]
      [32m+[0m Either[UUID,UUID]
      [32m+[0m Either[BigDecimal,BigDecimal]
      [32m+[0m Either[BigInteger,BigInteger]
      [32m+[0m Either[DayOfWeek,DayOfWeek]
      [32m+[0m Either[String,String]
      [32m+[0m Either[Duration,Duration]
      [32m+[0m Either[Instant,Instant]
      [32m+[0m Either[Binary,Binary]
      [32m+[0m Either[LocalDate,LocalDate]
      [33m-[0m [33mEither[MonthDay,MonthDay][0m - ignored: 1
      [32m+[0m Either[OffsetDateTime,OffsetDateTime]
      [32m+[0m Either[Month,Month]
      [32m+[0m Either[OffsetTime,OffsetTime]
      [32m+[0m Either[LocalTime,LocalTime]
      [32m+[0m Either[Year,Year]
      [32m+[0m Either[LocalDateTime,LocalDateTime]
      [32m+[0m Either[YearMonth,YearMonth]
      [32m+[0m Either[Period,Period]
      [32m+[0m Either[UnitType,UnitType]
      [32m+[0m Either[ZoneOffset,ZoneOffset]
      [32m+[0m Either[ZoneId,ZoneId]
      [32m+[0m Either[ZonedDateTime,ZonedDateTime]
[32m+[0m ThriftCodec Spec
    [32m+[0m second
  [32m+[0m Should correctly encode
    [32m+[0m first
[32m+[0m MessagePackCodec Spec
  [32m+[0m Should successfully encode and decode
  [32m+[0m not comparable
    [32m+[0m Left <-> Right
    [32m+[0m Separate enum cases
    [32m+[0m doubles
    [32m+[0m floats
    [32m+[0m integers
    [32m+[0m list of an empty list
    [32m+[0m records
    [32m+[0m empty list
[info] No tests were executed
    [32m+[0m tuple containing empty list & tuple containing list of an empty list
    [32m+[0m strings
[info] No tests were executed
  [32m+[0m isSubpathOf
    [32m+[0m any path is subpath of root
    [32m+[0m records
    [32m+[0m integer
    [32m+[0m embedded messages
    [32m+[0m two integers
    [32m+[0m string lists
    [32m+[0m integer inside wrapper class
    [32m+[0m int lists
    [32m+[0m enums unwrapped
    [32m+[0m enumerations
    [32m+[0m map
    [32m+[0m set
    [32m+[0m failure
    [32m+[0m two wrapped integers inside wrapper class
  [32m+[0m Should successfully encode and decode
    [32m+[0m list of an empty list
    [32m+[0m tuple containing empty list & tuple containing list of an empty list
    [32m+[0m empty list
    [32m+[0m records
    [32m+[0m two integers
    [32m+[0m integer
    [32m+[0m two integers inside wrapper class
    [32m+[0m periods
    [32m+[0m integer inside wrapper class
    [32m+[0m complex product and string and integer
    [32m+[0m two wrapped integers inside wrapper class
    [32m+[0m two integers inside wrapper class
    [32m+[0m records with arity greater than 22
    [32m+[0m booleans
    [32m+[0m shorts
    [32m+[0m longs
    [32m+[0m floats
    [32m+[0m doubles
    [32m+[0m chars
    [32m+[0m year months
    [32m+[0m bytes
    [32m+[0m uuids
    [32m+[0m day of weeks
    [32m+[0m currencies
    [32m+[0m months
    [32m+[0m years
    [32m+[0m month days
    [32m+[0m booleans
    [32m+[0m records with arity greater than 22
    [32m+[0m case classes with arity 22
    [32m+[0m complex product and string and integer
    [32m+[0m zone offsets
    [32m+[0m zone ids
    [32m+[0m shorts
    [32m+[0m durations
    [32m+[0m instants
    [32m+[0m floats
    [32m+[0m bytes
    [32m+[0m doubles
    [32m+[0m local date times
    [32m+[0m longs
    [32m+[0m local dates
    [32m+[0m local times
    [32m+[0m uuids
    [32m+[0m offset date times
    [32m+[0m offset times
    [32m+[0m chars
    [32m+[0m day of weeks
[info] Build skipped: No changes detected in build configuration and class path contents since last build.
    [32m+[0m zoned date times
    [32m+[0m currencies
    [32m+[0m string sequences
    [32m+[0m periods
    [32m+[0m empty primitive sequence
    [32m+[0m primitive sequences
    [32m+[0m empty string sequence
    [32m+[0m month days
    [32m+[0m years
    [32m+[0m months
    [32m+[0m any relative path is subpath
    [32m+[0m field2
    [32m+[0m record
    [32m+[0m enumerations
    [32m+[0m year months
    [32m+[0m zone offsets
    [32m+[0m durations
    [32m+[0m enums unwrapped
    [32m+[0m zone ids
    [32m+[0m enumerations preserving type order
    [32m+[0m instants
    [32m+[0m local times
    [32m+[0m enum within enum
    [32m+[0m either left
    [32m+[0m tuples
    [32m+[0m local dates
    [32m+[0m local date times
    [32m+[0m either right
    [32m+[0m offset times
    [32m+[0m either with product type
    [32m+[0m primitive sequences
    [32m+[0m either with sum type
    [32m+[0m offset date times
    [32m+[0m fallback left non full decode
    [32m+[0m zoned date times
    [32m+[0m fallback left full decode
    [32m+[0m empty string sequence
    [32m+[0m empty primitive sequence
    [32m+[0m fallback right full decode
    [32m+[0m fallback right non full decode
    [32m+[0m fallback both full decode
    [32m+[0m string sequences
[info] Build skipped: No changes detected in build configuration and class path contents since last build.
    [32m+[0m enumerations
    [32m+[0m enums unwrapped
    [32m+[0m fallback both non full decode
    [32m+[0m fallback with product type
    [32m+[0m fallback with sum type
    [32m+[0m field1
    [32m+[0m optionals
    [32m+[0m tuples
    [32m+[0m complex optionals with sum type
    [32m+[0m enumerations preserving type order
    [32m+[0m enum within enum
    [32m+[0m option within option
    [32m+[0m option with omitted field
    [32m+[0m either right
    [32m+[0m complex sum type with nested product
    [32m+[0m either with sum type
    [32m+[0m either left
    [32m+[0m complex sum type with nested long primitive
    [32m+[0m product type with inner product type
    [32m+[0m complex either with product type
    [32m+[0m either with product type
    [32m+[0m fallback left non full decode
    [32m+[0m fallback left full decode
    [32m+[0m complex optionals with product type
    [32m+[0m optional of sum type within optional
    [32m+[0m complex tuples
    [32m+[0m fallback right full decode
    [32m+[0m fallback right non full decode
    [32m+[0m optional of product type within optional
    [32m+[0m fallback both full decode
    [32m+[0m sequence of sums
    [32m+[0m fallback both non full decode
    [32m+[0m sequence of products
    [32m+[0m fallback with sum type
    [32m+[0m fallback with product type
    [32m+[0m optionals
    [32m+[0m either within either
[info] Build skipped: No changes detected in build configuration and class path contents since last build.
    [32m+[0m set of products
    [32m+[0m set in record
    [32m+[0m complex optionals with sum type
    [32m+[0m complex sum type with nested product
    [32m+[0m map in record
    [32m+[0m map of products
    [32m+[0m product type with inner product type
    [32m+[0m option within option
[info] Starting process '/home/yossef/zio-schema/zio-schema-json/native/target/scala-2.13/zio-schema-json-test' on port '35379'.
    [32m+[0m tuple
    [32m+[0m complex either with product type
    [32m+[0m complex tuples
    [32m+[0m complex sum type with nested long primitive
    [32m+[0m case class with transient field
    [32m+[0m dynamic
    [32m+[0m field2
    [32m+[0m complex optionals with product type
    [32m+[0m optional of sum type within optional
    [32m+[0m optional of product type within optional
[info] Starting process '/home/yossef/zio-schema/zio-schema-protobuf/native/target/scala-2.13/zio-schema-protobuf-test' on port '38561'.
    [32m+[0m sequence of products
    [32m+[0m either within either
    [32m+[0m sequence of sums
    [32m+[0m map of products
    [32m+[0m set of products
    [32m+[0m dynamic
5 tests passed. 0 tests failed. 0 tests ignored.

Executed in 8 s 128 ms

      [32m+[0m round-trips Bool
[info] Starting process '/home/yossef/zio-schema/zio-schema-optics/native/target/scala-2.13/zio-schema-optics-test' on port '42327'.
      [32m+[0m round-trips Short
      [32m+[0m round-trips Int
274 tests passed. 0 tests failed. 3 tests ignored.

Executed in 8 s 372 ms

248 tests passed. 0 tests failed. 0 tests ignored.

Executed in 17 s 722 ms

    [32m+[0m enumN
      [32m+[0m dynamic int
      [32m+[0m dynamic int
      [32m+[0m dynamic duration
      [32m+[0m dynamic duration
      [32m+[0m dynamic instant
[info] No tests were executed
[info] Completed tests
[info] Starting process '/home/yossef/zio-schema/zio-schema-json/native/target/scala-2.13/zio-schema-json-test' on port '42287'.
      [32m+[0m dynamic instant
      [32m+[0m dynamic zoned date time
      [32m+[0m dynamic zoned date time
[info] Starting process '/home/yossef/zio-schema/zio-schema-protobuf/native/target/scala-2.13/zio-schema-protobuf-test' on port '34249'.
      [32m+[0m dynamic unit
      [32m+[0m dynamic unit
      [32m+[0m round-trips String
      [32m+[0m dynamic string
      [32m+[0m dynamic string
      [32m+[0m dynamic record example
      [32m+[0m dynamic record example
      [32m+[0m dynamic record
      [32m+[0m NestedEnum1 <-> NestedEnum2
    [32m+[0m require optional field
    [32m+[0m fail when required field is missing
    [32m+[0m delete field recursively
  [32m+[0m map
    [32m+[0m map keys
    [32m+[0m map values
  [32m+[0m enumN
    [32m+[0m migrates to equivalent type
    [32m+[0m enumN with recursive types
      [32m+[0m dynamic record
      [32m+[0m dynamic tuple
      [32m+[0m dynamic tuple
      [32m+[0m dynamic json
[info] Completed tests
[info] Starting process '/home/yossef/zio-schema/zio-schema-json/native/target/scala-2.13/zio-schema-json-test' on port '43391'.
      [32m+[0m dynamic json
[32m+[0m JsonCodec JVM Spec
[32m+[0m JsonCodec Spec
  [32m+[0m encoding
    [32m+[0m primitive
  [32m+[0m decoding
    [32m+[0m decode record with more than 22 fields
      [32m+[0m dynamic (string, record)
      [32m+[0m ZoneId
      [32m+[0m unit
      [32m+[0m ZoneOffset
      [33m-[0m [33mCurrency[0m - ignored: 1
      [32m+[0m fail if a field with no default value is missing in the json payload
      [32m+[0m missing fields in the json payload are populated with their default values
      [32m+[0m dynamic (string, record)
[info] Starting process '/home/yossef/zio-schema/zio-schema-protobuf/native/target/scala-2.13/zio-schema-protobuf-test' on port '34389'.
      [32m+[0m dynamic sequence
[info] Starting process '/home/yossef/zio-schema/zio-schema-optics/native/target/scala-2.13/zio-schema-optics-test' on port '33167'.
[32m+[0m ProtobufCodec Spec
  [32m+[0m Should correctly encode
[32m+[0m LensSpec
  [32m+[0m constructors
    [32m+[0m floats
    [32m+[0m doubles
    [32m+[0m integers
    [32m+[0m strings
    [32m+[0m packed lists
    [32m+[0m embedded messages
    [32m+[0m enumerations
    [32m+[0m records
    [32m+[0m unpacked lists
    [32m+[0m enums unwrapped
    [32m+[0m chunk of bytes
    [32m+[0m failure
  [32m+[0m custom field numbers
      [32m+[0m round-trips Long
      [32m+[0m round-trips Float
      [32m+[0m round-trips Double
    [32m+[0m V2 decoder can read encoded V3
    [32m+[0m first
    [32m+[0m nested V2 decoder can read encoded V3
    [32m+[0m V1 decoder can read encoded V2
    [32m+[0m V3 decoder cannot read encoded V2
    [32m+[0m V2 decoder cannot read encoded V1
  [32m+[0m Should successfully encode and decode
    [32m+[0m case class containing empty list & case class containing list of an empty list
    [32m+[0m records
    [32m+[0m empty list
    [32m+[0m list of an empty list
    [32m+[0m records with arity greater than 22
    [32m+[0m records with arity greater than 22 and transient field
    [32m+[0m integer inside wrapper class
    [32m+[0m empty string in wrapper class
    [32m+[0m empty string
    [32m+[0m empty dynamic string
    [32m+[0m integer
    [32m+[0m two integers inside wrapper class
      [32m+[0m dynamic set
    [32m+[0m complex product and string and integer
    [32m+[0m string
    [32m+[0m second
      [32m+[0m dynamic sequence
    [32m+[0m two wrapped integers inside wrapper class
      [32m+[0m dynamic set
    [32m+[0m two integers
    [32m+[0m floats
    [32m+[0m case object
    [32m+[0m recursive data types
    [32m+[0m case class
      [32m+[0m case class with empty option field is decoded by stream
    [32m+[0m longs
    [32m+[0m booleans
      [32m+[0m round-trips Binary
[32m+[0m JsonCodec Spec
  [32m+[0m decoding
    [32m+[0m shorts
    [32m+[0m map in record
    [32m+[0m set in record
    [32m+[0m recursive data types
    [32m+[0m primitive
  [32m+[0m Should successfully decode
    [32m+[0m empty input by non streaming variant
    [32m+[0m empty input
  [32m+[0m Should fail to decode
    [32m+[0m unknown type
    [32m+[0m field begin
    [32m+[0m unable to decode
    [32m+[0m missing value
  [32m+[0m Should correctly encode
    [32m+[0m floats
      [32m+[0m string
    [32m+[0m strings
    [32m+[0m integers
    [32m+[0m doubles
    [32m+[0m records
    [32m+[0m embedded messages
    [32m+[0m int lists
    [32m+[0m string lists
    [32m+[0m set
    [32m+[0m map
    [32m+[0m failure
    [32m+[0m Bool
      [32m+[0m string
    [32m+[0m doubles
    [32m+[0m Streams
      [32m+[0m Streams of integers
        [32m+[0m Encodes a stream with multiple integers
        [32m+[0m Encodes a stream with multiple integers to an array
        [32m+[0m Decodes a stream with multiple integers separated by newlines
        [32m+[0m Decodes a stream with multiple integers separated by spaces
        [32m+[0m Decodes a stream with multiple integers separated by commas and other non JSON number characters
        [32m+[0m Decodes a stream with multiple integers encoded as an array
        [32m+[0m Decodes a stream with multiple integers encoded as an array with additional whitespace
      [32m+[0m Streams of booleans
        [32m+[0m Encodes a stream with multiple booleans
        [32m+[0m Encodes a stream with multiple booleans to an array
        [32m+[0m Decodes a stream with multiple booleans separated by newlines
        [32m+[0m Decodes a stream with multiple booleans separated by spaces
        [32m+[0m Decodes a stream with multiple booleans as an array
        [32m+[0m Decodes a stream with multiple booleans separated by commas and other non JSON boolean characters and not separated at all
      [32m+[0m Streams of strings
        [32m+[0m Encodes a stream with multiple strings
        [32m+[0m Encodes a stream with multiple strings as an array
        [32m+[0m Decodes a stream with multiple strings separated by newlines
        [32m+[0m Decodes a stream with multiple strings as an array
        [32m+[0m Decodes a stream with multiple strings separated by spaces, commas and not separated at all
      [32m+[0m Stream of records
        [32m+[0m Encodes a stream with multiple records
        [32m+[0m Encodes a stream with multiple records as an array
        [32m+[0m Decodes a stream with multiple records separated by newlines
        [32m+[0m Decodes a stream with multiple records, not separated with internal newlines
        [32m+[0m Decodes a stream with multiple records formatted as an array
        [32m+[0m Encodes a stream with no records
        [32m+[0m Encodes a stream with no records
        [32m+[0m Decodes a stream with no records
        [32m+[0m Decodes a stream with no records from an array
    [32m+[0m chars
    [32m+[0m uuids
    [32m+[0m day of weeks
    [32m+[0m months
    [32m+[0m deep recursive data types
  [32m+[0m Should fail to decode
    [32m+[0m unknown type
    [32m+[0m unable to decode
    [32m+[0m missing value
    [32m+[0m field begin
  [32m+[0m Should successfully decode
    [32m+[0m thrift enum value as an integer
    [32m+[0m empty input
    [32m+[0m empty input by non streaming variant
    [32m+[0m decode case class with optionalField annotation
    [32m+[0m decode case class with transientField
    [32m+[0m decode case class with fieldDefaultValue annotation
    [32m+[0m bytes
    [32m+[0m month days
    [32m+[0m years
      [32m+[0m round-trips Char
      [32m+[0m round-trips UUID
      [32m+[0m round-trips BigDecimal
    [32m+[0m periods
    [32m+[0m year months
    [32m+[0m durations
    [32m+[0m zone offsets
        [32m+[0m any
      [32m+[0m unit
      [32m+[0m Currency
    [32m+[0m Generic record
      [32m+[0m with extra fields
      [32m+[0m with empty optional and collection fields without default values, but explicit nulls
      [32m+[0m with empty optional and collection fields without default values, but explicit empty collections
      [32m+[0m with empty optional and collection fields without default values
      [32m+[0m missing required fields
      [32m+[0m aliased field
      [32m+[0m reject duplicated fields
      [32m+[0m reject extra fields
      [32m+[0m optional field with schema or annotated default value
    [32m+[0m EnumN
      [32m+[0m Respects case aliases
      [32m+[0m Respects the case name annotation
    [32m+[0m fallback
      [32m+[0m correctly fallbacks to right
      [32m+[0m correctly fallbacks to left
      [32m+[0m correctly fallbacks to right with full decode
      [32m+[0m correctly fallbacks to both with full decode
      [32m+[0m correctly fallbacks to left with full decode
    [32m+[0m case class with more than 64 fields
      [32m+[0m required and optional fields
      [32m+[0m missing requireda fields
      [32m+[0m reject extra fields
      [32m+[0m reject duplicated fields
      [32m+[0m field name with alias - id
    [32m+[0m record
      [32m+[0m missing fields should be replaced by default values
      [32m+[0m of primitives
      [32m+[0m of records
      [32m+[0m case object
      [32m+[0m record with option fields
    [32m+[0m transform
      [32m+[0m string
      [32m+[0m failed
    [32m+[0m enums - with discriminator
      [32m+[0m case name
      [32m+[0m case name aliases - first alias
      [32m+[0m record with option fields and flag to encode nulls
      [32m+[0m case class with option fields omitted when empty
      [32m+[0m case class
    [32m+[0m instants
      [32m+[0m case name aliases - second alias
      [32m+[0m case name aliases - type in the middle
      [32m+[0m case name - illegal discriminator value
      [32m+[0m case name aliases - type in the last place
    [32m+[0m case class
      [32m+[0m backticked field name
    [32m+[0m fallback
      [32m+[0m both pretty printed
      [32m+[0m left
      [32m+[0m right
      [32m+[0m both
    [32m+[0m optional
      [32m+[0m of primitives
    [32m+[0m map case class field names
      [32m+[0m snake case
      [32m+[0m kebab case
      [32m+[0m camel case
      [32m+[0m pascal case
    [32m+[0m tuple
      [32m+[0m of primitives
    [32m+[0m sequence
      [32m+[0m of primitives
    [32m+[0m optional field annotation
      [32m+[0m list empty
      [32m+[0m map empty
      [32m+[0m case name aliases - type in the last place and the content with an escaped string
      [32m+[0m case name - empty fields
    [32m+[0m enums - with no discriminator
      [32m+[0m example 1
      [32m+[0m example 2
      [32m+[0m all empty
    [32m+[0m Set
      [32m+[0m of complex values
    [32m+[0m Map
      [32m+[0m of complex keys and values
      [32m+[0m of simple keys and values
      [32m+[0m of simple keys and values where the key's schema is lazy
      [32m+[0m of complex keys with transformation to primitive keys
    [32m+[0m empty collections config
      [32m+[0m list empty
      [32m+[0m map empty
      [32m+[0m option empty
      [32m+[0m all empty
      [32m+[0m all empty, but don't ignore empty collections
    [32m+[0m dynamic direct mapping
      [32m+[0m record
    [32m+[0m zio.json.ast.Json encoding
      [32m+[0m Json.Obj
      [32m+[0m Json.Arr
      [32m+[0m Json.Num Int
      [32m+[0m Json.Num Long
      [32m+[0m Json.Num Double
      [32m+[0m Json.Str
      [32m+[0m Json.Bool
      [32m+[0m wrong example
    [32m+[0m enums
      [32m+[0m ADT with format
      [32m+[0m ADT no discriminator config
      [32m+[0m ADT discriminator name config
      [32m+[0m ADT discriminator name config with format
      [32m+[0m Json.Null
    [32m+[0m Generic Record
      [32m+[0m Do not encode transient field
    [32m+[0m EnumN
      [32m+[0m Respects the case name annotation
    [32m+[0m enumeration
      [32m+[0m of primitives
      [32m+[0m ADT
      [32m+[0m ADT with format
      [32m+[0m ADT no discriminator config
      [32m+[0m ADT discriminator name config
      [32m+[0m ADT discriminator name config with format
      [32m+[0m ADT with annotation
      [32m+[0m transient field annotation
      [32m+[0m case name annotation
      [32m+[0m transient case annotation
      [32m+[0m case name aliases - default
      [32m+[0m case name aliases - first alias
      [32m+[0m case name aliases - second alias
      [32m+[0m case name
      [32m+[0m no discriminator
      [32m+[0m case name annotation with discriminator
      [32m+[0m case name annotation with discriminator annotation ignores no discriminator config
      [32m+[0m pretty printing with discriminator field
      [32m+[0m case name annotation with discriminator annotation ignores discriminator name config
      [32m+[0m case name annotation with empty fields
      [32m+[0m case name annotation with empty fields and explicit nulls
      [32m+[0m pretty printing with discriminator key
      [32m+[0m with no discriminator
        [32m+[0m example 1
        [32m+[0m example 2
      [32m+[0m illegal case
    [32m+[0m case class
      [32m+[0m case object
      [32m+[0m optional
      [32m+[0m reject extra fields
      [32m+[0m map case class field names
        [32m+[0m snake case
        [32m+[0m kebab case
        [32m+[0m camel case
        [32m+[0m pascal case
      [32m+[0m reject extra fields via config
      [32m+[0m reject duplicated fields
      [32m+[0m transient field annotation with default value in class definition
      [32m+[0m transient field annotation with default value implicitly available for the field type
      [32m+[0m fieldDefaultValue
      [32m+[0m backticked field name
      [32m+[0m field name with alias - id
      [32m+[0m field name with alias - order_id
      [32m+[0m with option fields encoded as null
      [32m+[0m with transient fields encoded as implicitly available schema default values
      [32m+[0m old field name rejected
      [32m+[0m field name with alias - no alias
      [32m+[0m case class with option fields encoded as null
      [32m+[0m case class with int option field present (at end) from pretty printed json
      [32m+[0m case class with option fields omitted when empty
      [32m+[0m case class with complex option field correctly decodes
    [32m+[0m dynamic direct mapping
      [32m+[0m record
    [32m+[0m Map
      [32m+[0m of complex keys and values
      [32m+[0m of simple keys and values
      [32m+[0m of simple keys and values where the key schema is lazy
      [32m+[0m of primitive keys with transformation to complex keys
    [32m+[0m local times
    [32m+[0m local dates
    [32m+[0m Missing collection fields
      [32m+[0m list
      [32m+[0m set
      [32m+[0m chunck
      [32m+[0m map
      [32m+[0m vector
    [32m+[0m zio.json.ast.Json decoding
      [32m+[0m Json.Obj
    [32m+[0m Short
    [32m+[0m Int
      [32m+[0m Json.Arr
      [32m+[0m Json.Num Int
      [32m+[0m Json.Num Long
      [32m+[0m Json.Num Double
      [32m+[0m Json.Null
      [32m+[0m Json.Bool
      [32m+[0m Json.Str
    [32m+[0m zone ids
    [32m+[0m field1
  [32m+[0m encoding then decoding
    [32m+[0m unit
    [32m+[0m primitive
    [32m+[0m field2
    [32m+[0m fallback
      [32m+[0m of map
      [32m+[0m of records
    [32m+[0m local date times
    [33m-[0m [33mcurrencies[0m - ignored: 1
    [32m+[0m field2
    [32m+[0m offset date times
    [32m+[0m empty packed sequence
      [32m+[0m round-trips BigInteger
    [32m+[0m offset times
    [32m+[0m empty non-packed sequence
    [32m+[0m enumerations
    [32m+[0m enumerations preserving type order
    [32m+[0m enums unwrapped
    [32m+[0m enumN within enumN
timestamp=2025-05-06T12:38:49.737Z level=WARN thread=#zio-fiber-1456 message="Test schemas should generate correct orderings - laws - transitivity has taken more than 1 m to execute. If this is not expected, consider using TestAspect.timeout to timeout runaway tests for faster diagnostics." location=zio.test.sbt.ZTestTask.execute file=ZTestRunnerNative.scala line=121
    [32m+[0m packed sequences
    [32m+[0m either left
    [32m+[0m either right
    [32m+[0m either with product type
    [32m+[0m either with sum type
    [32m+[0m fallback left full decode
    [32m+[0m fallback left non full decode
    [32m+[0m fallback right full decode
      [32m+[0m of enums
    [32m+[0m map
[32m+[0m ProtobufCodec Spec
  [32m+[0m Should correctly encode
    [32m+[0m fallback right non full decode
    [32m+[0m fallback both full decode
    [32m+[0m fallback both non full decode
    [32m+[0m fallback with product type
    [32m+[0m fallback with sum type
    [32m+[0m tuples
    [32m+[0m complex optionals with sum type
    [32m+[0m option within option
107 tests passed. 0 tests failed. 0 tests ignored.

Executed in 18 s 32 ms

    [32m+[0m product type with inner product type
    [32m+[0m complex sum type with nested product
    [32m+[0m complex sum type with nested long primitive
    [32m+[0m complex either with product type
    [32m+[0m complex tuples
    [32m+[0m complex optionals with product type
    [32m+[0m optional of product type within optional
      [32m+[0m encodes and decodes a Map
    [32m+[0m set
    [32m+[0m optionals
    [32m+[0m optional of sum type within optional
    [32m+[0m either within either
    [32m+[0m sequence of products
    [32m+[0m sequence of sums
    [32m+[0m sequence of tuples
    [32m+[0m set of products
    [32m+[0m map of products
      [32m+[0m BrandedDogFood <-> BrandedCatFood
[32m+[0m LensSpec
[info] Completed tests
  [32m+[0m constructors
      [32m+[0m DogFood <-> CatFood
      [32m+[0m encodes and decodes a Set
    [32m+[0m record
      [32m+[0m minimal test case
      [32m+[0m round-trips DayOfWeek
      [32m+[0m round-trips Duration
      [32m+[0m round-trips Instant
    [32m+[0m integers
    [32m+[0m strings
[32m+[0m JsonCodec Spec
    [32m+[0m floats
    [32m+[0m doubles
  [32m+[0m encoding
    [32m+[0m primitive
      [32m+[0m of ZoneOffsets
      [32m+[0m of record
    [32m+[0m non-packed sequences
      [32m+[0m any
      [32m+[0m of primitives
timestamp=2025-05-06T12:39:52.114Z level=WARN thread=#zio-fiber-10986 message="Test ProtobufCodec Spec - Should successfully encode and decode - zoned date times has taken more than 1 m to execute. If this is not expected, consider using TestAspect.timeout to timeout runaway tests for faster diagnostics." location=zio.test.sbt.ZTestTask.execute file=ZTestRunnerNative.scala line=121
timestamp=2025-05-06T12:41:15.875Z level=WARN thread=#zio-fiber-15174 message="Test ProtobufCodec Spec - Should successfully encode and decode - deep recursive data types has taken more than 1 m to execute. If this is not expected, consider using TestAspect.timeout to timeout runaway tests for faster diagnostics." location=zio.test.sbt.ZTestTask.execute file=ZTestRunnerNative.scala line=121
timestamp=2025-05-06T12:41:20.597Z level=WARN thread=#zio-fiber-15177 message="Test ProtobufCodec Spec - Should successfully encode and decode - recursive data types has taken more than 1 m to execute. If this is not expected, consider using TestAspect.timeout to timeout runaway tests for faster diagnostics." location=zio.test.sbt.ZTestTask.execute file=ZTestRunnerNative.scala line=121
timestamp=2025-05-06T12:40:49.112Z level=WARN thread=#zio-fiber-30564 message="Test JsonCodec Spec - encoding then decoding - optional - of Set has taken more than 1 m to execute. If this is not expected, consider using TestAspect.timeout to timeout runaway tests for faster diagnostics." location=zio.test.sbt.ZTestTask.execute file=ZTestRunnerNative.scala line=121
timestamp=2025-05-06T12:41:12.097Z level=WARN thread=#zio-fiber-33478 message="Test JsonCodec Spec - encoding then decoding - optional - of Set has taken more than 1 m to execute. If this is not expected, consider using TestAspect.timeout to timeout runaway tests for faster diagnostics." location=zio.test.sbt.ZTestTask.execute file=ZTestRunnerNative.scala line=121
timestamp=2025-05-06T12:41:10.840Z level=WARN thread=#zio-fiber-31874 message="Test JsonCodec Spec - encoding then decoding - set - encodes and decodes a Set has taken more than 1 m to execute. If this is not expected, consider using TestAspect.timeout to timeout runaway tests for faster diagnostics." location=zio.test.sbt.ZTestTask.execute file=ZTestRunnerNative.scala line=121
timestamp=2025-05-06T12:41:25.708Z level=WARN thread=#zio-fiber-32214 message="Test JsonCodec Spec - encoding then decoding - case class - basic has taken more than 1 m to execute. If this is not expected, consider using TestAspect.timeout to timeout runaway tests for faster diagnostics." location=zio.test.sbt.ZTestTask.execute file=ZTestRunnerNative.scala line=121
timestamp=2025-05-06T12:39:47.657Z level=WARN thread=#zio-fiber-21207 message="Test JsonCodec Spec - encoding then decoding - either - of records of records has taken more than 1 m to execute. If this is not expected, consider using TestAspect.timeout to timeout runaway tests for faster diagnostics." location=zio.test.sbt.ZTestTask.execute file=ZTestRunnerNative.scala line=121
timestamp=2025-05-06T12:41:28.230Z level=WARN thread=#zio-fiber-32932 message="Test JsonCodec Spec - encoding then decoding - optional - of Map has taken more than 1 m to execute. If this is not expected, consider using TestAspect.timeout to timeout runaway tests for faster diagnostics." location=zio.test.sbt.ZTestTask.execute file=ZTestRunnerNative.scala line=121
timestamp=2025-05-06T12:41:28.230Z level=WARN thread=#zio-fiber-32153 message="Test JsonCodec Spec - encoding then decoding - case class - optional has taken more than 1 m to execute. If this is not expected, consider using TestAspect.timeout to timeout runaway tests for faster diagnostics." location=zio.test.sbt.ZTestTask.execute file=ZTestRunnerNative.scala line=121
timestamp=2025-05-06T12:41:56.464Z level=WARN thread=#zio-fiber-18758 message="Test PatchSpec - patch law - sets - of standard types - YearMonth has taken more than 1 m to execute. If this is not expected, consider using TestAspect.timeout to timeout runaway tests for faster diagnostics." location=zio.test.sbt.ZTestTask.execute file=ZTestRunnerNative.scala line=121
timestamp=2025-05-06T12:41:26.657Z level=WARN thread=#zio-fiber-233 message="Test DynamicValueSpec - round-trip - round-trips Records has taken more than 1 m to execute. If this is not expected, consider using TestAspect.timeout to timeout runaway tests for faster diagnostics." location=zio.test.sbt.ZTestTask.execute.fiber.logic file=ZTestRunnerJS.scala line=109
timestamp=2025-05-06T12:41:56.475Z level=WARN thread=#zio-fiber-1234 message="Test ProtobufCodec Spec - Should successfully encode and decode - integer has taken more than 1 m to execute. If this is not expected, consider using TestAspect.timeout to timeout runaway tests for faster diagnostics." location=zio.test.sbt.ZTestTask.execute.fiber.logic file=ZTestRunnerJS.scala line=109
timestamp=2025-05-06T12:41:56.864Z level=WARN thread=#zio-fiber-1236 message="Test ProtobufCodec Spec - Should successfully encode and decode - integer inside wrapper class has taken more than 1 m to execute. If this is not expected, consider using TestAspect.timeout to timeout runaway tests for faster diagnostics." location=zio.test.sbt.ZTestTask.execute.fiber.logic file=ZTestRunnerJS.scala line=109
timestamp=2025-05-06T12:41:56.877Z level=WARN thread=#zio-fiber-1246 message="Test ProtobufCodec Spec - Should fail to decode - fail schemas has taken more than 1 m to execute. If this is not expected, consider using TestAspect.timeout to timeout runaway tests for faster diagnostics." location=zio.test.sbt.ZTestTask.execute.fiber.logic file=ZTestRunnerJS.scala line=109
timestamp=2025-05-06T12:41:56.880Z level=WARN thread=#zio-fiber-1249 message="Test ProtobufCodec Spec - Should correctly encode - embedded messages has taken more than 1 m to execute. If this is not expected, consider using TestAspect.timeout to timeout runaway tests for faster diagnostics." location=zio.test.sbt.ZTestTask.execute.fiber.logic file=ZTestRunnerJS.scala line=109
timestamp=2025-05-06T12:41:56.881Z level=WARN thread=#zio-fiber-1251 message="Test ProtobufCodec Spec - Should correctly encode - packed lists has taken more than 1 m to execute. If this is not expected, consider using TestAspect.timeout to timeout runaway tests for faster diagnostics." location=zio.test.sbt.ZTestTask.execute.fiber.logic file=ZTestRunnerJS.scala line=109
timestamp=2025-05-06T12:41:56.886Z level=WARN thread=#zio-fiber-1253 message="Test ProtobufCodec Spec - Should correctly encode - unpacked lists has taken more than 1 m to execute. If this is not expected, consider using TestAspect.timeout to timeout runaway tests for faster diagnostics." location=zio.test.sbt.ZTestTask.execute.fiber.logic file=ZTestRunnerJS.scala line=109
timestamp=2025-05-06T12:41:56.886Z level=WARN thread=#zio-fiber-1255 message="Test ProtobufCodec Spec - Should correctly encode - records has taken more than 1 m to execute. If this is not expected, consider using TestAspect.timeout to timeout runaway tests for faster diagnostics." location=zio.test.sbt.ZTestTask.execute.fiber.logic file=ZTestRunnerJS.scala line=109
timestamp=2025-05-06T12:41:57.233Z level=WARN thread=#zio-fiber-16603 message="Test PatchSpec - patch law - sets - of enumerations - recursive has taken more than 1 m to execute. If this is not expected, consider using TestAspect.timeout to timeout runaway tests for faster diagnostics." location=zio.test.sbt.ZTestTask.execute file=ZTestRunnerNative.scala line=121
timestamp=2025-05-06T12:41:57.317Z level=WARN thread=#zio-fiber-19155 message="Test PatchSpec - patch law - maps - of standard types - UUID -> UUID has taken more than 1 m to execute. If this is not expected, consider using TestAspect.timeout to timeout runaway tests for faster diagnostics." location=zio.test.sbt.ZTestTask.execute file=ZTestRunnerNative.scala line=121
timestamp=2025-05-06T12:41:57.366Z level=WARN thread=#zio-fiber-18898 message="Test PatchSpec - patch law - maps - of standard types - Binary -> Binary has taken more than 1 m to execute. If this is not expected, consider using TestAspect.timeout to timeout runaway tests for faster diagnostics." location=zio.test.sbt.ZTestTask.execute file=ZTestRunnerNative.scala line=121
timestamp=2025-05-06T12:41:57.366Z level=WARN thread=#zio-fiber-17287 message="Test PatchSpec - patch law - maps - of standard types - String -> String has taken more than 1 m to execute. If this is not expected, consider using TestAspect.timeout to timeout runaway tests for faster diagnostics." location=zio.test.sbt.ZTestTask.execute file=ZTestRunnerNative.scala line=121
timestamp=2025-05-06T12:41:57.366Z level=WARN thread=#zio-fiber-17289 message="Test PatchSpec - patch law - maps - of records - Dog -> Cat has taken more than 1 m to execute. If this is not expected, consider using TestAspect.timeout to timeout runaway tests for faster diagnostics." location=zio.test.sbt.ZTestTask.execute file=ZTestRunnerNative.scala line=121
timestamp=2025-05-06T12:41:57.366Z level=WARN thread=#zio-fiber-17734 message="Test PatchSpec - patch law - records - recursive has taken more than 1 m to execute. If this is not expected, consider using TestAspect.timeout to timeout runaway tests for faster diagnostics." location=zio.test.sbt.ZTestTask.execute file=ZTestRunnerNative.scala line=121
timestamp=2025-05-06T12:41:57.366Z level=WARN thread=#zio-fiber-19054 message="Test PatchSpec - patch law - sets - of standard types - ZoneId has taken more than 1 m to execute. If this is not expected, consider using TestAspect.timeout to timeout runaway tests for faster diagnostics." location=zio.test.sbt.ZTestTask.execute file=ZTestRunnerNative.scala line=121
timestamp=2025-05-06T12:41:57.366Z level=WARN thread=#zio-fiber-17732 message="Test PatchSpec - patch law - records - generic record has taken more than 1 m to execute. If this is not expected, consider using TestAspect.timeout to timeout runaway tests for faster diagnostics." location=zio.test.sbt.ZTestTask.execute file=ZTestRunnerNative.scala line=121
timestamp=2025-05-06T12:41:57.366Z level=WARN thread=#zio-fiber-18609 message="Test PatchSpec - patch law - sets - of standard types - Period has taken more than 1 m to execute. If this is not expected, consider using TestAspect.timeout to timeout runaway tests for faster diagnostics." location=zio.test.sbt.ZTestTask.execute file=ZTestRunnerNative.scala line=121
timestamp=2025-05-06T12:41:57.366Z level=WARN thread=#zio-fiber-17305 message="Test PatchSpec - patch law - maps - of records - Int -> Dog has taken more than 1 m to execute. If this is not expected, consider using TestAspect.timeout to timeout runaway tests for faster diagnostics." location=zio.test.sbt.ZTestTask.execute file=ZTestRunnerNative.scala line=121
timestamp=2025-05-06T12:41:57.367Z level=WARN thread=#zio-fiber-16011 message="Test PatchSpec - patch law - vectors - of standard types - ZonedDateTime has taken more than 1 m to execute. If this is not expected, consider using TestAspect.timeout to timeout runaway tests for faster diagnostics." location=zio.test.sbt.ZTestTask.execute file=ZTestRunnerNative.scala line=121
timestamp=2025-05-06T12:41:57.367Z level=WARN thread=#zio-fiber-18983 message="Test PatchSpec - patch law - sets - of standard types - ZonedDateTime has taken more than 1 m to execute. If this is not expected, consider using TestAspect.timeout to timeout runaway tests for faster diagnostics." location=zio.test.sbt.ZTestTask.execute file=ZTestRunnerNative.scala line=121
timestamp=2025-05-06T12:41:58.576Z level=WARN thread=#zio-fiber-105 message="Test LensSpec - constructors - first has taken more than 1 m to execute. If this is not expected, consider using TestAspect.timeout to timeout runaway tests for faster diagnostics." location=zio.test.sbt.ZTestTask.execute.fiber.logic file=ZTestRunnerJS.scala line=109
